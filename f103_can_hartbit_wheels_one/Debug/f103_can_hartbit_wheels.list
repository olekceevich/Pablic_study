
f103_can_hartbit_wheels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f8  080030f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030f8  080030f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f8  080030f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  08003170  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003170  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095dd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d1  00000000  00000000  00029676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002af48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174b2  00000000  00000000  0002be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f8c  00000000  00000000  000432f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084da7  00000000  00000000  0004c27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022bc  00000000  00000000  000d1078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ea8 	.word	0x08002ea8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ea8 	.word	0x08002ea8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CAN_Init>:
static void LogError(const char *message);
volatile uint8_t responseReceived = 0;
volatile uint8_t activateWheelSuccess = 0;
volatile uint8_t versionReceived = 0;
uint8_t receivedVersion[8];
void CAN_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    LogMessage("CAN_Init: Starting CAN_ConfigFilter");
 8000160:	4814      	ldr	r0, [pc, #80]	; (80001b4 <CAN_Init+0x58>)
 8000162:	f000 f8d7 	bl	8000314 <LogMessage>
    CAN_ConfigFilter();
 8000166:	f000 f833 	bl	80001d0 <CAN_ConfigFilter>
    LogMessage("CAN_Init: CAN_ConfigFilter Done");
 800016a:	4813      	ldr	r0, [pc, #76]	; (80001b8 <CAN_Init+0x5c>)
 800016c:	f000 f8d2 	bl	8000314 <LogMessage>

    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000170:	4812      	ldr	r0, [pc, #72]	; (80001bc <CAN_Init+0x60>)
 8000172:	f000 fda1 	bl	8000cb8 <HAL_CAN_Start>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d005      	beq.n	8000188 <CAN_Init+0x2c>
        LogError("CAN_Init: HAL_CAN_Start Error");
 800017c:	4810      	ldr	r0, [pc, #64]	; (80001c0 <CAN_Init+0x64>)
 800017e:	f000 f8e7 	bl	8000350 <LogError>
        Error_Handler();
 8000182:	f000 f9e5 	bl	8000550 <Error_Handler>
 8000186:	e002      	b.n	800018e <CAN_Init+0x32>
    } else {
        LogMessage("CAN_Init: HAL_CAN_Start OK");
 8000188:	480e      	ldr	r0, [pc, #56]	; (80001c4 <CAN_Init+0x68>)
 800018a:	f000 f8c3 	bl	8000314 <LogMessage>
    }

    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800018e:	2102      	movs	r1, #2
 8000190:	480a      	ldr	r0, [pc, #40]	; (80001bc <CAN_Init+0x60>)
 8000192:	f000 fef6 	bl	8000f82 <HAL_CAN_ActivateNotification>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d005      	beq.n	80001a8 <CAN_Init+0x4c>
        LogError("CAN_Init: HAL_CAN_ActivateNotification Error");
 800019c:	480a      	ldr	r0, [pc, #40]	; (80001c8 <CAN_Init+0x6c>)
 800019e:	f000 f8d7 	bl	8000350 <LogError>
        Error_Handler();
 80001a2:	f000 f9d5 	bl	8000550 <Error_Handler>
    } else {
        LogMessage("CAN_Init: HAL_CAN_ActivateNotification OK");
    }
}
 80001a6:	e002      	b.n	80001ae <CAN_Init+0x52>
        LogMessage("CAN_Init: HAL_CAN_ActivateNotification OK");
 80001a8:	4808      	ldr	r0, [pc, #32]	; (80001cc <CAN_Init+0x70>)
 80001aa:	f000 f8b3 	bl	8000314 <LogMessage>
}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	08002ec0 	.word	0x08002ec0
 80001b8:	08002ee4 	.word	0x08002ee4
 80001bc:	200000d4 	.word	0x200000d4
 80001c0:	08002f04 	.word	0x08002f04
 80001c4:	08002f24 	.word	0x08002f24
 80001c8:	08002f40 	.word	0x08002f40
 80001cc:	08002f70 	.word	0x08002f70

080001d0 <CAN_ConfigFilter>:

static void CAN_ConfigFilter(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08a      	sub	sp, #40	; 0x28
 80001d4:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef FilterConfig = {0};
 80001d6:	463b      	mov	r3, r7
 80001d8:	2228      	movs	r2, #40	; 0x28
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f002 f9cd 	bl	800257c <memset>
    FilterConfig.FilterBank = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001ea:	2301      	movs	r3, #1
 80001ec:	61fb      	str	r3, [r7, #28]
    // Настройка фильтра для принятия всех сообщений
    FilterConfig.FilterIdHigh = 0x0000;
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
    FilterConfig.FilterIdLow = 0x0000;
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
    FilterConfig.FilterMaskIdHigh = 0x0000;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
    FilterConfig.FilterMaskIdLow = 0x0000;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
    FilterConfig.FilterActivation = ENABLE;
 8000202:	2301      	movs	r3, #1
 8000204:	623b      	str	r3, [r7, #32]
    FilterConfig.SlaveStartFilterBank = 14;
 8000206:	230e      	movs	r3, #14
 8000208:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &FilterConfig) != HAL_OK) {
 800020a:	463b      	mov	r3, r7
 800020c:	4619      	mov	r1, r3
 800020e:	4809      	ldr	r0, [pc, #36]	; (8000234 <CAN_ConfigFilter+0x64>)
 8000210:	f000 fc89 	bl	8000b26 <HAL_CAN_ConfigFilter>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d005      	beq.n	8000226 <CAN_ConfigFilter+0x56>
        LogError("CAN_ConfigFilter: Filter configuration failed");
 800021a:	4807      	ldr	r0, [pc, #28]	; (8000238 <CAN_ConfigFilter+0x68>)
 800021c:	f000 f898 	bl	8000350 <LogError>
        Error_Handler();
 8000220:	f000 f996 	bl	8000550 <Error_Handler>
    } else {
        LogMessage("CAN_ConfigFilter: Filter configured successfully");
    }
}
 8000224:	e002      	b.n	800022c <CAN_ConfigFilter+0x5c>
        LogMessage("CAN_ConfigFilter: Filter configured successfully");
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <CAN_ConfigFilter+0x6c>)
 8000228:	f000 f874 	bl	8000314 <LogMessage>
}
 800022c:	bf00      	nop
 800022e:	3728      	adds	r7, #40	; 0x28
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200000d4 	.word	0x200000d4
 8000238:	08002f9c 	.word	0x08002f9c
 800023c:	08002fcc 	.word	0x08002fcc

08000240 <CAN_ProcessReceivedMessage>:

void CAN_ProcessReceivedMessage(void) {
 8000240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000242:	b0cb      	sub	sp, #300	; 0x12c
 8000244:	af0a      	add	r7, sp, #40	; 0x28
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];
    char debugMsg[200]; // Увеличен размер буфера

    if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000246:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800024a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800024e:	2100      	movs	r1, #0
 8000250:	4825      	ldr	r0, [pc, #148]	; (80002e8 <CAN_ProcessReceivedMessage+0xa8>)
 8000252:	f000 fd75 	bl	8000d40 <HAL_CAN_GetRxMessage>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d13c      	bne.n	80002d6 <CAN_ProcessReceivedMessage+0x96>
        // Выводим информацию о каждом принятом сообщении
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
                 (unsigned long)RxHeader.StdId, RxHeader.DLC, RxData[0], RxData[1], RxData[2], RxData[3],
 800025c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
 8000260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
                 (unsigned long)RxHeader.StdId, RxHeader.DLC, RxData[0], RxData[1], RxData[2], RxData[3],
 8000264:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 8000268:	f897 00dd 	ldrb.w	r0, [r7, #221]	; 0xdd
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
 800026c:	4604      	mov	r4, r0
                 (unsigned long)RxHeader.StdId, RxHeader.DLC, RxData[0], RxData[1], RxData[2], RxData[3],
 800026e:	f897 00de 	ldrb.w	r0, [r7, #222]	; 0xde
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
 8000272:	4605      	mov	r5, r0
                 (unsigned long)RxHeader.StdId, RxHeader.DLC, RxData[0], RxData[1], RxData[2], RxData[3],
 8000274:	f897 00df 	ldrb.w	r0, [r7, #223]	; 0xdf
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
 8000278:	4606      	mov	r6, r0
                 RxData[4], RxData[5], RxData[6], RxData[7]);
 800027a:	f897 00e0 	ldrb.w	r0, [r7, #224]	; 0xe0
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
 800027e:	60f8      	str	r0, [r7, #12]
                 RxData[4], RxData[5], RxData[6], RxData[7]);
 8000280:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
 8000284:	60b8      	str	r0, [r7, #8]
                 RxData[4], RxData[5], RxData[6], RxData[7]);
 8000286:	f897 00e2 	ldrb.w	r0, [r7, #226]	; 0xe2
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
 800028a:	6078      	str	r0, [r7, #4]
                 RxData[4], RxData[5], RxData[6], RxData[7]);
 800028c:	f897 00e3 	ldrb.w	r0, [r7, #227]	; 0xe3
        snprintf(debugMsg, sizeof(debugMsg), "Received Msg: ID=%lu, DLC=%d, DATA=[%d, %d, %d, %d, %d, %d, %d, %d]",
 8000290:	6038      	str	r0, [r7, #0]
 8000292:	f107 0014 	add.w	r0, r7, #20
 8000296:	f8d7 c000 	ldr.w	ip, [r7]
 800029a:	f8cd c020 	str.w	ip, [sp, #32]
 800029e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80002a2:	f8cd c01c 	str.w	ip, [sp, #28]
 80002a6:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80002aa:	f8cd c018 	str.w	ip, [sp, #24]
 80002ae:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80002b2:	f8cd c014 	str.w	ip, [sp, #20]
 80002b6:	9604      	str	r6, [sp, #16]
 80002b8:	9503      	str	r5, [sp, #12]
 80002ba:	9402      	str	r4, [sp, #8]
 80002bc:	9101      	str	r1, [sp, #4]
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	4613      	mov	r3, r2
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <CAN_ProcessReceivedMessage+0xac>)
 80002c4:	21c8      	movs	r1, #200	; 0xc8
 80002c6:	f002 f961 	bl	800258c <sniprintf>
        LogMessage(debugMsg);
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f820 	bl	8000314 <LogMessage>
    } else {
        LogError("Failed to read message from FIFO");
    }
}
 80002d4:	e002      	b.n	80002dc <CAN_ProcessReceivedMessage+0x9c>
        LogError("Failed to read message from FIFO");
 80002d6:	4806      	ldr	r0, [pc, #24]	; (80002f0 <CAN_ProcessReceivedMessage+0xb0>)
 80002d8:	f000 f83a 	bl	8000350 <LogError>
}
 80002dc:	bf00      	nop
 80002de:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200000d4 	.word	0x200000d4
 80002ec:	08003000 	.word	0x08003000
 80002f0:	08003044 	.word	0x08003044

080002f4 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
    LogMessage("CAN_IT_RxFifo0MsgPendingCallback: Triggered");
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80002fe:	f000 f809 	bl	8000314 <LogMessage>
    CAN_ProcessReceivedMessage();
 8000302:	f7ff ff9d 	bl	8000240 <CAN_ProcessReceivedMessage>
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	08003068 	.word	0x08003068

08000314 <LogMessage>:
    if (HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &txMailbox) != HAL_OK) {
        // Обработка ошибки отправки
    }
}

static void LogMessage(const char *message) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ff15 	bl	800014c <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	b29a      	uxth	r2, r3
 8000326:	f04f 33ff 	mov.w	r3, #4294967295
 800032a:	6879      	ldr	r1, [r7, #4]
 800032c:	4806      	ldr	r0, [pc, #24]	; (8000348 <LogMessage+0x34>)
 800032e:	f001 ff7b 	bl	8002228 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000332:	f04f 33ff 	mov.w	r3, #4294967295
 8000336:	2202      	movs	r2, #2
 8000338:	4904      	ldr	r1, [pc, #16]	; (800034c <LogMessage+0x38>)
 800033a:	4803      	ldr	r0, [pc, #12]	; (8000348 <LogMessage+0x34>)
 800033c:	f001 ff74 	bl	8002228 <HAL_UART_Transmit>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	2000008c 	.word	0x2000008c
 800034c:	08003094 	.word	0x08003094

08000350 <LogError>:

static void LogError(const char *message) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
    LogMessage(message); // Простое перенаправление в LogMessage для унификации вывода
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f7ff ffdb 	bl	8000314 <LogMessage>
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036a:	f000 fa7f 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036e:	f000 f809 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000372:	f000 f8ad 	bl	80004d0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000376:	f000 f84b 	bl	8000410 <MX_CAN_Init>
  MX_USART2_UART_Init();
 800037a:	f000 f87f 	bl	800047c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  CAN_Init();
 800037e:	f7ff feed 	bl	800015c <CAN_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000382:	e7fe      	b.n	8000382 <main+0x1c>

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b090      	sub	sp, #64	; 0x40
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0318 	add.w	r3, r7, #24
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f002 f8f2 	bl	800257c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	2302      	movs	r3, #2
 80003ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	f107 0318 	add.w	r3, r7, #24
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 facb 	bl	8001968 <HAL_RCC_OscConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003d8:	f000 f8ba 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003dc:	230f      	movs	r3, #15
 80003de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e0:	2302      	movs	r3, #2
 80003e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fd38 	bl	8001e6c <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000402:	f000 f8a5 	bl	8000550 <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3740      	adds	r7, #64	; 0x40
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_CAN_Init+0x64>)
 8000416:	4a18      	ldr	r2, [pc, #96]	; (8000478 <MX_CAN_Init+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_CAN_Init+0x64>)
 800041c:	2212      	movs	r2, #18
 800041e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_CAN_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_CAN_Init+0x64>)
 800042e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000432:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_CAN_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_CAN_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_CAN_Init+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_CAN_Init+0x64>)
 8000448:	2200      	movs	r2, #0
 800044a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_CAN_Init+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_CAN_Init+0x64>)
 8000454:	2200      	movs	r2, #0
 8000456:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_CAN_Init+0x64>)
 800045a:	2200      	movs	r2, #0
 800045c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_CAN_Init+0x64>)
 8000460:	f000 fa66 	bl	8000930 <HAL_CAN_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800046a:	f000 f871 	bl	8000550 <Error_Handler>



  /* USER CODE END CAN_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	200000d4 	.word	0x200000d4
 8000478:	40006400 	.word	0x40006400

0800047c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <MX_USART2_UART_Init+0x50>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004b4:	f001 fe68 	bl	8002188 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004be:	f000 f847 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2000008c 	.word	0x2000008c
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_GPIO_Init+0x78>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a17      	ldr	r2, [pc, #92]	; (8000548 <MX_GPIO_Init+0x78>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_GPIO_Init+0x78>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_GPIO_Init+0x78>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <MX_GPIO_Init+0x78>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_GPIO_Init+0x78>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <MX_GPIO_Init+0x7c>)
 800051c:	f001 fa0c 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000524:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2302      	movs	r3, #2
 8000530:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	4619      	mov	r1, r3
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_GPIO_Init+0x7c>)
 800053a:	f001 f879 	bl	8001630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053e:	bf00      	nop
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <HAL_MspInit+0x5c>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <HAL_MspInit+0x5c>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_MspInit+0x5c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x5c>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_MspInit+0x5c>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x5c>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_MspInit+0x60>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_MspInit+0x60>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010000 	.word	0x40010000

080005c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a28      	ldr	r2, [pc, #160]	; (800067c <HAL_CAN_MspInit+0xbc>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d149      	bne.n	8000674 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <HAL_CAN_MspInit+0xc0>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <HAL_CAN_MspInit+0xc0>)
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ea:	61d3      	str	r3, [r2, #28]
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <HAL_CAN_MspInit+0xc0>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <HAL_CAN_MspInit+0xc0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a20      	ldr	r2, [pc, #128]	; (8000680 <HAL_CAN_MspInit+0xc0>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <HAL_CAN_MspInit+0xc0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4619      	mov	r1, r3
 8000624:	4817      	ldr	r0, [pc, #92]	; (8000684 <HAL_CAN_MspInit+0xc4>)
 8000626:	f001 f803 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000630:	2302      	movs	r3, #2
 8000632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <HAL_CAN_MspInit+0xc4>)
 8000640:	f000 fff6 	bl	8001630 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	2013      	movs	r0, #19
 800064a:	f000 ffba 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800064e:	2013      	movs	r0, #19
 8000650:	f000 ffd3 	bl	80015fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2014      	movs	r0, #20
 800065a:	f000 ffb2 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800065e:	2014      	movs	r0, #20
 8000660:	f000 ffcb 	bl	80015fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2015      	movs	r0, #21
 800066a:	f000 ffaa 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800066e:	2015      	movs	r0, #21
 8000670:	f000 ffc3 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40006400 	.word	0x40006400
 8000680:	40021000 	.word	0x40021000
 8000684:	40010800 	.word	0x40010800

08000688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <HAL_UART_MspInit+0x88>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d12f      	bne.n	8000708 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <HAL_UART_MspInit+0x8c>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <HAL_UART_MspInit+0x8c>)
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b2:	61d3      	str	r3, [r2, #28]
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_UART_MspInit+0x8c>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_UART_MspInit+0x8c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a13      	ldr	r2, [pc, #76]	; (8000714 <HAL_UART_MspInit+0x8c>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_UART_MspInit+0x8c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d8:	2304      	movs	r3, #4
 80006da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_UART_MspInit+0x90>)
 80006ec:	f000 ffa0 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006f0:	2308      	movs	r3, #8
 80006f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <HAL_UART_MspInit+0x90>)
 8000704:	f000 ff94 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40004400 	.word	0x40004400
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <MemManage_Handler+0x4>

0800072e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <UsageFault_Handler+0x4>

0800073a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000762:	f000 f8c9 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000772:	f000 fc2b 	bl	8000fcc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000d4 	.word	0x200000d4

08000780 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000786:	f000 fc21 	bl	8000fcc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000d4 	.word	0x200000d4

08000794 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <CAN1_RX1_IRQHandler+0x10>)
 800079a:	f000 fc17 	bl	8000fcc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000d4 	.word	0x200000d4

080007a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <_sbrk+0x5c>)
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <_sbrk+0x60>)
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <_sbrk+0x64>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <_sbrk+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d207      	bcs.n	80007e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d8:	f001 fea6 	bl	8002528 <__errno>
 80007dc:	4603      	mov	r3, r0
 80007de:	220c      	movs	r2, #12
 80007e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e009      	b.n	80007fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <_sbrk+0x64>)
 80007f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20005000 	.word	0x20005000
 8000808:	00000400 	.word	0x00000400
 800080c:	200000fc 	.word	0x200000fc
 8000810:	20000118 	.word	0x20000118

08000814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000820:	f7ff fff8 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <LoopFillZerobss+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800083c:	4c09      	ldr	r4, [pc, #36]	; (8000864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084a:	f001 fe73 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fd8a 	bl	8000366 <main>
  bx lr
 8000852:	4770      	bx	lr
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800085c:	08003100 	.word	0x08003100
  ldr r2, =_sbss
 8000860:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000864:	20000114 	.word	0x20000114

08000868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_2_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_Init+0x28>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_Init+0x28>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 fe95 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000882:	200f      	movs	r0, #15
 8000884:	f000 f808 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000888:	f7ff fe68 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x54>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x58>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fead 	bl	8001616 <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00e      	b.n	80008e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d80a      	bhi.n	80008e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f000 fe75 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_InitTick+0x5c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a03      	ldr	r2, [pc, #12]	; (8000918 <HAL_IncTick+0x20>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	20000008 	.word	0x20000008
 8000918:	20000100 	.word	0x20000100

0800091c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000100 	.word	0x20000100

08000930 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e0ed      	b.n	8000b1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fe36 	bl	80005c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000964:	f7ff ffda 	bl	800091c <HAL_GetTick>
 8000968:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800096a:	e012      	b.n	8000992 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800096c:	f7ff ffd6 	bl	800091c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b0a      	cmp	r3, #10
 8000978:	d90b      	bls.n	8000992 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2205      	movs	r2, #5
 800098a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e0c5      	b.n	8000b1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d0e5      	beq.n	800096c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f022 0202 	bic.w	r2, r2, #2
 80009ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009b0:	f7ff ffb4 	bl	800091c <HAL_GetTick>
 80009b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009b6:	e012      	b.n	80009de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009b8:	f7ff ffb0 	bl	800091c <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b0a      	cmp	r3, #10
 80009c4:	d90b      	bls.n	80009de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2205      	movs	r2, #5
 80009d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e09f      	b.n	8000b1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1e5      	bne.n	80009b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7e1b      	ldrb	r3, [r3, #24]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d108      	bne.n	8000a06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	e007      	b.n	8000a16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7e5b      	ldrb	r3, [r3, #25]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d108      	bne.n	8000a30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	e007      	b.n	8000a40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7e9b      	ldrb	r3, [r3, #26]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d108      	bne.n	8000a5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f042 0220 	orr.w	r2, r2, #32
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	e007      	b.n	8000a6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 0220 	bic.w	r2, r2, #32
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7edb      	ldrb	r3, [r3, #27]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d108      	bne.n	8000a84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0210 	bic.w	r2, r2, #16
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e007      	b.n	8000a94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0210 	orr.w	r2, r2, #16
 8000a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7f1b      	ldrb	r3, [r3, #28]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d108      	bne.n	8000aae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 0208 	orr.w	r2, r2, #8
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e007      	b.n	8000abe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0208 	bic.w	r2, r2, #8
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7f5b      	ldrb	r3, [r3, #29]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d108      	bne.n	8000ad8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f042 0204 	orr.w	r2, r2, #4
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0204 	bic.w	r2, r2, #4
 8000ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	431a      	orrs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	ea42 0103 	orr.w	r1, r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2201      	movs	r2, #1
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b087      	sub	sp, #28
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b3e:	7cfb      	ldrb	r3, [r7, #19]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d003      	beq.n	8000b4c <HAL_CAN_ConfigFilter+0x26>
 8000b44:	7cfb      	ldrb	r3, [r7, #19]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	f040 80aa 	bne.w	8000ca0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b52:	f043 0201 	orr.w	r2, r3, #1
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f003 031f 	and.w	r3, r3, #31
 8000b64:	2201      	movs	r2, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d123      	bne.n	8000bce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	401a      	ands	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ba8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3248      	adds	r2, #72	; 0x48
 8000bae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bc2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc4:	6979      	ldr	r1, [r7, #20]
 8000bc6:	3348      	adds	r3, #72	; 0x48
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
 8000bcc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d122      	bne.n	8000c1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	431a      	orrs	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bf6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3248      	adds	r2, #72	; 0x48
 8000bfc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c12:	6979      	ldr	r1, [r7, #20]
 8000c14:	3348      	adds	r3, #72	; 0x48
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	440b      	add	r3, r1
 8000c1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c36:	e007      	b.n	8000c48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	431a      	orrs	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c62:	e007      	b.n	8000c74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d107      	bne.n	8000c8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c92:	f023 0201 	bic.w	r2, r3, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e006      	b.n	8000cae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
  }
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d12e      	bne.n	8000d2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2202      	movs	r2, #2
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ce4:	f7ff fe1a 	bl	800091c <HAL_GetTick>
 8000ce8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cea:	e012      	b.n	8000d12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cec:	f7ff fe16 	bl	800091c <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b0a      	cmp	r3, #10
 8000cf8:	d90b      	bls.n	8000d12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2205      	movs	r2, #5
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e012      	b.n	8000d38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e5      	bne.n	8000cec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e006      	b.n	8000d38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
  }
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d54:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d003      	beq.n	8000d64 <HAL_CAN_GetRxMessage+0x24>
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	f040 8103 	bne.w	8000f6a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10e      	bne.n	8000d88 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d116      	bne.n	8000da6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e0f7      	b.n	8000f78 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d107      	bne.n	8000da6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0e8      	b.n	8000f78 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	331b      	adds	r3, #27
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	4413      	add	r3, r2
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0204 	and.w	r2, r3, #4
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10c      	bne.n	8000dde <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	331b      	adds	r3, #27
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	4413      	add	r3, r2
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	0d5b      	lsrs	r3, r3, #21
 8000dd4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e00b      	b.n	8000df6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	331b      	adds	r3, #27
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	4413      	add	r3, r2
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	331b      	adds	r3, #27
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	4413      	add	r3, r2
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0202 	and.w	r2, r3, #2
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	331b      	adds	r3, #27
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	4413      	add	r3, r2
 8000e18:	3304      	adds	r3, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2208      	movs	r2, #8
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	e00b      	b.n	8000e44 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	331b      	adds	r3, #27
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	4413      	add	r3, r2
 8000e38:	3304      	adds	r3, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 020f 	and.w	r2, r3, #15
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	331b      	adds	r3, #27
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	4413      	add	r3, r2
 8000e50:	3304      	adds	r3, #4
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	331b      	adds	r3, #27
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	4413      	add	r3, r2
 8000e68:	3304      	adds	r3, #4
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0c1b      	lsrs	r3, r3, #16
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	0a1a      	lsrs	r2, r3, #8
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	0c1a      	lsrs	r2, r3, #16
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	3302      	adds	r3, #2
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	0e1a      	lsrs	r2, r3, #24
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	3303      	adds	r3, #3
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4413      	add	r3, r2
 8000ee2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3304      	adds	r3, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	4413      	add	r3, r2
 8000efa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0a1a      	lsrs	r2, r3, #8
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3305      	adds	r3, #5
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	4413      	add	r3, r2
 8000f14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	0c1a      	lsrs	r2, r3, #16
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	3306      	adds	r3, #6
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	0e1a      	lsrs	r2, r3, #24
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	3307      	adds	r3, #7
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d108      	bne.n	8000f56 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0220 	orr.w	r2, r2, #32
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	e007      	b.n	8000f66 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0220 	orr.w	r2, r2, #32
 8000f64:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e006      	b.n	8000f78 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
  }
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f92:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d002      	beq.n	8000fa0 <HAL_CAN_ActivateNotification+0x1e>
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d109      	bne.n	8000fb4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6959      	ldr	r1, [r3, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e006      	b.n	8000fc2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
  }
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d07c      	beq.n	800110c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d023      	beq.n	8001064 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2201      	movs	r2, #1
 8001022:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f983 	bl	800133a <HAL_CAN_TxMailbox0CompleteCallback>
 8001034:	e016      	b.n	8001064 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
 8001048:	e00c      	b.n	8001064 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	e002      	b.n	8001064 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f986 	bl	8001370 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106a:	2b00      	cmp	r3, #0
 800106c:	d024      	beq.n	80010b8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001076:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f962 	bl	800134c <HAL_CAN_TxMailbox1CompleteCallback>
 8001088:	e016      	b.n	80010b8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
 800109c:	e00c      	b.n	80010b8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
 80010b0:	e002      	b.n	80010b8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f965 	bl	8001382 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d024      	beq.n	800110c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f941 	bl	800135e <HAL_CAN_TxMailbox2CompleteCallback>
 80010dc:	e016      	b.n	800110c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
 80010f0:	e00c      	b.n	800110c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	e002      	b.n	800110c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f944 	bl	8001394 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00c      	beq.n	8001130 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001126:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2210      	movs	r2, #16
 800112e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2208      	movs	r2, #8
 800114a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f92a 	bl	80013a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d009      	beq.n	8001170 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff f8c2 	bl	80002f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00c      	beq.n	8001194 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2210      	movs	r2, #16
 8001192:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2208      	movs	r2, #8
 80011ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f90a 	bl	80013ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d009      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8f2 	bl	80013b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2210      	movs	r2, #16
 80011ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8f3 	bl	80013dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2208      	movs	r2, #8
 8001210:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f8eb 	bl	80013ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d07b      	beq.n	800131a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d072      	beq.n	8001312 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d008      	beq.n	8001248 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	f043 0302 	orr.w	r3, r3, #2
 8001262:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126a:	2b00      	cmp	r3, #0
 800126c:	d008      	beq.n	8001280 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001286:	2b00      	cmp	r3, #0
 8001288:	d043      	beq.n	8001312 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d03e      	beq.n	8001312 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800129a:	2b60      	cmp	r3, #96	; 0x60
 800129c:	d02b      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x32a>
 800129e:	2b60      	cmp	r3, #96	; 0x60
 80012a0:	d82e      	bhi.n	8001300 <HAL_CAN_IRQHandler+0x334>
 80012a2:	2b50      	cmp	r3, #80	; 0x50
 80012a4:	d022      	beq.n	80012ec <HAL_CAN_IRQHandler+0x320>
 80012a6:	2b50      	cmp	r3, #80	; 0x50
 80012a8:	d82a      	bhi.n	8001300 <HAL_CAN_IRQHandler+0x334>
 80012aa:	2b40      	cmp	r3, #64	; 0x40
 80012ac:	d019      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x316>
 80012ae:	2b40      	cmp	r3, #64	; 0x40
 80012b0:	d826      	bhi.n	8001300 <HAL_CAN_IRQHandler+0x334>
 80012b2:	2b30      	cmp	r3, #48	; 0x30
 80012b4:	d010      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x30c>
 80012b6:	2b30      	cmp	r3, #48	; 0x30
 80012b8:	d822      	bhi.n	8001300 <HAL_CAN_IRQHandler+0x334>
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d002      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x2f8>
 80012be:	2b20      	cmp	r3, #32
 80012c0:	d005      	beq.n	80012ce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012c2:	e01d      	b.n	8001300 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012cc:	e019      	b.n	8001302 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012d6:	e014      	b.n	8001302 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f043 0320 	orr.w	r3, r3, #32
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012e0:	e00f      	b.n	8001302 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012ea:	e00a      	b.n	8001302 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012f4:	e005      	b.n	8001302 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012fe:	e000      	b.n	8001302 <HAL_CAN_IRQHandler+0x336>
            break;
 8001300:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001310:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2204      	movs	r2, #4
 8001318:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f867 	bl	8001400 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4906      	ldr	r1, [pc, #24]	; (80014ac <__NVIC_EnableIRQ+0x34>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2d 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff42 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b08b      	sub	sp, #44	; 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	e169      	b.n	8001918 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001644:	2201      	movs	r2, #1
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8158 	bne.w	8001912 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a9a      	ldr	r2, [pc, #616]	; (80018d0 <HAL_GPIO_Init+0x2a0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d05e      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800166c:	4a98      	ldr	r2, [pc, #608]	; (80018d0 <HAL_GPIO_Init+0x2a0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d875      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001672:	4a98      	ldr	r2, [pc, #608]	; (80018d4 <HAL_GPIO_Init+0x2a4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d058      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001678:	4a96      	ldr	r2, [pc, #600]	; (80018d4 <HAL_GPIO_Init+0x2a4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d86f      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800167e:	4a96      	ldr	r2, [pc, #600]	; (80018d8 <HAL_GPIO_Init+0x2a8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d052      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001684:	4a94      	ldr	r2, [pc, #592]	; (80018d8 <HAL_GPIO_Init+0x2a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d869      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800168a:	4a94      	ldr	r2, [pc, #592]	; (80018dc <HAL_GPIO_Init+0x2ac>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d04c      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001690:	4a92      	ldr	r2, [pc, #584]	; (80018dc <HAL_GPIO_Init+0x2ac>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d863      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001696:	4a92      	ldr	r2, [pc, #584]	; (80018e0 <HAL_GPIO_Init+0x2b0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d046      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800169c:	4a90      	ldr	r2, [pc, #576]	; (80018e0 <HAL_GPIO_Init+0x2b0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d85d      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d82a      	bhi.n	80016fc <HAL_GPIO_Init+0xcc>
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d859      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <HAL_GPIO_Init+0x80>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	0800172b 	.word	0x0800172b
 80016b4:	08001705 	.word	0x08001705
 80016b8:	08001717 	.word	0x08001717
 80016bc:	08001759 	.word	0x08001759
 80016c0:	0800175f 	.word	0x0800175f
 80016c4:	0800175f 	.word	0x0800175f
 80016c8:	0800175f 	.word	0x0800175f
 80016cc:	0800175f 	.word	0x0800175f
 80016d0:	0800175f 	.word	0x0800175f
 80016d4:	0800175f 	.word	0x0800175f
 80016d8:	0800175f 	.word	0x0800175f
 80016dc:	0800175f 	.word	0x0800175f
 80016e0:	0800175f 	.word	0x0800175f
 80016e4:	0800175f 	.word	0x0800175f
 80016e8:	0800175f 	.word	0x0800175f
 80016ec:	0800175f 	.word	0x0800175f
 80016f0:	0800175f 	.word	0x0800175f
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	08001721 	.word	0x08001721
 80016fc:	4a79      	ldr	r2, [pc, #484]	; (80018e4 <HAL_GPIO_Init+0x2b4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001702:	e02c      	b.n	800175e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e029      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e024      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	3308      	adds	r3, #8
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e01f      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	330c      	adds	r3, #12
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	e01a      	b.n	8001760 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001732:	2304      	movs	r3, #4
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e013      	b.n	8001760 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001740:	2308      	movs	r3, #8
 8001742:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	611a      	str	r2, [r3, #16]
          break;
 800174a:	e009      	b.n	8001760 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	615a      	str	r2, [r3, #20]
          break;
 8001756:	e003      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x130>
          break;
 800175e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d801      	bhi.n	800176a <HAL_GPIO_Init+0x13a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	e001      	b.n	800176e <HAL_GPIO_Init+0x13e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	; 0xff
 8001774:	d802      	bhi.n	800177c <HAL_GPIO_Init+0x14c>
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0x152>
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	3b08      	subs	r3, #8
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	210f      	movs	r1, #15
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	401a      	ands	r2, r3
 8001794:	6a39      	ldr	r1, [r7, #32]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	431a      	orrs	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80b1 	beq.w	8001912 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017b0:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c8:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2bc>)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a40      	ldr	r2, [pc, #256]	; (80018f0 <HAL_GPIO_Init+0x2c0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_GPIO_Init+0x1ec>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3f      	ldr	r2, [pc, #252]	; (80018f4 <HAL_GPIO_Init+0x2c4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00d      	beq.n	8001818 <HAL_GPIO_Init+0x1e8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3e      	ldr	r2, [pc, #248]	; (80018f8 <HAL_GPIO_Init+0x2c8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d007      	beq.n	8001814 <HAL_GPIO_Init+0x1e4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3d      	ldr	r2, [pc, #244]	; (80018fc <HAL_GPIO_Init+0x2cc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_GPIO_Init+0x1e0>
 800180c:	2303      	movs	r3, #3
 800180e:	e006      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001810:	2304      	movs	r3, #4
 8001812:	e004      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001814:	2302      	movs	r3, #2
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 800181c:	2300      	movs	r3, #0
 800181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001820:	f002 0203 	and.w	r2, r2, #3
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	4093      	lsls	r3, r2
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182e:	492f      	ldr	r1, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x2bc>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	492c      	ldr	r1, [pc, #176]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	4928      	ldr	r1, [pc, #160]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001860:	4013      	ands	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4922      	ldr	r1, [pc, #136]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	491e      	ldr	r1, [pc, #120]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001888:	4013      	ands	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4918      	ldr	r1, [pc, #96]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d021      	beq.n	8001904 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e021      	b.n	8001912 <HAL_GPIO_Init+0x2e2>
 80018ce:	bf00      	nop
 80018d0:	10320000 	.word	0x10320000
 80018d4:	10310000 	.word	0x10310000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	10210000 	.word	0x10210000
 80018e0:	10120000 	.word	0x10120000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40011400 	.word	0x40011400
 8001900:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_GPIO_Init+0x304>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43db      	mvns	r3, r3
 800190c:	4909      	ldr	r1, [pc, #36]	; (8001934 <HAL_GPIO_Init+0x304>)
 800190e:	4013      	ands	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	3301      	adds	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f47f ae8e 	bne.w	8001644 <HAL_GPIO_Init+0x14>
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	372c      	adds	r7, #44	; 0x2c
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e272      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8087 	beq.w	8001a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001988:	4b92      	ldr	r3, [pc, #584]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b04      	cmp	r3, #4
 8001992:	d00c      	beq.n	80019ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001994:	4b8f      	ldr	r3, [pc, #572]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d112      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5e>
 80019a0:	4b8c      	ldr	r3, [pc, #560]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ac:	d10b      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x12c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d168      	bne.n	8001a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e24c      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x76>
 80019d0:	4b80      	ldr	r3, [pc, #512]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a7f      	ldr	r2, [pc, #508]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e02e      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a77      	ldr	r2, [pc, #476]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0xbc>
 8001a0a:	4b72      	ldr	r3, [pc, #456]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a71      	ldr	r2, [pc, #452]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6e      	ldr	r2, [pc, #440]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 8001a24:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6a      	ldr	r2, [pc, #424]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe ff6a 	bl	800091c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7fe ff66 	bl	800091c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e200      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe4>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7fe ff56 	bl	800091c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7fe ff52 	bl	800091c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1ec      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x10c>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa2:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aae:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x18c>
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1c0      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4939      	ldr	r1, [pc, #228]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7fe ff0b 	bl	800091c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7fe ff07 	bl	800091c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1a1      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4927      	ldr	r1, [pc, #156]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe feea 	bl	800091c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7fe fee6 	bl	800091c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e180      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03a      	beq.n	8001bec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d019      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7fe feca 	bl	800091c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7fe fec6 	bl	800091c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e160      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f000 face 	bl	800214c <RCC_Delay>
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7fe feb0 	bl	800091c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbe:	e00f      	b.n	8001be0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7fe feac 	bl	800091c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d908      	bls.n	8001be0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e146      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	42420000 	.word	0x42420000
 8001bdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b92      	ldr	r3, [pc, #584]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e9      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80a6 	beq.w	8001d46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b8b      	ldr	r3, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b88      	ldr	r3, [pc, #544]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a87      	ldr	r2, [pc, #540]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b85      	ldr	r3, [pc, #532]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b7f      	ldr	r3, [pc, #508]	; (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7e      	ldr	r2, [pc, #504]	; (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7fe fe6d 	bl	800091c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7fe fe69 	bl	800091c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e103      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x312>
 8001c6c:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	e02d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x334>
 8001c82:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a66      	ldr	r2, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	e01c      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x356>
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a60      	ldr	r2, [pc, #384]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a5d      	ldr	r2, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e00b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001cbe:	4b5b      	ldr	r3, [pc, #364]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a57      	ldr	r2, [pc, #348]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d015      	beq.n	8001d0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cde:	f7fe fe1d 	bl	800091c <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7fe fe19 	bl	800091c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0b1      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ee      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
 8001d08:	e014      	b.n	8001d34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7fe fe07 	bl	800091c <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe fe03 	bl	800091c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e09b      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a3b      	ldr	r2, [pc, #236]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8087 	beq.w	8001e5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d061      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d146      	bne.n	8001df2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d64:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7fe fdd7 	bl	800091c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7fe fdd3 	bl	800091c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e06d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d108      	bne.n	8001dac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4921      	ldr	r1, [pc, #132]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a19      	ldr	r1, [r3, #32]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	491b      	ldr	r1, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7fe fda7 	bl	800091c <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7fe fda3 	bl	800091c <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e03d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46a>
 8001df0:	e035      	b.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7fe fd90 	bl	800091c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe fd8c 	bl	800091c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e026      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x498>
 8001e1e:	e01e      	b.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e019      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
 8001e34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x500>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0d0      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4965      	ldr	r1, [pc, #404]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b8      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ed2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	494d      	ldr	r1, [pc, #308]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d040      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d115      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e073      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06b      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4936      	ldr	r1, [pc, #216]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fcde 	bl	800091c <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7fe fcda 	bl	800091c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e053      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d210      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4922      	ldr	r1, [pc, #136]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e032      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4916      	ldr	r1, [pc, #88]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490e      	ldr	r1, [pc, #56]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f821 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490a      	ldr	r1, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1cc>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1d0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fc3c 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	08003098 	.word	0x08003098
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b04      	cmp	r3, #4
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x30>
 800206a:	2b08      	cmp	r3, #8
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x36>
 800206e:	e027      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002072:	613b      	str	r3, [r7, #16]
      break;
 8002074:	e027      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	0c9b      	lsrs	r3, r3, #18
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0c5b      	lsrs	r3, r3, #17
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020a2:	fb03 f202 	mul.w	r2, r3, r2
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e004      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	613b      	str	r3, [r7, #16]
      break;
 80020be:	e002      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020c2:	613b      	str	r3, [r7, #16]
      break;
 80020c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c6:	693b      	ldr	r3, [r7, #16]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	007a1200 	.word	0x007a1200
 80020dc:	080030b0 	.word	0x080030b0
 80020e0:	080030c0 	.word	0x080030c0
 80020e4:	003d0900 	.word	0x003d0900

080020e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000000 	.word	0x20000000

080020fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002100:	f7ff fff2 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4903      	ldr	r1, [pc, #12]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	080030a8 	.word	0x080030a8

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002128:	f7ff ffde 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0adb      	lsrs	r3, r3, #11
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	080030a8 	.word	0x080030a8

0800214c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <RCC_Delay+0x34>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <RCC_Delay+0x38>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0a5b      	lsrs	r3, r3, #9
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002168:	bf00      	nop
  }
  while (Delay --);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	60fa      	str	r2, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f9      	bne.n	8002168 <RCC_Delay+0x1c>
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000000 	.word	0x20000000
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e042      	b.n	8002220 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fa6a 	bl	8000688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f91d 	bl	800240c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	d16d      	bne.n	8002324 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_UART_Transmit+0x2c>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e066      	b.n	8002326 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2221      	movs	r2, #33	; 0x21
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002266:	f7fe fb59 	bl	800091c <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	d108      	bne.n	8002294 <HAL_UART_Transmit+0x6c>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e003      	b.n	800229c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800229c:	e02a      	b.n	80022f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f840 	bl	800232e <UART_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e036      	b.n	8002326 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3302      	adds	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	e007      	b.n	80022e6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1cf      	bne.n	800229e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2200      	movs	r2, #0
 8002306:	2140      	movs	r1, #64	; 0x40
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f810 	bl	800232e <UART_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e006      	b.n	8002326 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b090      	sub	sp, #64	; 0x40
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4613      	mov	r3, r2
 800233c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800233e:	e050      	b.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002346:	d04c      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <UART_WaitOnFlagUntilTimeout+0x30>
 800234e:	f7fe fae5 	bl	800091c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800235a:	429a      	cmp	r2, r3
 800235c:	d241      	bcs.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	330c      	adds	r3, #12
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	e853 3f00 	ldrex	r3, [r3]
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	330c      	adds	r3, #12
 800237c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800237e:	637a      	str	r2, [r7, #52]	; 0x34
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002386:	e841 2300 	strex	r3, r2, [r1]
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e5      	bne.n	800235e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3314      	adds	r3, #20
 8002398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	e853 3f00 	ldrex	r3, [r3]
 80023a0:	613b      	str	r3, [r7, #16]
   return(result);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3314      	adds	r3, #20
 80023b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023b2:	623a      	str	r2, [r7, #32]
 80023b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b6:	69f9      	ldr	r1, [r7, #28]
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	e841 2300 	strex	r3, r2, [r1]
 80023be:	61bb      	str	r3, [r7, #24]
   return(result);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e5      	bne.n	8002392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e00f      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d09f      	beq.n	8002340 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3740      	adds	r7, #64	; 0x40
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002446:	f023 030c 	bic.w	r3, r3, #12
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	430b      	orrs	r3, r1
 8002452:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <UART_SetConfig+0x114>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d103      	bne.n	800247c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002474:	f7ff fe56 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	e002      	b.n	8002482 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800247c:	f7ff fe3e 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 8002480:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	009a      	lsls	r2, r3, #2
 800248c:	441a      	add	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	4a22      	ldr	r2, [pc, #136]	; (8002524 <UART_SetConfig+0x118>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	0119      	lsls	r1, r3, #4
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009a      	lsls	r2, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <UART_SetConfig+0x118>)
 80024ba:	fba3 0302 	umull	r0, r3, r3, r2
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2064      	movs	r0, #100	; 0x64
 80024c2:	fb00 f303 	mul.w	r3, r0, r3
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	3332      	adds	r3, #50	; 0x32
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <UART_SetConfig+0x118>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d8:	4419      	add	r1, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	441a      	add	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <UART_SetConfig+0x118>)
 80024f2:	fba3 0302 	umull	r0, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2064      	movs	r0, #100	; 0x64
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	3332      	adds	r3, #50	; 0x32
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <UART_SetConfig+0x118>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	f003 020f 	and.w	r2, r3, #15
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	440a      	add	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40013800 	.word	0x40013800
 8002524:	51eb851f 	.word	0x51eb851f

08002528 <__errno>:
 8002528:	4b01      	ldr	r3, [pc, #4]	; (8002530 <__errno+0x8>)
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2600      	movs	r6, #0
 8002538:	4d0c      	ldr	r5, [pc, #48]	; (800256c <__libc_init_array+0x38>)
 800253a:	4c0d      	ldr	r4, [pc, #52]	; (8002570 <__libc_init_array+0x3c>)
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	f000 fcb0 	bl	8002ea8 <_init>
 8002548:	2600      	movs	r6, #0
 800254a:	4d0a      	ldr	r5, [pc, #40]	; (8002574 <__libc_init_array+0x40>)
 800254c:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <__libc_init_array+0x44>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	f855 3b04 	ldr.w	r3, [r5], #4
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	f855 3b04 	ldr.w	r3, [r5], #4
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	080030f8 	.word	0x080030f8
 8002570:	080030f8 	.word	0x080030f8
 8002574:	080030f8 	.word	0x080030f8
 8002578:	080030fc 	.word	0x080030fc

0800257c <memset>:
 800257c:	4603      	mov	r3, r0
 800257e:	4402      	add	r2, r0
 8002580:	4293      	cmp	r3, r2
 8002582:	d100      	bne.n	8002586 <memset+0xa>
 8002584:	4770      	bx	lr
 8002586:	f803 1b01 	strb.w	r1, [r3], #1
 800258a:	e7f9      	b.n	8002580 <memset+0x4>

0800258c <sniprintf>:
 800258c:	b40c      	push	{r2, r3}
 800258e:	b530      	push	{r4, r5, lr}
 8002590:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <sniprintf+0x64>)
 8002592:	1e0c      	subs	r4, r1, #0
 8002594:	681d      	ldr	r5, [r3, #0]
 8002596:	b09d      	sub	sp, #116	; 0x74
 8002598:	da08      	bge.n	80025ac <sniprintf+0x20>
 800259a:	238b      	movs	r3, #139	; 0x8b
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	b01d      	add	sp, #116	; 0x74
 80025a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025a8:	b002      	add	sp, #8
 80025aa:	4770      	bx	lr
 80025ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80025b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80025b4:	bf0c      	ite	eq
 80025b6:	4623      	moveq	r3, r4
 80025b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80025bc:	9304      	str	r3, [sp, #16]
 80025be:	9307      	str	r3, [sp, #28]
 80025c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c4:	9002      	str	r0, [sp, #8]
 80025c6:	9006      	str	r0, [sp, #24]
 80025c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80025cc:	4628      	mov	r0, r5
 80025ce:	ab21      	add	r3, sp, #132	; 0x84
 80025d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80025d2:	a902      	add	r1, sp, #8
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	f000 f869 	bl	80026ac <_svfiprintf_r>
 80025da:	1c43      	adds	r3, r0, #1
 80025dc:	bfbc      	itt	lt
 80025de:	238b      	movlt	r3, #139	; 0x8b
 80025e0:	602b      	strlt	r3, [r5, #0]
 80025e2:	2c00      	cmp	r4, #0
 80025e4:	d0dd      	beq.n	80025a2 <sniprintf+0x16>
 80025e6:	2200      	movs	r2, #0
 80025e8:	9b02      	ldr	r3, [sp, #8]
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e7d9      	b.n	80025a2 <sniprintf+0x16>
 80025ee:	bf00      	nop
 80025f0:	2000000c 	.word	0x2000000c

080025f4 <__ssputs_r>:
 80025f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f8:	688e      	ldr	r6, [r1, #8]
 80025fa:	4682      	mov	sl, r0
 80025fc:	429e      	cmp	r6, r3
 80025fe:	460c      	mov	r4, r1
 8002600:	4690      	mov	r8, r2
 8002602:	461f      	mov	r7, r3
 8002604:	d838      	bhi.n	8002678 <__ssputs_r+0x84>
 8002606:	898a      	ldrh	r2, [r1, #12]
 8002608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800260c:	d032      	beq.n	8002674 <__ssputs_r+0x80>
 800260e:	6825      	ldr	r5, [r4, #0]
 8002610:	6909      	ldr	r1, [r1, #16]
 8002612:	3301      	adds	r3, #1
 8002614:	eba5 0901 	sub.w	r9, r5, r1
 8002618:	6965      	ldr	r5, [r4, #20]
 800261a:	444b      	add	r3, r9
 800261c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002624:	106d      	asrs	r5, r5, #1
 8002626:	429d      	cmp	r5, r3
 8002628:	bf38      	it	cc
 800262a:	461d      	movcc	r5, r3
 800262c:	0553      	lsls	r3, r2, #21
 800262e:	d531      	bpl.n	8002694 <__ssputs_r+0xa0>
 8002630:	4629      	mov	r1, r5
 8002632:	f000 fb6f 	bl	8002d14 <_malloc_r>
 8002636:	4606      	mov	r6, r0
 8002638:	b950      	cbnz	r0, 8002650 <__ssputs_r+0x5c>
 800263a:	230c      	movs	r3, #12
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f8ca 3000 	str.w	r3, [sl]
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264a:	81a3      	strh	r3, [r4, #12]
 800264c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002650:	464a      	mov	r2, r9
 8002652:	6921      	ldr	r1, [r4, #16]
 8002654:	f000 face 	bl	8002bf4 <memcpy>
 8002658:	89a3      	ldrh	r3, [r4, #12]
 800265a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800265e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002662:	81a3      	strh	r3, [r4, #12]
 8002664:	6126      	str	r6, [r4, #16]
 8002666:	444e      	add	r6, r9
 8002668:	6026      	str	r6, [r4, #0]
 800266a:	463e      	mov	r6, r7
 800266c:	6165      	str	r5, [r4, #20]
 800266e:	eba5 0509 	sub.w	r5, r5, r9
 8002672:	60a5      	str	r5, [r4, #8]
 8002674:	42be      	cmp	r6, r7
 8002676:	d900      	bls.n	800267a <__ssputs_r+0x86>
 8002678:	463e      	mov	r6, r7
 800267a:	4632      	mov	r2, r6
 800267c:	4641      	mov	r1, r8
 800267e:	6820      	ldr	r0, [r4, #0]
 8002680:	f000 fac6 	bl	8002c10 <memmove>
 8002684:	68a3      	ldr	r3, [r4, #8]
 8002686:	2000      	movs	r0, #0
 8002688:	1b9b      	subs	r3, r3, r6
 800268a:	60a3      	str	r3, [r4, #8]
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	4433      	add	r3, r6
 8002690:	6023      	str	r3, [r4, #0]
 8002692:	e7db      	b.n	800264c <__ssputs_r+0x58>
 8002694:	462a      	mov	r2, r5
 8002696:	f000 fbb1 	bl	8002dfc <_realloc_r>
 800269a:	4606      	mov	r6, r0
 800269c:	2800      	cmp	r0, #0
 800269e:	d1e1      	bne.n	8002664 <__ssputs_r+0x70>
 80026a0:	4650      	mov	r0, sl
 80026a2:	6921      	ldr	r1, [r4, #16]
 80026a4:	f000 face 	bl	8002c44 <_free_r>
 80026a8:	e7c7      	b.n	800263a <__ssputs_r+0x46>
	...

080026ac <_svfiprintf_r>:
 80026ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b0:	4698      	mov	r8, r3
 80026b2:	898b      	ldrh	r3, [r1, #12]
 80026b4:	4607      	mov	r7, r0
 80026b6:	061b      	lsls	r3, r3, #24
 80026b8:	460d      	mov	r5, r1
 80026ba:	4614      	mov	r4, r2
 80026bc:	b09d      	sub	sp, #116	; 0x74
 80026be:	d50e      	bpl.n	80026de <_svfiprintf_r+0x32>
 80026c0:	690b      	ldr	r3, [r1, #16]
 80026c2:	b963      	cbnz	r3, 80026de <_svfiprintf_r+0x32>
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	f000 fb25 	bl	8002d14 <_malloc_r>
 80026ca:	6028      	str	r0, [r5, #0]
 80026cc:	6128      	str	r0, [r5, #16]
 80026ce:	b920      	cbnz	r0, 80026da <_svfiprintf_r+0x2e>
 80026d0:	230c      	movs	r3, #12
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	e0d1      	b.n	800287e <_svfiprintf_r+0x1d2>
 80026da:	2340      	movs	r3, #64	; 0x40
 80026dc:	616b      	str	r3, [r5, #20]
 80026de:	2300      	movs	r3, #0
 80026e0:	9309      	str	r3, [sp, #36]	; 0x24
 80026e2:	2320      	movs	r3, #32
 80026e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026e8:	2330      	movs	r3, #48	; 0x30
 80026ea:	f04f 0901 	mov.w	r9, #1
 80026ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80026f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002898 <_svfiprintf_r+0x1ec>
 80026f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026fa:	4623      	mov	r3, r4
 80026fc:	469a      	mov	sl, r3
 80026fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002702:	b10a      	cbz	r2, 8002708 <_svfiprintf_r+0x5c>
 8002704:	2a25      	cmp	r2, #37	; 0x25
 8002706:	d1f9      	bne.n	80026fc <_svfiprintf_r+0x50>
 8002708:	ebba 0b04 	subs.w	fp, sl, r4
 800270c:	d00b      	beq.n	8002726 <_svfiprintf_r+0x7a>
 800270e:	465b      	mov	r3, fp
 8002710:	4622      	mov	r2, r4
 8002712:	4629      	mov	r1, r5
 8002714:	4638      	mov	r0, r7
 8002716:	f7ff ff6d 	bl	80025f4 <__ssputs_r>
 800271a:	3001      	adds	r0, #1
 800271c:	f000 80aa 	beq.w	8002874 <_svfiprintf_r+0x1c8>
 8002720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002722:	445a      	add	r2, fp
 8002724:	9209      	str	r2, [sp, #36]	; 0x24
 8002726:	f89a 3000 	ldrb.w	r3, [sl]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80a2 	beq.w	8002874 <_svfiprintf_r+0x1c8>
 8002730:	2300      	movs	r3, #0
 8002732:	f04f 32ff 	mov.w	r2, #4294967295
 8002736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800273a:	f10a 0a01 	add.w	sl, sl, #1
 800273e:	9304      	str	r3, [sp, #16]
 8002740:	9307      	str	r3, [sp, #28]
 8002742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002746:	931a      	str	r3, [sp, #104]	; 0x68
 8002748:	4654      	mov	r4, sl
 800274a:	2205      	movs	r2, #5
 800274c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002750:	4851      	ldr	r0, [pc, #324]	; (8002898 <_svfiprintf_r+0x1ec>)
 8002752:	f000 fa41 	bl	8002bd8 <memchr>
 8002756:	9a04      	ldr	r2, [sp, #16]
 8002758:	b9d8      	cbnz	r0, 8002792 <_svfiprintf_r+0xe6>
 800275a:	06d0      	lsls	r0, r2, #27
 800275c:	bf44      	itt	mi
 800275e:	2320      	movmi	r3, #32
 8002760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002764:	0711      	lsls	r1, r2, #28
 8002766:	bf44      	itt	mi
 8002768:	232b      	movmi	r3, #43	; 0x2b
 800276a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800276e:	f89a 3000 	ldrb.w	r3, [sl]
 8002772:	2b2a      	cmp	r3, #42	; 0x2a
 8002774:	d015      	beq.n	80027a2 <_svfiprintf_r+0xf6>
 8002776:	4654      	mov	r4, sl
 8002778:	2000      	movs	r0, #0
 800277a:	f04f 0c0a 	mov.w	ip, #10
 800277e:	9a07      	ldr	r2, [sp, #28]
 8002780:	4621      	mov	r1, r4
 8002782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002786:	3b30      	subs	r3, #48	; 0x30
 8002788:	2b09      	cmp	r3, #9
 800278a:	d94e      	bls.n	800282a <_svfiprintf_r+0x17e>
 800278c:	b1b0      	cbz	r0, 80027bc <_svfiprintf_r+0x110>
 800278e:	9207      	str	r2, [sp, #28]
 8002790:	e014      	b.n	80027bc <_svfiprintf_r+0x110>
 8002792:	eba0 0308 	sub.w	r3, r0, r8
 8002796:	fa09 f303 	lsl.w	r3, r9, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	46a2      	mov	sl, r4
 800279e:	9304      	str	r3, [sp, #16]
 80027a0:	e7d2      	b.n	8002748 <_svfiprintf_r+0x9c>
 80027a2:	9b03      	ldr	r3, [sp, #12]
 80027a4:	1d19      	adds	r1, r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	9103      	str	r1, [sp, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bfbb      	ittet	lt
 80027ae:	425b      	neglt	r3, r3
 80027b0:	f042 0202 	orrlt.w	r2, r2, #2
 80027b4:	9307      	strge	r3, [sp, #28]
 80027b6:	9307      	strlt	r3, [sp, #28]
 80027b8:	bfb8      	it	lt
 80027ba:	9204      	strlt	r2, [sp, #16]
 80027bc:	7823      	ldrb	r3, [r4, #0]
 80027be:	2b2e      	cmp	r3, #46	; 0x2e
 80027c0:	d10c      	bne.n	80027dc <_svfiprintf_r+0x130>
 80027c2:	7863      	ldrb	r3, [r4, #1]
 80027c4:	2b2a      	cmp	r3, #42	; 0x2a
 80027c6:	d135      	bne.n	8002834 <_svfiprintf_r+0x188>
 80027c8:	9b03      	ldr	r3, [sp, #12]
 80027ca:	3402      	adds	r4, #2
 80027cc:	1d1a      	adds	r2, r3, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	9203      	str	r2, [sp, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bfb8      	it	lt
 80027d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80027da:	9305      	str	r3, [sp, #20]
 80027dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800289c <_svfiprintf_r+0x1f0>
 80027e0:	2203      	movs	r2, #3
 80027e2:	4650      	mov	r0, sl
 80027e4:	7821      	ldrb	r1, [r4, #0]
 80027e6:	f000 f9f7 	bl	8002bd8 <memchr>
 80027ea:	b140      	cbz	r0, 80027fe <_svfiprintf_r+0x152>
 80027ec:	2340      	movs	r3, #64	; 0x40
 80027ee:	eba0 000a 	sub.w	r0, r0, sl
 80027f2:	fa03 f000 	lsl.w	r0, r3, r0
 80027f6:	9b04      	ldr	r3, [sp, #16]
 80027f8:	3401      	adds	r4, #1
 80027fa:	4303      	orrs	r3, r0
 80027fc:	9304      	str	r3, [sp, #16]
 80027fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002802:	2206      	movs	r2, #6
 8002804:	4826      	ldr	r0, [pc, #152]	; (80028a0 <_svfiprintf_r+0x1f4>)
 8002806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800280a:	f000 f9e5 	bl	8002bd8 <memchr>
 800280e:	2800      	cmp	r0, #0
 8002810:	d038      	beq.n	8002884 <_svfiprintf_r+0x1d8>
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <_svfiprintf_r+0x1f8>)
 8002814:	bb1b      	cbnz	r3, 800285e <_svfiprintf_r+0x1b2>
 8002816:	9b03      	ldr	r3, [sp, #12]
 8002818:	3307      	adds	r3, #7
 800281a:	f023 0307 	bic.w	r3, r3, #7
 800281e:	3308      	adds	r3, #8
 8002820:	9303      	str	r3, [sp, #12]
 8002822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002824:	4433      	add	r3, r6
 8002826:	9309      	str	r3, [sp, #36]	; 0x24
 8002828:	e767      	b.n	80026fa <_svfiprintf_r+0x4e>
 800282a:	460c      	mov	r4, r1
 800282c:	2001      	movs	r0, #1
 800282e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002832:	e7a5      	b.n	8002780 <_svfiprintf_r+0xd4>
 8002834:	2300      	movs	r3, #0
 8002836:	f04f 0c0a 	mov.w	ip, #10
 800283a:	4619      	mov	r1, r3
 800283c:	3401      	adds	r4, #1
 800283e:	9305      	str	r3, [sp, #20]
 8002840:	4620      	mov	r0, r4
 8002842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002846:	3a30      	subs	r2, #48	; 0x30
 8002848:	2a09      	cmp	r2, #9
 800284a:	d903      	bls.n	8002854 <_svfiprintf_r+0x1a8>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0c5      	beq.n	80027dc <_svfiprintf_r+0x130>
 8002850:	9105      	str	r1, [sp, #20]
 8002852:	e7c3      	b.n	80027dc <_svfiprintf_r+0x130>
 8002854:	4604      	mov	r4, r0
 8002856:	2301      	movs	r3, #1
 8002858:	fb0c 2101 	mla	r1, ip, r1, r2
 800285c:	e7f0      	b.n	8002840 <_svfiprintf_r+0x194>
 800285e:	ab03      	add	r3, sp, #12
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	462a      	mov	r2, r5
 8002864:	4638      	mov	r0, r7
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <_svfiprintf_r+0x1fc>)
 8002868:	a904      	add	r1, sp, #16
 800286a:	f3af 8000 	nop.w
 800286e:	1c42      	adds	r2, r0, #1
 8002870:	4606      	mov	r6, r0
 8002872:	d1d6      	bne.n	8002822 <_svfiprintf_r+0x176>
 8002874:	89ab      	ldrh	r3, [r5, #12]
 8002876:	065b      	lsls	r3, r3, #25
 8002878:	f53f af2c 	bmi.w	80026d4 <_svfiprintf_r+0x28>
 800287c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800287e:	b01d      	add	sp, #116	; 0x74
 8002880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002884:	ab03      	add	r3, sp, #12
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	462a      	mov	r2, r5
 800288a:	4638      	mov	r0, r7
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <_svfiprintf_r+0x1fc>)
 800288e:	a904      	add	r1, sp, #16
 8002890:	f000 f87c 	bl	800298c <_printf_i>
 8002894:	e7eb      	b.n	800286e <_svfiprintf_r+0x1c2>
 8002896:	bf00      	nop
 8002898:	080030c2 	.word	0x080030c2
 800289c:	080030c8 	.word	0x080030c8
 80028a0:	080030cc 	.word	0x080030cc
 80028a4:	00000000 	.word	0x00000000
 80028a8:	080025f5 	.word	0x080025f5

080028ac <_printf_common>:
 80028ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	4616      	mov	r6, r2
 80028b2:	4699      	mov	r9, r3
 80028b4:	688a      	ldr	r2, [r1, #8]
 80028b6:	690b      	ldr	r3, [r1, #16]
 80028b8:	4607      	mov	r7, r0
 80028ba:	4293      	cmp	r3, r2
 80028bc:	bfb8      	it	lt
 80028be:	4613      	movlt	r3, r2
 80028c0:	6033      	str	r3, [r6, #0]
 80028c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028c6:	460c      	mov	r4, r1
 80028c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028cc:	b10a      	cbz	r2, 80028d2 <_printf_common+0x26>
 80028ce:	3301      	adds	r3, #1
 80028d0:	6033      	str	r3, [r6, #0]
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	0699      	lsls	r1, r3, #26
 80028d6:	bf42      	ittt	mi
 80028d8:	6833      	ldrmi	r3, [r6, #0]
 80028da:	3302      	addmi	r3, #2
 80028dc:	6033      	strmi	r3, [r6, #0]
 80028de:	6825      	ldr	r5, [r4, #0]
 80028e0:	f015 0506 	ands.w	r5, r5, #6
 80028e4:	d106      	bne.n	80028f4 <_printf_common+0x48>
 80028e6:	f104 0a19 	add.w	sl, r4, #25
 80028ea:	68e3      	ldr	r3, [r4, #12]
 80028ec:	6832      	ldr	r2, [r6, #0]
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	42ab      	cmp	r3, r5
 80028f2:	dc28      	bgt.n	8002946 <_printf_common+0x9a>
 80028f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028f8:	1e13      	subs	r3, r2, #0
 80028fa:	6822      	ldr	r2, [r4, #0]
 80028fc:	bf18      	it	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	0692      	lsls	r2, r2, #26
 8002902:	d42d      	bmi.n	8002960 <_printf_common+0xb4>
 8002904:	4649      	mov	r1, r9
 8002906:	4638      	mov	r0, r7
 8002908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800290c:	47c0      	blx	r8
 800290e:	3001      	adds	r0, #1
 8002910:	d020      	beq.n	8002954 <_printf_common+0xa8>
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	68e5      	ldr	r5, [r4, #12]
 8002916:	f003 0306 	and.w	r3, r3, #6
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf18      	it	ne
 800291e:	2500      	movne	r5, #0
 8002920:	6832      	ldr	r2, [r6, #0]
 8002922:	f04f 0600 	mov.w	r6, #0
 8002926:	68a3      	ldr	r3, [r4, #8]
 8002928:	bf08      	it	eq
 800292a:	1aad      	subeq	r5, r5, r2
 800292c:	6922      	ldr	r2, [r4, #16]
 800292e:	bf08      	it	eq
 8002930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002934:	4293      	cmp	r3, r2
 8002936:	bfc4      	itt	gt
 8002938:	1a9b      	subgt	r3, r3, r2
 800293a:	18ed      	addgt	r5, r5, r3
 800293c:	341a      	adds	r4, #26
 800293e:	42b5      	cmp	r5, r6
 8002940:	d11a      	bne.n	8002978 <_printf_common+0xcc>
 8002942:	2000      	movs	r0, #0
 8002944:	e008      	b.n	8002958 <_printf_common+0xac>
 8002946:	2301      	movs	r3, #1
 8002948:	4652      	mov	r2, sl
 800294a:	4649      	mov	r1, r9
 800294c:	4638      	mov	r0, r7
 800294e:	47c0      	blx	r8
 8002950:	3001      	adds	r0, #1
 8002952:	d103      	bne.n	800295c <_printf_common+0xb0>
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295c:	3501      	adds	r5, #1
 800295e:	e7c4      	b.n	80028ea <_printf_common+0x3e>
 8002960:	2030      	movs	r0, #48	; 0x30
 8002962:	18e1      	adds	r1, r4, r3
 8002964:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800296e:	4422      	add	r2, r4
 8002970:	3302      	adds	r3, #2
 8002972:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002976:	e7c5      	b.n	8002904 <_printf_common+0x58>
 8002978:	2301      	movs	r3, #1
 800297a:	4622      	mov	r2, r4
 800297c:	4649      	mov	r1, r9
 800297e:	4638      	mov	r0, r7
 8002980:	47c0      	blx	r8
 8002982:	3001      	adds	r0, #1
 8002984:	d0e6      	beq.n	8002954 <_printf_common+0xa8>
 8002986:	3601      	adds	r6, #1
 8002988:	e7d9      	b.n	800293e <_printf_common+0x92>
	...

0800298c <_printf_i>:
 800298c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	7e0f      	ldrb	r7, [r1, #24]
 8002992:	4691      	mov	r9, r2
 8002994:	2f78      	cmp	r7, #120	; 0x78
 8002996:	4680      	mov	r8, r0
 8002998:	460c      	mov	r4, r1
 800299a:	469a      	mov	sl, r3
 800299c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800299e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029a2:	d807      	bhi.n	80029b4 <_printf_i+0x28>
 80029a4:	2f62      	cmp	r7, #98	; 0x62
 80029a6:	d80a      	bhi.n	80029be <_printf_i+0x32>
 80029a8:	2f00      	cmp	r7, #0
 80029aa:	f000 80d9 	beq.w	8002b60 <_printf_i+0x1d4>
 80029ae:	2f58      	cmp	r7, #88	; 0x58
 80029b0:	f000 80a4 	beq.w	8002afc <_printf_i+0x170>
 80029b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029bc:	e03a      	b.n	8002a34 <_printf_i+0xa8>
 80029be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029c2:	2b15      	cmp	r3, #21
 80029c4:	d8f6      	bhi.n	80029b4 <_printf_i+0x28>
 80029c6:	a101      	add	r1, pc, #4	; (adr r1, 80029cc <_printf_i+0x40>)
 80029c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029cc:	08002a25 	.word	0x08002a25
 80029d0:	08002a39 	.word	0x08002a39
 80029d4:	080029b5 	.word	0x080029b5
 80029d8:	080029b5 	.word	0x080029b5
 80029dc:	080029b5 	.word	0x080029b5
 80029e0:	080029b5 	.word	0x080029b5
 80029e4:	08002a39 	.word	0x08002a39
 80029e8:	080029b5 	.word	0x080029b5
 80029ec:	080029b5 	.word	0x080029b5
 80029f0:	080029b5 	.word	0x080029b5
 80029f4:	080029b5 	.word	0x080029b5
 80029f8:	08002b47 	.word	0x08002b47
 80029fc:	08002a69 	.word	0x08002a69
 8002a00:	08002b29 	.word	0x08002b29
 8002a04:	080029b5 	.word	0x080029b5
 8002a08:	080029b5 	.word	0x080029b5
 8002a0c:	08002b69 	.word	0x08002b69
 8002a10:	080029b5 	.word	0x080029b5
 8002a14:	08002a69 	.word	0x08002a69
 8002a18:	080029b5 	.word	0x080029b5
 8002a1c:	080029b5 	.word	0x080029b5
 8002a20:	08002b31 	.word	0x08002b31
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	1d1a      	adds	r2, r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	602a      	str	r2, [r5, #0]
 8002a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0a4      	b.n	8002b82 <_printf_i+0x1f6>
 8002a38:	6820      	ldr	r0, [r4, #0]
 8002a3a:	6829      	ldr	r1, [r5, #0]
 8002a3c:	0606      	lsls	r6, r0, #24
 8002a3e:	f101 0304 	add.w	r3, r1, #4
 8002a42:	d50a      	bpl.n	8002a5a <_printf_i+0xce>
 8002a44:	680e      	ldr	r6, [r1, #0]
 8002a46:	602b      	str	r3, [r5, #0]
 8002a48:	2e00      	cmp	r6, #0
 8002a4a:	da03      	bge.n	8002a54 <_printf_i+0xc8>
 8002a4c:	232d      	movs	r3, #45	; 0x2d
 8002a4e:	4276      	negs	r6, r6
 8002a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a54:	230a      	movs	r3, #10
 8002a56:	485e      	ldr	r0, [pc, #376]	; (8002bd0 <_printf_i+0x244>)
 8002a58:	e019      	b.n	8002a8e <_printf_i+0x102>
 8002a5a:	680e      	ldr	r6, [r1, #0]
 8002a5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a60:	602b      	str	r3, [r5, #0]
 8002a62:	bf18      	it	ne
 8002a64:	b236      	sxthne	r6, r6
 8002a66:	e7ef      	b.n	8002a48 <_printf_i+0xbc>
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	1d19      	adds	r1, r3, #4
 8002a6e:	6029      	str	r1, [r5, #0]
 8002a70:	0601      	lsls	r1, r0, #24
 8002a72:	d501      	bpl.n	8002a78 <_printf_i+0xec>
 8002a74:	681e      	ldr	r6, [r3, #0]
 8002a76:	e002      	b.n	8002a7e <_printf_i+0xf2>
 8002a78:	0646      	lsls	r6, r0, #25
 8002a7a:	d5fb      	bpl.n	8002a74 <_printf_i+0xe8>
 8002a7c:	881e      	ldrh	r6, [r3, #0]
 8002a7e:	2f6f      	cmp	r7, #111	; 0x6f
 8002a80:	bf0c      	ite	eq
 8002a82:	2308      	moveq	r3, #8
 8002a84:	230a      	movne	r3, #10
 8002a86:	4852      	ldr	r0, [pc, #328]	; (8002bd0 <_printf_i+0x244>)
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a8e:	6865      	ldr	r5, [r4, #4]
 8002a90:	2d00      	cmp	r5, #0
 8002a92:	bfa8      	it	ge
 8002a94:	6821      	ldrge	r1, [r4, #0]
 8002a96:	60a5      	str	r5, [r4, #8]
 8002a98:	bfa4      	itt	ge
 8002a9a:	f021 0104 	bicge.w	r1, r1, #4
 8002a9e:	6021      	strge	r1, [r4, #0]
 8002aa0:	b90e      	cbnz	r6, 8002aa6 <_printf_i+0x11a>
 8002aa2:	2d00      	cmp	r5, #0
 8002aa4:	d04d      	beq.n	8002b42 <_printf_i+0x1b6>
 8002aa6:	4615      	mov	r5, r2
 8002aa8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002aac:	fb03 6711 	mls	r7, r3, r1, r6
 8002ab0:	5dc7      	ldrb	r7, [r0, r7]
 8002ab2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ab6:	4637      	mov	r7, r6
 8002ab8:	42bb      	cmp	r3, r7
 8002aba:	460e      	mov	r6, r1
 8002abc:	d9f4      	bls.n	8002aa8 <_printf_i+0x11c>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d10b      	bne.n	8002ada <_printf_i+0x14e>
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	07de      	lsls	r6, r3, #31
 8002ac6:	d508      	bpl.n	8002ada <_printf_i+0x14e>
 8002ac8:	6923      	ldr	r3, [r4, #16]
 8002aca:	6861      	ldr	r1, [r4, #4]
 8002acc:	4299      	cmp	r1, r3
 8002ace:	bfde      	ittt	le
 8002ad0:	2330      	movle	r3, #48	; 0x30
 8002ad2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ad6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ada:	1b52      	subs	r2, r2, r5
 8002adc:	6122      	str	r2, [r4, #16]
 8002ade:	464b      	mov	r3, r9
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	4640      	mov	r0, r8
 8002ae4:	f8cd a000 	str.w	sl, [sp]
 8002ae8:	aa03      	add	r2, sp, #12
 8002aea:	f7ff fedf 	bl	80028ac <_printf_common>
 8002aee:	3001      	adds	r0, #1
 8002af0:	d14c      	bne.n	8002b8c <_printf_i+0x200>
 8002af2:	f04f 30ff 	mov.w	r0, #4294967295
 8002af6:	b004      	add	sp, #16
 8002af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002afc:	4834      	ldr	r0, [pc, #208]	; (8002bd0 <_printf_i+0x244>)
 8002afe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b02:	6829      	ldr	r1, [r5, #0]
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b0a:	6029      	str	r1, [r5, #0]
 8002b0c:	061d      	lsls	r5, r3, #24
 8002b0e:	d514      	bpl.n	8002b3a <_printf_i+0x1ae>
 8002b10:	07df      	lsls	r7, r3, #31
 8002b12:	bf44      	itt	mi
 8002b14:	f043 0320 	orrmi.w	r3, r3, #32
 8002b18:	6023      	strmi	r3, [r4, #0]
 8002b1a:	b91e      	cbnz	r6, 8002b24 <_printf_i+0x198>
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	f023 0320 	bic.w	r3, r3, #32
 8002b22:	6023      	str	r3, [r4, #0]
 8002b24:	2310      	movs	r3, #16
 8002b26:	e7af      	b.n	8002a88 <_printf_i+0xfc>
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	f043 0320 	orr.w	r3, r3, #32
 8002b2e:	6023      	str	r3, [r4, #0]
 8002b30:	2378      	movs	r3, #120	; 0x78
 8002b32:	4828      	ldr	r0, [pc, #160]	; (8002bd4 <_printf_i+0x248>)
 8002b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b38:	e7e3      	b.n	8002b02 <_printf_i+0x176>
 8002b3a:	0659      	lsls	r1, r3, #25
 8002b3c:	bf48      	it	mi
 8002b3e:	b2b6      	uxthmi	r6, r6
 8002b40:	e7e6      	b.n	8002b10 <_printf_i+0x184>
 8002b42:	4615      	mov	r5, r2
 8002b44:	e7bb      	b.n	8002abe <_printf_i+0x132>
 8002b46:	682b      	ldr	r3, [r5, #0]
 8002b48:	6826      	ldr	r6, [r4, #0]
 8002b4a:	1d18      	adds	r0, r3, #4
 8002b4c:	6961      	ldr	r1, [r4, #20]
 8002b4e:	6028      	str	r0, [r5, #0]
 8002b50:	0635      	lsls	r5, r6, #24
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	d501      	bpl.n	8002b5a <_printf_i+0x1ce>
 8002b56:	6019      	str	r1, [r3, #0]
 8002b58:	e002      	b.n	8002b60 <_printf_i+0x1d4>
 8002b5a:	0670      	lsls	r0, r6, #25
 8002b5c:	d5fb      	bpl.n	8002b56 <_printf_i+0x1ca>
 8002b5e:	8019      	strh	r1, [r3, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	4615      	mov	r5, r2
 8002b64:	6123      	str	r3, [r4, #16]
 8002b66:	e7ba      	b.n	8002ade <_printf_i+0x152>
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	1d1a      	adds	r2, r3, #4
 8002b6e:	602a      	str	r2, [r5, #0]
 8002b70:	681d      	ldr	r5, [r3, #0]
 8002b72:	6862      	ldr	r2, [r4, #4]
 8002b74:	4628      	mov	r0, r5
 8002b76:	f000 f82f 	bl	8002bd8 <memchr>
 8002b7a:	b108      	cbz	r0, 8002b80 <_printf_i+0x1f4>
 8002b7c:	1b40      	subs	r0, r0, r5
 8002b7e:	6060      	str	r0, [r4, #4]
 8002b80:	6863      	ldr	r3, [r4, #4]
 8002b82:	6123      	str	r3, [r4, #16]
 8002b84:	2300      	movs	r3, #0
 8002b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b8a:	e7a8      	b.n	8002ade <_printf_i+0x152>
 8002b8c:	462a      	mov	r2, r5
 8002b8e:	4649      	mov	r1, r9
 8002b90:	4640      	mov	r0, r8
 8002b92:	6923      	ldr	r3, [r4, #16]
 8002b94:	47d0      	blx	sl
 8002b96:	3001      	adds	r0, #1
 8002b98:	d0ab      	beq.n	8002af2 <_printf_i+0x166>
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	079b      	lsls	r3, r3, #30
 8002b9e:	d413      	bmi.n	8002bc8 <_printf_i+0x23c>
 8002ba0:	68e0      	ldr	r0, [r4, #12]
 8002ba2:	9b03      	ldr	r3, [sp, #12]
 8002ba4:	4298      	cmp	r0, r3
 8002ba6:	bfb8      	it	lt
 8002ba8:	4618      	movlt	r0, r3
 8002baa:	e7a4      	b.n	8002af6 <_printf_i+0x16a>
 8002bac:	2301      	movs	r3, #1
 8002bae:	4632      	mov	r2, r6
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	47d0      	blx	sl
 8002bb6:	3001      	adds	r0, #1
 8002bb8:	d09b      	beq.n	8002af2 <_printf_i+0x166>
 8002bba:	3501      	adds	r5, #1
 8002bbc:	68e3      	ldr	r3, [r4, #12]
 8002bbe:	9903      	ldr	r1, [sp, #12]
 8002bc0:	1a5b      	subs	r3, r3, r1
 8002bc2:	42ab      	cmp	r3, r5
 8002bc4:	dcf2      	bgt.n	8002bac <_printf_i+0x220>
 8002bc6:	e7eb      	b.n	8002ba0 <_printf_i+0x214>
 8002bc8:	2500      	movs	r5, #0
 8002bca:	f104 0619 	add.w	r6, r4, #25
 8002bce:	e7f5      	b.n	8002bbc <_printf_i+0x230>
 8002bd0:	080030d3 	.word	0x080030d3
 8002bd4:	080030e4 	.word	0x080030e4

08002bd8 <memchr>:
 8002bd8:	4603      	mov	r3, r0
 8002bda:	b510      	push	{r4, lr}
 8002bdc:	b2c9      	uxtb	r1, r1
 8002bde:	4402      	add	r2, r0
 8002be0:	4293      	cmp	r3, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	d101      	bne.n	8002bea <memchr+0x12>
 8002be6:	2000      	movs	r0, #0
 8002be8:	e003      	b.n	8002bf2 <memchr+0x1a>
 8002bea:	7804      	ldrb	r4, [r0, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	428c      	cmp	r4, r1
 8002bf0:	d1f6      	bne.n	8002be0 <memchr+0x8>
 8002bf2:	bd10      	pop	{r4, pc}

08002bf4 <memcpy>:
 8002bf4:	440a      	add	r2, r1
 8002bf6:	4291      	cmp	r1, r2
 8002bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bfc:	d100      	bne.n	8002c00 <memcpy+0xc>
 8002bfe:	4770      	bx	lr
 8002c00:	b510      	push	{r4, lr}
 8002c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c06:	4291      	cmp	r1, r2
 8002c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c0c:	d1f9      	bne.n	8002c02 <memcpy+0xe>
 8002c0e:	bd10      	pop	{r4, pc}

08002c10 <memmove>:
 8002c10:	4288      	cmp	r0, r1
 8002c12:	b510      	push	{r4, lr}
 8002c14:	eb01 0402 	add.w	r4, r1, r2
 8002c18:	d902      	bls.n	8002c20 <memmove+0x10>
 8002c1a:	4284      	cmp	r4, r0
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	d807      	bhi.n	8002c30 <memmove+0x20>
 8002c20:	1e43      	subs	r3, r0, #1
 8002c22:	42a1      	cmp	r1, r4
 8002c24:	d008      	beq.n	8002c38 <memmove+0x28>
 8002c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c2e:	e7f8      	b.n	8002c22 <memmove+0x12>
 8002c30:	4601      	mov	r1, r0
 8002c32:	4402      	add	r2, r0
 8002c34:	428a      	cmp	r2, r1
 8002c36:	d100      	bne.n	8002c3a <memmove+0x2a>
 8002c38:	bd10      	pop	{r4, pc}
 8002c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c42:	e7f7      	b.n	8002c34 <memmove+0x24>

08002c44 <_free_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4605      	mov	r5, r0
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	d040      	beq.n	8002cce <_free_r+0x8a>
 8002c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c50:	1f0c      	subs	r4, r1, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bfb8      	it	lt
 8002c56:	18e4      	addlt	r4, r4, r3
 8002c58:	f000 f910 	bl	8002e7c <__malloc_lock>
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <_free_r+0x8c>)
 8002c5e:	6813      	ldr	r3, [r2, #0]
 8002c60:	b933      	cbnz	r3, 8002c70 <_free_r+0x2c>
 8002c62:	6063      	str	r3, [r4, #4]
 8002c64:	6014      	str	r4, [r2, #0]
 8002c66:	4628      	mov	r0, r5
 8002c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c6c:	f000 b90c 	b.w	8002e88 <__malloc_unlock>
 8002c70:	42a3      	cmp	r3, r4
 8002c72:	d908      	bls.n	8002c86 <_free_r+0x42>
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	1821      	adds	r1, r4, r0
 8002c78:	428b      	cmp	r3, r1
 8002c7a:	bf01      	itttt	eq
 8002c7c:	6819      	ldreq	r1, [r3, #0]
 8002c7e:	685b      	ldreq	r3, [r3, #4]
 8002c80:	1809      	addeq	r1, r1, r0
 8002c82:	6021      	streq	r1, [r4, #0]
 8002c84:	e7ed      	b.n	8002c62 <_free_r+0x1e>
 8002c86:	461a      	mov	r2, r3
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b10b      	cbz	r3, 8002c90 <_free_r+0x4c>
 8002c8c:	42a3      	cmp	r3, r4
 8002c8e:	d9fa      	bls.n	8002c86 <_free_r+0x42>
 8002c90:	6811      	ldr	r1, [r2, #0]
 8002c92:	1850      	adds	r0, r2, r1
 8002c94:	42a0      	cmp	r0, r4
 8002c96:	d10b      	bne.n	8002cb0 <_free_r+0x6c>
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	4401      	add	r1, r0
 8002c9c:	1850      	adds	r0, r2, r1
 8002c9e:	4283      	cmp	r3, r0
 8002ca0:	6011      	str	r1, [r2, #0]
 8002ca2:	d1e0      	bne.n	8002c66 <_free_r+0x22>
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4401      	add	r1, r0
 8002caa:	6011      	str	r1, [r2, #0]
 8002cac:	6053      	str	r3, [r2, #4]
 8002cae:	e7da      	b.n	8002c66 <_free_r+0x22>
 8002cb0:	d902      	bls.n	8002cb8 <_free_r+0x74>
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	602b      	str	r3, [r5, #0]
 8002cb6:	e7d6      	b.n	8002c66 <_free_r+0x22>
 8002cb8:	6820      	ldr	r0, [r4, #0]
 8002cba:	1821      	adds	r1, r4, r0
 8002cbc:	428b      	cmp	r3, r1
 8002cbe:	bf01      	itttt	eq
 8002cc0:	6819      	ldreq	r1, [r3, #0]
 8002cc2:	685b      	ldreq	r3, [r3, #4]
 8002cc4:	1809      	addeq	r1, r1, r0
 8002cc6:	6021      	streq	r1, [r4, #0]
 8002cc8:	6063      	str	r3, [r4, #4]
 8002cca:	6054      	str	r4, [r2, #4]
 8002ccc:	e7cb      	b.n	8002c66 <_free_r+0x22>
 8002cce:	bd38      	pop	{r3, r4, r5, pc}
 8002cd0:	20000104 	.word	0x20000104

08002cd4 <sbrk_aligned>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	4e0e      	ldr	r6, [pc, #56]	; (8002d10 <sbrk_aligned+0x3c>)
 8002cd8:	460c      	mov	r4, r1
 8002cda:	6831      	ldr	r1, [r6, #0]
 8002cdc:	4605      	mov	r5, r0
 8002cde:	b911      	cbnz	r1, 8002ce6 <sbrk_aligned+0x12>
 8002ce0:	f000 f8bc 	bl	8002e5c <_sbrk_r>
 8002ce4:	6030      	str	r0, [r6, #0]
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f000 f8b7 	bl	8002e5c <_sbrk_r>
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	d00a      	beq.n	8002d08 <sbrk_aligned+0x34>
 8002cf2:	1cc4      	adds	r4, r0, #3
 8002cf4:	f024 0403 	bic.w	r4, r4, #3
 8002cf8:	42a0      	cmp	r0, r4
 8002cfa:	d007      	beq.n	8002d0c <sbrk_aligned+0x38>
 8002cfc:	1a21      	subs	r1, r4, r0
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f000 f8ac 	bl	8002e5c <_sbrk_r>
 8002d04:	3001      	adds	r0, #1
 8002d06:	d101      	bne.n	8002d0c <sbrk_aligned+0x38>
 8002d08:	f04f 34ff 	mov.w	r4, #4294967295
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	20000108 	.word	0x20000108

08002d14 <_malloc_r>:
 8002d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d18:	1ccd      	adds	r5, r1, #3
 8002d1a:	f025 0503 	bic.w	r5, r5, #3
 8002d1e:	3508      	adds	r5, #8
 8002d20:	2d0c      	cmp	r5, #12
 8002d22:	bf38      	it	cc
 8002d24:	250c      	movcc	r5, #12
 8002d26:	2d00      	cmp	r5, #0
 8002d28:	4607      	mov	r7, r0
 8002d2a:	db01      	blt.n	8002d30 <_malloc_r+0x1c>
 8002d2c:	42a9      	cmp	r1, r5
 8002d2e:	d905      	bls.n	8002d3c <_malloc_r+0x28>
 8002d30:	230c      	movs	r3, #12
 8002d32:	2600      	movs	r6, #0
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4630      	mov	r0, r6
 8002d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d3c:	4e2e      	ldr	r6, [pc, #184]	; (8002df8 <_malloc_r+0xe4>)
 8002d3e:	f000 f89d 	bl	8002e7c <__malloc_lock>
 8002d42:	6833      	ldr	r3, [r6, #0]
 8002d44:	461c      	mov	r4, r3
 8002d46:	bb34      	cbnz	r4, 8002d96 <_malloc_r+0x82>
 8002d48:	4629      	mov	r1, r5
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	f7ff ffc2 	bl	8002cd4 <sbrk_aligned>
 8002d50:	1c43      	adds	r3, r0, #1
 8002d52:	4604      	mov	r4, r0
 8002d54:	d14d      	bne.n	8002df2 <_malloc_r+0xde>
 8002d56:	6834      	ldr	r4, [r6, #0]
 8002d58:	4626      	mov	r6, r4
 8002d5a:	2e00      	cmp	r6, #0
 8002d5c:	d140      	bne.n	8002de0 <_malloc_r+0xcc>
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	4631      	mov	r1, r6
 8002d62:	4638      	mov	r0, r7
 8002d64:	eb04 0803 	add.w	r8, r4, r3
 8002d68:	f000 f878 	bl	8002e5c <_sbrk_r>
 8002d6c:	4580      	cmp	r8, r0
 8002d6e:	d13a      	bne.n	8002de6 <_malloc_r+0xd2>
 8002d70:	6821      	ldr	r1, [r4, #0]
 8002d72:	3503      	adds	r5, #3
 8002d74:	1a6d      	subs	r5, r5, r1
 8002d76:	f025 0503 	bic.w	r5, r5, #3
 8002d7a:	3508      	adds	r5, #8
 8002d7c:	2d0c      	cmp	r5, #12
 8002d7e:	bf38      	it	cc
 8002d80:	250c      	movcc	r5, #12
 8002d82:	4638      	mov	r0, r7
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7ff ffa5 	bl	8002cd4 <sbrk_aligned>
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	d02b      	beq.n	8002de6 <_malloc_r+0xd2>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	442b      	add	r3, r5
 8002d92:	6023      	str	r3, [r4, #0]
 8002d94:	e00e      	b.n	8002db4 <_malloc_r+0xa0>
 8002d96:	6822      	ldr	r2, [r4, #0]
 8002d98:	1b52      	subs	r2, r2, r5
 8002d9a:	d41e      	bmi.n	8002dda <_malloc_r+0xc6>
 8002d9c:	2a0b      	cmp	r2, #11
 8002d9e:	d916      	bls.n	8002dce <_malloc_r+0xba>
 8002da0:	1961      	adds	r1, r4, r5
 8002da2:	42a3      	cmp	r3, r4
 8002da4:	6025      	str	r5, [r4, #0]
 8002da6:	bf18      	it	ne
 8002da8:	6059      	strne	r1, [r3, #4]
 8002daa:	6863      	ldr	r3, [r4, #4]
 8002dac:	bf08      	it	eq
 8002dae:	6031      	streq	r1, [r6, #0]
 8002db0:	5162      	str	r2, [r4, r5]
 8002db2:	604b      	str	r3, [r1, #4]
 8002db4:	4638      	mov	r0, r7
 8002db6:	f104 060b 	add.w	r6, r4, #11
 8002dba:	f000 f865 	bl	8002e88 <__malloc_unlock>
 8002dbe:	f026 0607 	bic.w	r6, r6, #7
 8002dc2:	1d23      	adds	r3, r4, #4
 8002dc4:	1af2      	subs	r2, r6, r3
 8002dc6:	d0b6      	beq.n	8002d36 <_malloc_r+0x22>
 8002dc8:	1b9b      	subs	r3, r3, r6
 8002dca:	50a3      	str	r3, [r4, r2]
 8002dcc:	e7b3      	b.n	8002d36 <_malloc_r+0x22>
 8002dce:	6862      	ldr	r2, [r4, #4]
 8002dd0:	42a3      	cmp	r3, r4
 8002dd2:	bf0c      	ite	eq
 8002dd4:	6032      	streq	r2, [r6, #0]
 8002dd6:	605a      	strne	r2, [r3, #4]
 8002dd8:	e7ec      	b.n	8002db4 <_malloc_r+0xa0>
 8002dda:	4623      	mov	r3, r4
 8002ddc:	6864      	ldr	r4, [r4, #4]
 8002dde:	e7b2      	b.n	8002d46 <_malloc_r+0x32>
 8002de0:	4634      	mov	r4, r6
 8002de2:	6876      	ldr	r6, [r6, #4]
 8002de4:	e7b9      	b.n	8002d5a <_malloc_r+0x46>
 8002de6:	230c      	movs	r3, #12
 8002de8:	4638      	mov	r0, r7
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	f000 f84c 	bl	8002e88 <__malloc_unlock>
 8002df0:	e7a1      	b.n	8002d36 <_malloc_r+0x22>
 8002df2:	6025      	str	r5, [r4, #0]
 8002df4:	e7de      	b.n	8002db4 <_malloc_r+0xa0>
 8002df6:	bf00      	nop
 8002df8:	20000104 	.word	0x20000104

08002dfc <_realloc_r>:
 8002dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e00:	4680      	mov	r8, r0
 8002e02:	4614      	mov	r4, r2
 8002e04:	460e      	mov	r6, r1
 8002e06:	b921      	cbnz	r1, 8002e12 <_realloc_r+0x16>
 8002e08:	4611      	mov	r1, r2
 8002e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e0e:	f7ff bf81 	b.w	8002d14 <_malloc_r>
 8002e12:	b92a      	cbnz	r2, 8002e20 <_realloc_r+0x24>
 8002e14:	f7ff ff16 	bl	8002c44 <_free_r>
 8002e18:	4625      	mov	r5, r4
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e20:	f000 f838 	bl	8002e94 <_malloc_usable_size_r>
 8002e24:	4284      	cmp	r4, r0
 8002e26:	4607      	mov	r7, r0
 8002e28:	d802      	bhi.n	8002e30 <_realloc_r+0x34>
 8002e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e2e:	d812      	bhi.n	8002e56 <_realloc_r+0x5a>
 8002e30:	4621      	mov	r1, r4
 8002e32:	4640      	mov	r0, r8
 8002e34:	f7ff ff6e 	bl	8002d14 <_malloc_r>
 8002e38:	4605      	mov	r5, r0
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d0ed      	beq.n	8002e1a <_realloc_r+0x1e>
 8002e3e:	42bc      	cmp	r4, r7
 8002e40:	4622      	mov	r2, r4
 8002e42:	4631      	mov	r1, r6
 8002e44:	bf28      	it	cs
 8002e46:	463a      	movcs	r2, r7
 8002e48:	f7ff fed4 	bl	8002bf4 <memcpy>
 8002e4c:	4631      	mov	r1, r6
 8002e4e:	4640      	mov	r0, r8
 8002e50:	f7ff fef8 	bl	8002c44 <_free_r>
 8002e54:	e7e1      	b.n	8002e1a <_realloc_r+0x1e>
 8002e56:	4635      	mov	r5, r6
 8002e58:	e7df      	b.n	8002e1a <_realloc_r+0x1e>
	...

08002e5c <_sbrk_r>:
 8002e5c:	b538      	push	{r3, r4, r5, lr}
 8002e5e:	2300      	movs	r3, #0
 8002e60:	4d05      	ldr	r5, [pc, #20]	; (8002e78 <_sbrk_r+0x1c>)
 8002e62:	4604      	mov	r4, r0
 8002e64:	4608      	mov	r0, r1
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	f7fd fc9e 	bl	80007a8 <_sbrk>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	d102      	bne.n	8002e76 <_sbrk_r+0x1a>
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	b103      	cbz	r3, 8002e76 <_sbrk_r+0x1a>
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
 8002e78:	2000010c 	.word	0x2000010c

08002e7c <__malloc_lock>:
 8002e7c:	4801      	ldr	r0, [pc, #4]	; (8002e84 <__malloc_lock+0x8>)
 8002e7e:	f000 b811 	b.w	8002ea4 <__retarget_lock_acquire_recursive>
 8002e82:	bf00      	nop
 8002e84:	20000110 	.word	0x20000110

08002e88 <__malloc_unlock>:
 8002e88:	4801      	ldr	r0, [pc, #4]	; (8002e90 <__malloc_unlock+0x8>)
 8002e8a:	f000 b80c 	b.w	8002ea6 <__retarget_lock_release_recursive>
 8002e8e:	bf00      	nop
 8002e90:	20000110 	.word	0x20000110

08002e94 <_malloc_usable_size_r>:
 8002e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e98:	1f18      	subs	r0, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bfbc      	itt	lt
 8002e9e:	580b      	ldrlt	r3, [r1, r0]
 8002ea0:	18c0      	addlt	r0, r0, r3
 8002ea2:	4770      	bx	lr

08002ea4 <__retarget_lock_acquire_recursive>:
 8002ea4:	4770      	bx	lr

08002ea6 <__retarget_lock_release_recursive>:
 8002ea6:	4770      	bx	lr

08002ea8 <_init>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr

08002eb4 <_fini>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	bf00      	nop
 8002eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eba:	bc08      	pop	{r3}
 8002ebc:	469e      	mov	lr, r3
 8002ebe:	4770      	bx	lr
