
f103_can_hartbit_wheels_one.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e4c  08004e4c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e4c  08004e4c  00005e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e54  08004e54  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e54  08004e54  00005e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e58  08004e58  00005e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004e5c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b54  2000005c  08004eb8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  08004eb8  00006bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe9b  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ec  00000000  00000000  00015f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00018910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1e  00000000  00000000  00019768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001914c  00000000  00000000  0001a286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116b9  00000000  00000000  000333d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3cc  00000000  00000000  00044a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1e57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004018  00000000  00000000  000d1e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d5eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004694 	.word	0x08004694

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004694 	.word	0x08004694

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LogMessage>:
#define NODE_ID 0x01  // <-- Вынесено в константу

static COB_State current_state = COB_STATE_INIT;


void LogMessage(const char *msg) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b0a2      	sub	sp, #136	@ 0x88
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "%s\r\n", msg);
 8000164:	f107 0008 	add.w	r0, r7, #8
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4a0b      	ldr	r2, [pc, #44]	@ (8000198 <LogMessage+0x3c>)
 800016c:	2180      	movs	r1, #128	@ 0x80
 800016e:	f003 fdcd 	bl	8003d0c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000172:	f107 0308 	add.w	r3, r7, #8
 8000176:	4618      	mov	r0, r3
 8000178:	f7ff ffe8 	bl	800014c <strlen>
 800017c:	4603      	mov	r3, r0
 800017e:	b29a      	uxth	r2, r3
 8000180:	f107 0108 	add.w	r1, r7, #8
 8000184:	f04f 33ff 	mov.w	r3, #4294967295
 8000188:	4804      	ldr	r0, [pc, #16]	@ (800019c <LogMessage+0x40>)
 800018a:	f003 fbeb 	bl	8003964 <HAL_UART_Transmit>
}
 800018e:	bf00      	nop
 8000190:	3788      	adds	r7, #136	@ 0x88
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	080046ac 	.word	0x080046ac
 800019c:	20000a18 	.word	0x20000a18

080001a0 <COB_ProcessStateMachine>:
        LogMessage(msg);
        strncpy(last_msg, msg, sizeof(last_msg));
    }
}

void COB_ProcessStateMachine(void) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
    switch (current_state) {
 80001a4:	4b17      	ldr	r3, [pc, #92]	@ (8000204 <COB_ProcessStateMachine+0x64>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b06      	cmp	r3, #6
 80001aa:	d827      	bhi.n	80001fc <COB_ProcessStateMachine+0x5c>
 80001ac:	a201      	add	r2, pc, #4	@ (adr r2, 80001b4 <COB_ProcessStateMachine+0x14>)
 80001ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b2:	bf00      	nop
 80001b4:	080001d1 	.word	0x080001d1
 80001b8:	080001fd 	.word	0x080001fd
 80001bc:	080001df 	.word	0x080001df
 80001c0:	080001fd 	.word	0x080001fd
 80001c4:	080001e7 	.word	0x080001e7
 80001c8:	080001fd 	.word	0x080001fd
 80001cc:	080001f5 	.word	0x080001f5
        case COB_STATE_INIT:
            current_state = COB_STATE_NMT_SENT;
 80001d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000204 <COB_ProcessStateMachine+0x64>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	701a      	strb	r2, [r3, #0]
            LogMessage("[COB] State: INIT → NMT_SENT");
 80001d6:	480c      	ldr	r0, [pc, #48]	@ (8000208 <COB_ProcessStateMachine+0x68>)
 80001d8:	f7ff ffc0 	bl	800015c <LogMessage>
            break;
 80001dc:	e00f      	b.n	80001fe <COB_ProcessStateMachine+0x5e>

        case COB_STATE_NMT_CONFIRMED:
            LogMessage("[COB] Waiting for external SDO Init (main.c)");
 80001de:	480b      	ldr	r0, [pc, #44]	@ (800020c <COB_ProcessStateMachine+0x6c>)
 80001e0:	f7ff ffbc 	bl	800015c <LogMessage>
            break;
 80001e4:	e00b      	b.n	80001fe <COB_ProcessStateMachine+0x5e>

        case COB_STATE_SDO_CONFIRMED:
            current_state = COB_STATE_PDO_ACTIVE;
 80001e6:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <COB_ProcessStateMachine+0x64>)
 80001e8:	2205      	movs	r2, #5
 80001ea:	701a      	strb	r2, [r3, #0]
            LogMessage("[COB] State: SDO_CONFIRMED → PDO_ACTIVE");
 80001ec:	4808      	ldr	r0, [pc, #32]	@ (8000210 <COB_ProcessStateMachine+0x70>)
 80001ee:	f7ff ffb5 	bl	800015c <LogMessage>
            break;
 80001f2:	e004      	b.n	80001fe <COB_ProcessStateMachine+0x5e>

        case COB_STATE_ERROR:
            LogMessage("[COB] State: ERROR");
 80001f4:	4807      	ldr	r0, [pc, #28]	@ (8000214 <COB_ProcessStateMachine+0x74>)
 80001f6:	f7ff ffb1 	bl	800015c <LogMessage>
            break;
 80001fa:	e000      	b.n	80001fe <COB_ProcessStateMachine+0x5e>

        default:
            break;
 80001fc:	bf00      	nop
    }
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000078 	.word	0x20000078
 8000208:	080046b4 	.word	0x080046b4
 800020c:	080046d4 	.word	0x080046d4
 8000210:	08004704 	.word	0x08004704
 8000214:	08004730 	.word	0x08004730

08000218 <COB_Dispatch>:

void COB_Dispatch(CAN_RxHeaderTypeDef *header, uint8_t *data) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b094      	sub	sp, #80	@ 0x50
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    uint16_t cob_id = header->StdId;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    char raw[64];
    snprintf(raw, sizeof(raw), "COB_Dispatch: ID=0x%03X", cob_id);
 800022a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800022e:	f107 000c 	add.w	r0, r7, #12
 8000232:	4a3e      	ldr	r2, [pc, #248]	@ (800032c <COB_Dispatch+0x114>)
 8000234:	2140      	movs	r1, #64	@ 0x40
 8000236:	f003 fd69 	bl	8003d0c <sniprintf>
    LogMessage(raw);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff8c 	bl	800015c <LogMessage>

    if (cob_id == 0x080) {
 8000244:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000248:	2b80      	cmp	r3, #128	@ 0x80
 800024a:	d103      	bne.n	8000254 <COB_Dispatch+0x3c>
        LogMessage("SYNC frame received");
 800024c:	4838      	ldr	r0, [pc, #224]	@ (8000330 <COB_Dispatch+0x118>)
 800024e:	f7ff ff85 	bl	800015c <LogMessage>
 8000252:	e04f      	b.n	80002f4 <COB_Dispatch+0xdc>
    } else if (cob_id >= 0x180 && cob_id <= 0x4FF) {
 8000254:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000258:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800025c:	d30e      	bcc.n	800027c <COB_Dispatch+0x64>
 800025e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000262:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000266:	d209      	bcs.n	800027c <COB_Dispatch+0x64>
        CO_PDO_Handle(cob_id, data, header->DLC);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	691b      	ldr	r3, [r3, #16]
 800026c:	b2da      	uxtb	r2, r3
 800026e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000272:	6839      	ldr	r1, [r7, #0]
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f9b3 	bl	80005e0 <CO_PDO_Handle>
 800027a:	e03b      	b.n	80002f4 <COB_Dispatch+0xdc>
    } else if (cob_id >= 0x580 && cob_id <= 0x5FF) {
 800027c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000280:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8000284:	d31f      	bcc.n	80002c6 <COB_Dispatch+0xae>
 8000286:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800028a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800028e:	d21a      	bcs.n	80002c6 <COB_Dispatch+0xae>
        LogMessage("TxSDO received");
 8000290:	4828      	ldr	r0, [pc, #160]	@ (8000334 <COB_Dispatch+0x11c>)
 8000292:	f7ff ff63 	bl	800015c <LogMessage>
        CO_SDO_HandleResponse(cob_id & 0x7F, data, header->DLC);
 8000296:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002a0:	b2d8      	uxtb	r0, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	461a      	mov	r2, r3
 80002aa:	6839      	ldr	r1, [r7, #0]
 80002ac:	f000 fad6 	bl	800085c <CO_SDO_HandleResponse>

        if (current_state == COB_STATE_SDO_SENT) {
 80002b0:	4b21      	ldr	r3, [pc, #132]	@ (8000338 <COB_Dispatch+0x120>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	d11d      	bne.n	80002f4 <COB_Dispatch+0xdc>
            current_state = COB_STATE_SDO_CONFIRMED;
 80002b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000338 <COB_Dispatch+0x120>)
 80002ba:	2204      	movs	r2, #4
 80002bc:	701a      	strb	r2, [r3, #0]
            LogMessage("[COB] SDO confirmed → SDO_CONFIRMED");
 80002be:	481f      	ldr	r0, [pc, #124]	@ (800033c <COB_Dispatch+0x124>)
 80002c0:	f7ff ff4c 	bl	800015c <LogMessage>
        if (current_state == COB_STATE_SDO_SENT) {
 80002c4:	e016      	b.n	80002f4 <COB_Dispatch+0xdc>
        }
    } else if (cob_id >= 0x700 && cob_id <= 0x7FF) {
 80002c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80002ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80002ce:	d30e      	bcc.n	80002ee <COB_Dispatch+0xd6>
 80002d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80002d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80002d8:	d209      	bcs.n	80002ee <COB_Dispatch+0xd6>
        CO_NMT_HandleMessage(cob_id, data, header->DLC);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	691b      	ldr	r3, [r3, #16]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80002e4:	6839      	ldr	r1, [r7, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f8d2 	bl	8000490 <CO_NMT_HandleMessage>
 80002ec:	e002      	b.n	80002f4 <COB_Dispatch+0xdc>
    } else {
        LogMessage("Unknown COB-ID");
 80002ee:	4814      	ldr	r0, [pc, #80]	@ (8000340 <COB_Dispatch+0x128>)
 80002f0:	f7ff ff34 	bl	800015c <LogMessage>
    }

    // ⚠ УБИРАЕМ автоматическую инициализацию SDO Init Phase (теперь только из main.c)
    // оставляем только управление SYNC если нужно
    if (current_state == COB_STATE_SDO_CONFIRMED && !sync_enabled) {
 80002f4:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <COB_Dispatch+0x120>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b04      	cmp	r3, #4
 80002fa:	d112      	bne.n	8000322 <COB_Dispatch+0x10a>
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <COB_Dispatch+0x12c>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d10e      	bne.n	8000322 <COB_Dispatch+0x10a>
        LogMessage("[COB] Enabling SYNC after SDO Init...");
 8000304:	4810      	ldr	r0, [pc, #64]	@ (8000348 <COB_Dispatch+0x130>)
 8000306:	f7ff ff29 	bl	800015c <LogMessage>
        CO_SYNC_SetEnabled(1);
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fc1e 	bl	8000b4c <CO_SYNC_SetEnabled>
        sync_enabled = 1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <COB_Dispatch+0x12c>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
        current_state = COB_STATE_PDO_ACTIVE;
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <COB_Dispatch+0x120>)
 8000318:	2205      	movs	r2, #5
 800031a:	701a      	strb	r2, [r3, #0]
        LogMessage("[COB] System is now OPERATIONAL");
 800031c:	480b      	ldr	r0, [pc, #44]	@ (800034c <COB_Dispatch+0x134>)
 800031e:	f7ff ff1d 	bl	800015c <LogMessage>
    }
}
 8000322:	bf00      	nop
 8000324:	3750      	adds	r7, #80	@ 0x50
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	08004744 	.word	0x08004744
 8000330:	0800475c 	.word	0x0800475c
 8000334:	08004770 	.word	0x08004770
 8000338:	20000078 	.word	0x20000078
 800033c:	08004780 	.word	0x08004780
 8000340:	080047a8 	.word	0x080047a8
 8000344:	200009a4 	.word	0x200009a4
 8000348:	080047b8 	.word	0x080047b8
 800034c:	080047e0 	.word	0x080047e0

08000350 <CAN_SendActivationCommand>:
// --- Флаги состояния ---
volatile uint8_t activation_confirmed = 0;
volatile uint8_t canopen_confirmation_received = 0;

// --- Отправка команды активации  ---
void CAN_SendActivationCommand(CAN_HandleTypeDef *hcan, uint8_t node_id) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b08c      	sub	sp, #48	@ 0x30
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader = {0};
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
 800036c:	615a      	str	r2, [r3, #20]
    uint8_t data[2] = {0x10, 0x10};
 800036e:	f241 0310 	movw	r3, #4112	@ 0x1010
 8000372:	823b      	strh	r3, [r7, #16]
    uint32_t TxMailbox;

    TxHeader.StdId = 0x000 + node_id;
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	617b      	str	r3, [r7, #20]
    TxHeader.DLC = 2;
 8000378:	2302      	movs	r3, #2
 800037a:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.RTR = CAN_RTR_DATA;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
    TxHeader.IDE = CAN_ID_STD;
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox) != HAL_OK) {
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	f107 0210 	add.w	r2, r7, #16
 800038c:	f107 0114 	add.w	r1, r7, #20
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f001 fb85 	bl	8001aa0 <HAL_CAN_AddTxMessage>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <CAN_SendActivationCommand+0x54>
        LogMessage("Activation command send failed");
 800039c:	4812      	ldr	r0, [pc, #72]	@ (80003e8 <CAN_SendActivationCommand+0x98>)
 800039e:	f7ff fedd 	bl	800015c <LogMessage>
        return;
 80003a2:	e01e      	b.n	80003e2 <CAN_SendActivationCommand+0x92>
    }

    LogMessage("Activation command 0x10 0x10 sent");
 80003a4:	4811      	ldr	r0, [pc, #68]	@ (80003ec <CAN_SendActivationCommand+0x9c>)
 80003a6:	f7ff fed9 	bl	800015c <LogMessage>

    // Ожидание ответа [AA BB] от колеса
    uint32_t startTick = HAL_GetTick();
 80003aa:	f001 f943 	bl	8001634 <HAL_GetTick>
 80003ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
    while (!activation_confirmed) {
 80003b0:	e00f      	b.n	80003d2 <CAN_SendActivationCommand+0x82>
        if (HAL_GetTick() - startTick > 3000) {
 80003b2:	f001 f93f 	bl	8001634 <HAL_GetTick>
 80003b6:	4602      	mov	r2, r0
 80003b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003ba:	1ad3      	subs	r3, r2, r3
 80003bc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d903      	bls.n	80003cc <CAN_SendActivationCommand+0x7c>
            LogMessage("Timeout waiting for activation confirmation");
 80003c4:	480a      	ldr	r0, [pc, #40]	@ (80003f0 <CAN_SendActivationCommand+0xa0>)
 80003c6:	f7ff fec9 	bl	800015c <LogMessage>
            return;
 80003ca:	e00a      	b.n	80003e2 <CAN_SendActivationCommand+0x92>
        }
        HAL_Delay(10);
 80003cc:	200a      	movs	r0, #10
 80003ce:	f001 f93b 	bl	8001648 <HAL_Delay>
    while (!activation_confirmed) {
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <CAN_SendActivationCommand+0xa4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0ea      	beq.n	80003b2 <CAN_SendActivationCommand+0x62>
    }

    LogMessage("Activation confirmed by wheel (AA BB)");
 80003dc:	4806      	ldr	r0, [pc, #24]	@ (80003f8 <CAN_SendActivationCommand+0xa8>)
 80003de:	f7ff febd 	bl	800015c <LogMessage>
}
 80003e2:	3730      	adds	r7, #48	@ 0x30
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	08004868 	.word	0x08004868
 80003ec:	08004888 	.word	0x08004888
 80003f0:	080048ac 	.word	0x080048ac
 80003f4:	20000079 	.word	0x20000079
 80003f8:	080048d8 	.word	0x080048d8

080003fc <CO_NMT_Send>:

// --- Отправка NMT команды ---
HAL_StatusTypeDef CO_NMT_Send(CAN_HandleTypeDef *hcan, uint8_t command, uint8_t node_id) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b09c      	sub	sp, #112	@ 0x70
 8000400:	af02      	add	r7, sp, #8
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	70fb      	strb	r3, [r7, #3]
 8000408:	4613      	mov	r3, r2
 800040a:	70bb      	strb	r3, [r7, #2]
    CAN_TxHeaderTypeDef TxHeader = {0};
 800040c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
 800041c:	615a      	str	r2, [r3, #20]
    uint8_t TxData[2] = {command, node_id};
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8000424:	78bb      	ldrb	r3, [r7, #2]
 8000426:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint32_t TxMailbox;

    TxHeader.StdId = 0x000;
 800042a:	2300      	movs	r3, #0
 800042c:	653b      	str	r3, [r7, #80]	@ 0x50
    TxHeader.DLC = 2;
 800042e:	2302      	movs	r3, #2
 8000430:	663b      	str	r3, [r7, #96]	@ 0x60
    TxHeader.RTR = CAN_RTR_DATA;
 8000432:	2300      	movs	r3, #0
 8000434:	65fb      	str	r3, [r7, #92]	@ 0x5c
    TxHeader.IDE = CAN_ID_STD;
 8000436:	2300      	movs	r3, #0
 8000438:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 800043a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800043e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000442:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f001 fb2a 	bl	8001aa0 <HAL_CAN_AddTxMessage>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d112      	bne.n	8000478 <CO_NMT_Send+0x7c>
        char debugMsg[64];
        snprintf(debugMsg, sizeof(debugMsg), "NMT command 0x%02X sent to Node %u, Mailbox=%lu", command, node_id, TxMailbox);
 8000452:	78f9      	ldrb	r1, [r7, #3]
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000458:	f107 0008 	add.w	r0, r7, #8
 800045c:	9201      	str	r2, [sp, #4]
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	460b      	mov	r3, r1
 8000462:	4a09      	ldr	r2, [pc, #36]	@ (8000488 <CO_NMT_Send+0x8c>)
 8000464:	2140      	movs	r1, #64	@ 0x40
 8000466:	f003 fc51 	bl	8003d0c <sniprintf>
        LogMessage(debugMsg);
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff fe74 	bl	800015c <LogMessage>
        return HAL_OK;
 8000474:	2300      	movs	r3, #0
 8000476:	e003      	b.n	8000480 <CO_NMT_Send+0x84>
    } else {
        LogMessage("NMT send failed");
 8000478:	4804      	ldr	r0, [pc, #16]	@ (800048c <CO_NMT_Send+0x90>)
 800047a:	f7ff fe6f 	bl	800015c <LogMessage>
        return HAL_ERROR;
 800047e:	2301      	movs	r3, #1
    }
}
 8000480:	4618      	mov	r0, r3
 8000482:	3768      	adds	r7, #104	@ 0x68
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	08004900 	.word	0x08004900
 800048c:	08004930 	.word	0x08004930

08000490 <CO_NMT_HandleMessage>:

// --- Обработка сообщений, относящихся к NMT (heartbeat, ответы на активацию,  подтверждение)
void CO_NMT_HandleMessage(uint16_t cob_id, uint8_t *data, uint8_t dlc) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b096      	sub	sp, #88	@ 0x58
 8000494:	af02      	add	r7, sp, #8
 8000496:	4603      	mov	r3, r0
 8000498:	6039      	str	r1, [r7, #0]
 800049a:	80fb      	strh	r3, [r7, #6]
 800049c:	4613      	mov	r3, r2
 800049e:	717b      	strb	r3, [r7, #5]
    if (dlc == 2 && data[0] == 0xAA && data[1] == 0xBB) {
 80004a0:	797b      	ldrb	r3, [r7, #5]
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d10f      	bne.n	80004c6 <CO_NMT_HandleMessage+0x36>
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2baa      	cmp	r3, #170	@ 0xaa
 80004ac:	d10b      	bne.n	80004c6 <CO_NMT_HandleMessage+0x36>
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	3301      	adds	r3, #1
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2bbb      	cmp	r3, #187	@ 0xbb
 80004b6:	d106      	bne.n	80004c6 <CO_NMT_HandleMessage+0x36>
        LogMessage("Activation response received: [AA, BB]");
 80004b8:	481d      	ldr	r0, [pc, #116]	@ (8000530 <CO_NMT_HandleMessage+0xa0>)
 80004ba:	f7ff fe4f 	bl	800015c <LogMessage>
        activation_confirmed = 1;
 80004be:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <CO_NMT_HandleMessage+0xa4>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	e030      	b.n	8000528 <CO_NMT_HandleMessage+0x98>
    } else if (dlc == 1 && data[0] == 0x7F) {
 80004c6:	797b      	ldrb	r3, [r7, #5]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d10a      	bne.n	80004e2 <CO_NMT_HandleMessage+0x52>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80004d2:	d106      	bne.n	80004e2 <CO_NMT_HandleMessage+0x52>
        LogMessage("CANopen confirmation received: [7F]");
 80004d4:	4818      	ldr	r0, [pc, #96]	@ (8000538 <CO_NMT_HandleMessage+0xa8>)
 80004d6:	f7ff fe41 	bl	800015c <LogMessage>
        canopen_confirmation_received = 1;
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <CO_NMT_HandleMessage+0xac>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]
 80004e0:	e022      	b.n	8000528 <CO_NMT_HandleMessage+0x98>
    } else if (dlc >= 1 && cob_id >= 0x700 && cob_id <= 0x7FF) {
 80004e2:	797b      	ldrb	r3, [r7, #5]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d01f      	beq.n	8000528 <CO_NMT_HandleMessage+0x98>
 80004e8:	88fb      	ldrh	r3, [r7, #6]
 80004ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80004ee:	d31b      	bcc.n	8000528 <CO_NMT_HandleMessage+0x98>
 80004f0:	88fb      	ldrh	r3, [r7, #6]
 80004f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80004f6:	d217      	bcs.n	8000528 <CO_NMT_HandleMessage+0x98>
        char msg[64];
        uint8_t node_id = cob_id & 0x7F;
 80004f8:	88fb      	ldrh	r3, [r7, #6]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000500:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        snprintf(msg, sizeof(msg), "Heartbeat from Node %u: state 0x%02X", node_id, data[0]);
 8000504:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	f107 000c 	add.w	r0, r7, #12
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	4613      	mov	r3, r2
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <CO_NMT_HandleMessage+0xb0>)
 8000516:	2140      	movs	r1, #64	@ 0x40
 8000518:	f003 fbf8 	bl	8003d0c <sniprintf>
        LogMessage(msg);
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff fe1b 	bl	800015c <LogMessage>
    }
}
 8000526:	e7ff      	b.n	8000528 <CO_NMT_HandleMessage+0x98>
 8000528:	bf00      	nop
 800052a:	3750      	adds	r7, #80	@ 0x50
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	08004940 	.word	0x08004940
 8000534:	20000079 	.word	0x20000079
 8000538:	08004968 	.word	0x08004968
 800053c:	2000007a 	.word	0x2000007a
 8000540:	0800498c 	.word	0x0800498c

08000544 <CO_NMT_ReleaseBrake>:
void CO_NMT_ReleaseBrake(CAN_HandleTypeDef *hcan, uint8_t node_id) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b09c      	sub	sp, #112	@ 0x70
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader = {0};
 8000550:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
 8000560:	615a      	str	r2, [r3, #20]
    uint8_t data[8] = {0x2F, 0x58, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00};
 8000562:	4a1b      	ldr	r2, [pc, #108]	@ (80005d0 <CO_NMT_ReleaseBrake+0x8c>)
 8000564:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t TxMailbox;

    TxHeader.StdId = 0x600 + node_id; // SDO для Node-ID
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000576:	65bb      	str	r3, [r7, #88]	@ 0x58
    TxHeader.DLC = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	66bb      	str	r3, [r7, #104]	@ 0x68
    TxHeader.RTR = CAN_RTR_DATA;
 800057c:	2300      	movs	r3, #0
 800057e:	667b      	str	r3, [r7, #100]	@ 0x64
    TxHeader.IDE = CAN_ID_STD;
 8000580:	2300      	movs	r3, #0
 8000582:	663b      	str	r3, [r7, #96]	@ 0x60

    char msg[64];
    snprintf(msg, sizeof(msg), "Sending brake release to node %u", node_id);
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	f107 000c 	add.w	r0, r7, #12
 800058a:	4a12      	ldr	r2, [pc, #72]	@ (80005d4 <CO_NMT_ReleaseBrake+0x90>)
 800058c:	2140      	movs	r1, #64	@ 0x40
 800058e:	f003 fbbd 	bl	8003d0c <sniprintf>
    LogMessage(msg);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fde0 	bl	800015c <LogMessage>

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox) != HAL_OK) {
 800059c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005a0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80005a4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f001 fa79 	bl	8001aa0 <HAL_CAN_AddTxMessage>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d003      	beq.n	80005bc <CO_NMT_ReleaseBrake+0x78>
        LogMessage("⚠ Failed to send brake release");
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <CO_NMT_ReleaseBrake+0x94>)
 80005b6:	f7ff fdd1 	bl	800015c <LogMessage>
 80005ba:	e005      	b.n	80005c8 <CO_NMT_ReleaseBrake+0x84>
        return;
    }

    // Можно добавить ожидание окончания отправки (необязательно)
    HAL_Delay(100);
 80005bc:	2064      	movs	r0, #100	@ 0x64
 80005be:	f001 f843 	bl	8001648 <HAL_Delay>
    LogMessage("✅ Brake release command sent");
 80005c2:	4806      	ldr	r0, [pc, #24]	@ (80005dc <CO_NMT_ReleaseBrake+0x98>)
 80005c4:	f7ff fdca 	bl	800015c <LogMessage>
}
 80005c8:	3770      	adds	r7, #112	@ 0x70
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	08004a1c 	.word	0x08004a1c
 80005d4:	080049b4 	.word	0x080049b4
 80005d8:	080049d8 	.word	0x080049d8
 80005dc:	080049fc 	.word	0x080049fc

080005e0 <CO_PDO_Handle>:

PDO_Data_t pdo_nodes[MAX_NODES];
uint8_t pdo_received[MAX_NODES] = {0};

// --- Обработка входящего PDO-сообщения ---
void CO_PDO_Handle(uint16_t cob_id, uint8_t *data, uint8_t dlc) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	717b      	strb	r3, [r7, #5]
    uint8_t node_id = cob_id & 0x7F;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005f8:	73fb      	strb	r3, [r7, #15]
    if (node_id >= MAX_NODES) return;
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	d82e      	bhi.n	800065e <CO_PDO_Handle+0x7e>

    // Определение номера PDO (0 — TPDO1, 1 — TPDO2 и т.д.)
    uint16_t base_id = cob_id & 0xF80;  // отсекаем nodeID
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8000606:	81bb      	strh	r3, [r7, #12]
    uint8_t pdo_num = (base_id - 0x180) / 0x100;  // 0, 1, 2, 3
 8000608:	89bb      	ldrh	r3, [r7, #12]
 800060a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800060e:	2b00      	cmp	r3, #0
 8000610:	da00      	bge.n	8000614 <CO_PDO_Handle+0x34>
 8000612:	33ff      	adds	r3, #255	@ 0xff
 8000614:	121b      	asrs	r3, r3, #8
 8000616:	72fb      	strb	r3, [r7, #11]

    if (pdo_num >= 4) return;
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d821      	bhi.n	8000662 <CO_PDO_Handle+0x82>

    memcpy(pdo_nodes[node_id].pdo_data[pdo_num], data, dlc);
 800061e:	7bfa      	ldrb	r2, [r7, #15]
 8000620:	7afb      	ldrb	r3, [r7, #11]
 8000622:	00d9      	lsls	r1, r3, #3
 8000624:	4613      	mov	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	440b      	add	r3, r1
 800062e:	4a0f      	ldr	r2, [pc, #60]	@ (800066c <CO_PDO_Handle+0x8c>)
 8000630:	4413      	add	r3, r2
 8000632:	797a      	ldrb	r2, [r7, #5]
 8000634:	6839      	ldr	r1, [r7, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fbd2 	bl	8003de0 <memcpy>
    pdo_nodes[node_id].pdo_len[pdo_num] = dlc;
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	7af9      	ldrb	r1, [r7, #11]
 8000640:	480a      	ldr	r0, [pc, #40]	@ (800066c <CO_PDO_Handle+0x8c>)
 8000642:	4613      	mov	r3, r2
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4403      	add	r3, r0
 800064c:	440b      	add	r3, r1
 800064e:	3320      	adds	r3, #32
 8000650:	797a      	ldrb	r2, [r7, #5]
 8000652:	701a      	strb	r2, [r3, #0]
    pdo_received[node_id] = 1;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	4a06      	ldr	r2, [pc, #24]	@ (8000670 <CO_PDO_Handle+0x90>)
 8000658:	2101      	movs	r1, #1
 800065a:	54d1      	strb	r1, [r2, r3]
 800065c:	e002      	b.n	8000664 <CO_PDO_Handle+0x84>
    if (node_id >= MAX_NODES) return;
 800065e:	bf00      	nop
 8000660:	e000      	b.n	8000664 <CO_PDO_Handle+0x84>
    if (pdo_num >= 4) return;
 8000662:	bf00      	nop
}
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000007c 	.word	0x2000007c
 8000670:	2000019c 	.word	0x2000019c

08000674 <CO_PDO_ConfigForSpeedMode>:
uint8_t CO_PDO_IsReceived(uint8_t node_id) {
    return (node_id < MAX_NODES) ? pdo_received[node_id] : 0;
}

// --- Настройка RPDO для режима скорости ---
HAL_StatusTypeDef CO_PDO_ConfigForSpeedMode(CAN_HandleTypeDef *hcan, uint8_t node_id) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef res = HAL_OK;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]

    res |= CO_SDO_Write(hcan, node_id, 0x1400, 0x01, 0x80000200 + node_id, 4);  // Disable RPDO1
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800068a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800068e:	78f9      	ldrb	r1, [r7, #3]
 8000690:	2204      	movs	r2, #4
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f92d 	bl	80008fc <CO_SDO_Write>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 ffcb 	bl	8001648 <HAL_Delay>
    res |= CO_SDO_Write(hcan, node_id, 0x1400, 0x02, 1, 1);                    // Transmission type = 1 (SYNC)
 80006b2:	78f9      	ldrb	r1, [r7, #3]
 80006b4:	2301      	movs	r3, #1
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f91a 	bl	80008fc <CO_SDO_Write>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f000 ffb8 	bl	8001648 <HAL_Delay>
    res |= CO_SDO_Write(hcan, node_id, 0x1600, 0x00, 0, 1);                     // Clear mapping
 80006d8:	78f9      	ldrb	r1, [r7, #3]
 80006da:	2301      	movs	r3, #1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2300      	movs	r3, #0
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	f44f 52b0 	mov.w	r2, #5632	@ 0x1600
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f907 	bl	80008fc <CO_SDO_Write>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 ffa5 	bl	8001648 <HAL_Delay>
    res |= CO_SDO_Write(hcan, node_id, 0x1600, 0x01, 0x60400010, 4);           // Map Controlword
 80006fe:	78f9      	ldrb	r1, [r7, #3]
 8000700:	2304      	movs	r3, #4
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <CO_PDO_ConfigForSpeedMode+0x144>)
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2301      	movs	r3, #1
 800070a:	f44f 52b0 	mov.w	r2, #5632	@ 0x1600
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f8f4 	bl	80008fc <CO_SDO_Write>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	4313      	orrs	r3, r2
 800071c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f000 ff92 	bl	8001648 <HAL_Delay>
    res |= CO_SDO_Write(hcan, node_id, 0x1600, 0x02, 0x60FF0020, 4);           // Map Target Speed
 8000724:	78f9      	ldrb	r1, [r7, #3]
 8000726:	2304      	movs	r3, #4
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <CO_PDO_ConfigForSpeedMode+0x148>)
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2302      	movs	r3, #2
 8000730:	f44f 52b0 	mov.w	r2, #5632	@ 0x1600
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 f8e1 	bl	80008fc <CO_SDO_Write>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	4313      	orrs	r3, r2
 8000742:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f000 ff7f 	bl	8001648 <HAL_Delay>
    res |= CO_SDO_Write(hcan, node_id, 0x1600, 0x00, 2, 1);                    // Confirm map count = 2
 800074a:	78f9      	ldrb	r1, [r7, #3]
 800074c:	2301      	movs	r3, #1
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	2302      	movs	r3, #2
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2300      	movs	r3, #0
 8000756:	f44f 52b0 	mov.w	r2, #5632	@ 0x1600
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f8ce 	bl	80008fc <CO_SDO_Write>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	4313      	orrs	r3, r2
 8000768:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f000 ff6c 	bl	8001648 <HAL_Delay>
    res |= CO_SDO_Write(hcan, node_id, 0x1400, 0x01, 0x00000200 + node_id, 4); // Enable RPDO1
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000776:	461a      	mov	r2, r3
 8000778:	78f9      	ldrb	r1, [r7, #3]
 800077a:	2304      	movs	r3, #4
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9200      	str	r2, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f8b8 	bl	80008fc <CO_SDO_Write>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	4313      	orrs	r3, r2
 8000794:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8000796:	200a      	movs	r0, #10
 8000798:	f000 ff56 	bl	8001648 <HAL_Delay>

    LogMessage(res == HAL_OK ? "✅ RPDO Speed config OK" : "❌ RPDO Speed config FAIL");
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <CO_PDO_ConfigForSpeedMode+0x132>
 80007a2:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <CO_PDO_ConfigForSpeedMode+0x14c>)
 80007a4:	e000      	b.n	80007a8 <CO_PDO_ConfigForSpeedMode+0x134>
 80007a6:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <CO_PDO_ConfigForSpeedMode+0x150>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fcd7 	bl	800015c <LogMessage>
    return res;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	60400010 	.word	0x60400010
 80007bc:	60ff0020 	.word	0x60ff0020
 80007c0:	08004a48 	.word	0x08004a48
 80007c4:	08004a64 	.word	0x08004a64

080007c8 <CO_PDO_StartupSequence_SpeedMode>:

// --- Запуск мотора через RPDO-последовательность ---
void CO_PDO_StartupSequence_SpeedMode(CAN_HandleTypeDef *hcan, uint8_t node_id, int32_t target_speed) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09a      	sub	sp, #104	@ 0x68
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	460b      	mov	r3, r1
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	72fb      	strb	r3, [r7, #11]
    LogMessage("🔁 Starting RPDO FSM activation...");
 80007d6:	481d      	ldr	r0, [pc, #116]	@ (800084c <CO_PDO_StartupSequence_SpeedMode+0x84>)
 80007d8:	f7ff fcc0 	bl	800015c <LogMessage>
    uint16_t sequence[] = {0x0080, 0x0006, 0x0007, 0x000F};
 80007dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <CO_PDO_StartupSequence_SpeedMode+0x88>)
 80007de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e6:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = 0; i < 4; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80007ee:	e023      	b.n	8000838 <CO_PDO_StartupSequence_SpeedMode+0x70>
        char dbg[64];
        snprintf(dbg, sizeof(dbg), "  → RPDO Step %d: 0x%04X", i, sequence[i]);
 80007f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	3360      	adds	r3, #96	@ 0x60
 80007f6:	443b      	add	r3, r7
 80007f8:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80007fc:	f107 0014 	add.w	r0, r7, #20
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000804:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <CO_PDO_StartupSequence_SpeedMode+0x8c>)
 8000806:	2140      	movs	r1, #64	@ 0x40
 8000808:	f003 fa80 	bl	8003d0c <sniprintf>
        LogMessage(dbg);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fca3 	bl	800015c <LogMessage>
        CO_SYNC_SendRPDOAndSYNC(hcan, node_id, sequence[i], target_speed);
 8000816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	3360      	adds	r3, #96	@ 0x60
 800081c:	443b      	add	r3, r7
 800081e:	f833 2c0c 	ldrh.w	r2, [r3, #-12]
 8000822:	7af9      	ldrb	r1, [r7, #11]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	f000 f9da 	bl	8000be0 <CO_SYNC_SendRPDOAndSYNC>
        HAL_Delay(100);  // даём мотору переварить
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f000 ff0b 	bl	8001648 <HAL_Delay>
    for (int i = 0; i < 4; i++) {
 8000832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000834:	3301      	adds	r3, #1
 8000836:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800083a:	2b03      	cmp	r3, #3
 800083c:	ddd8      	ble.n	80007f0 <CO_PDO_StartupSequence_SpeedMode+0x28>
    }
    LogMessage("✅ RPDO FSM complete");
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <CO_PDO_StartupSequence_SpeedMode+0x90>)
 8000840:	f7ff fc8c 	bl	800015c <LogMessage>
}
 8000844:	bf00      	nop
 8000846:	3760      	adds	r7, #96	@ 0x60
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	08004a80 	.word	0x08004a80
 8000850:	08004adc 	.word	0x08004adc
 8000854:	08004aa8 	.word	0x08004aa8
 8000858:	08004ac4 	.word	0x08004ac4

0800085c <CO_SDO_HandleResponse>:

void LogMessage(const char *msg);

SDO_Transfer SDO_Buffer[MAX_SDO_TRANSFERS];

void CO_SDO_HandleResponse(uint8_t node_id, uint8_t *data, uint8_t dlc) {
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
    if (node_id >= MAX_SDO_TRANSFERS || dlc < 8) return;
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db3c      	blt.n	80008ee <CO_SDO_HandleResponse+0x92>
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b07      	cmp	r3, #7
 8000878:	d939      	bls.n	80008ee <CO_SDO_HandleResponse+0x92>
    SDO_Transfer *sdo = &SDO_Buffer[node_id];
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	4a1e      	ldr	r2, [pc, #120]	@ (80008f8 <CO_SDO_HandleResponse+0x9c>)
 8000880:	4413      	add	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]

    uint8_t cmd = data[0] & 0xE0;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f023 031f 	bic.w	r3, r3, #31
 800088c:	72fb      	strb	r3, [r7, #11]

    if (cmd == 0x40 || cmd == 0x43 || cmd == 0x47) {
 800088e:	7afb      	ldrb	r3, [r7, #11]
 8000890:	2b40      	cmp	r3, #64	@ 0x40
 8000892:	d005      	beq.n	80008a0 <CO_SDO_HandleResponse+0x44>
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	2b43      	cmp	r3, #67	@ 0x43
 8000898:	d002      	beq.n	80008a0 <CO_SDO_HandleResponse+0x44>
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	2b47      	cmp	r3, #71	@ 0x47
 800089e:	d11c      	bne.n	80008da <CO_SDO_HandleResponse+0x7e>
        sdo->value = (data[4]) | (data[5] << 8) | (data[6] << 16) | (data[7] << 24);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	3305      	adds	r3, #5
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	431a      	orrs	r2, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	3306      	adds	r3, #6
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	041b      	lsls	r3, r3, #16
 80008ba:	431a      	orrs	r2, r3
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	3307      	adds	r3, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	061b      	lsls	r3, r3, #24
 80008c4:	4313      	orrs	r3, r2
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	609a      	str	r2, [r3, #8]
        sdo->ready = 1;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2201      	movs	r2, #1
 80008d0:	705a      	strb	r2, [r3, #1]
        sdo->pending = 0;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	e00a      	b.n	80008f0 <CO_SDO_HandleResponse+0x94>
    } else if (cmd == 0x80) {
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	2b80      	cmp	r3, #128	@ 0x80
 80008de:	d107      	bne.n	80008f0 <CO_SDO_HandleResponse+0x94>
        sdo->error = 1;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2201      	movs	r2, #1
 80008e4:	709a      	strb	r2, [r3, #2]
        sdo->pending = 0;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	e000      	b.n	80008f0 <CO_SDO_HandleResponse+0x94>
    if (node_id >= MAX_SDO_TRANSFERS || dlc < 8) return;
 80008ee:	bf00      	nop
    }
}
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	200001a4 	.word	0x200001a4

080008fc <CO_SDO_Write>:
        return HAL_TIMEOUT;
    }
}

HAL_StatusTypeDef CO_SDO_Write(CAN_HandleTypeDef *hcan, uint8_t node_id,
                                uint16_t index, uint8_t subindex, uint32_t value, uint8_t size) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	@ 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	4608      	mov	r0, r1
 8000906:	4611      	mov	r1, r2
 8000908:	461a      	mov	r2, r3
 800090a:	4603      	mov	r3, r0
 800090c:	70fb      	strb	r3, [r7, #3]
 800090e:	460b      	mov	r3, r1
 8000910:	803b      	strh	r3, [r7, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	70bb      	strb	r3, [r7, #2]
    CAN_TxHeaderTypeDef txHeader = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
 8000926:	615a      	str	r2, [r3, #20]
    uint8_t txData[8] = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
    uint32_t mailbox;

    txHeader.StdId = 0x600 + node_id;
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000938:	61bb      	str	r3, [r7, #24]
    txHeader.DLC = 8;
 800093a:	2308      	movs	r3, #8
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.IDE = CAN_ID_STD;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24

    switch (size) {
 8000946:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800094a:	2b04      	cmp	r3, #4
 800094c:	d016      	beq.n	800097c <CO_SDO_Write+0x80>
 800094e:	2b04      	cmp	r3, #4
 8000950:	dc26      	bgt.n	80009a0 <CO_SDO_Write+0xa4>
 8000952:	2b01      	cmp	r3, #1
 8000954:	d002      	beq.n	800095c <CO_SDO_Write+0x60>
 8000956:	2b02      	cmp	r3, #2
 8000958:	d006      	beq.n	8000968 <CO_SDO_Write+0x6c>
 800095a:	e021      	b.n	80009a0 <CO_SDO_Write+0xa4>
        case 1: txData[0] = 0x2F; txData[4] = value; break;
 800095c:	232f      	movs	r3, #47	@ 0x2f
 800095e:	743b      	strb	r3, [r7, #16]
 8000960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000962:	b2db      	uxtb	r3, r3
 8000964:	753b      	strb	r3, [r7, #20]
 8000966:	e01d      	b.n	80009a4 <CO_SDO_Write+0xa8>
        case 2: txData[0] = 0x2B; txData[4] = value; txData[5] = value >> 8; break;
 8000968:	232b      	movs	r3, #43	@ 0x2b
 800096a:	743b      	strb	r3, [r7, #16]
 800096c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800096e:	b2db      	uxtb	r3, r3
 8000970:	753b      	strb	r3, [r7, #20]
 8000972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b2db      	uxtb	r3, r3
 8000978:	757b      	strb	r3, [r7, #21]
 800097a:	e013      	b.n	80009a4 <CO_SDO_Write+0xa8>
        case 4: txData[0] = 0x23; txData[4] = value; txData[5] = value >> 8;
 800097c:	2323      	movs	r3, #35	@ 0x23
 800097e:	743b      	strb	r3, [r7, #16]
 8000980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000982:	b2db      	uxtb	r3, r3
 8000984:	753b      	strb	r3, [r7, #20]
 8000986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	b2db      	uxtb	r3, r3
 800098c:	757b      	strb	r3, [r7, #21]
                txData[6] = value >> 16; txData[7] = value >> 24; break;
 800098e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000990:	0c1b      	lsrs	r3, r3, #16
 8000992:	b2db      	uxtb	r3, r3
 8000994:	75bb      	strb	r3, [r7, #22]
 8000996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000998:	0e1b      	lsrs	r3, r3, #24
 800099a:	b2db      	uxtb	r3, r3
 800099c:	75fb      	strb	r3, [r7, #23]
 800099e:	e001      	b.n	80009a4 <CO_SDO_Write+0xa8>
        default: return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e013      	b.n	80009cc <CO_SDO_Write+0xd0>
    }

    txData[1] = index & 0xFF;
 80009a4:	883b      	ldrh	r3, [r7, #0]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	747b      	strb	r3, [r7, #17]
    txData[2] = index >> 8;
 80009aa:	883b      	ldrh	r3, [r7, #0]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	74bb      	strb	r3, [r7, #18]
    txData[3] = subindex;
 80009b4:	78bb      	ldrb	r3, [r7, #2]
 80009b6:	74fb      	strb	r3, [r7, #19]

    return HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &mailbox);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	f107 0210 	add.w	r2, r7, #16
 80009c0:	f107 0118 	add.w	r1, r7, #24
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f001 f86b 	bl	8001aa0 <HAL_CAN_AddTxMessage>
 80009ca:	4603      	mov	r3, r0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3730      	adds	r7, #48	@ 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <CO_SDO_Init_SpeedMode>:

HAL_StatusTypeDef CO_SDO_Init_SpeedMode(CAN_HandleTypeDef *hcan, uint8_t node_id) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af02      	add	r7, sp, #8
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
    LogMessage("=== CO_SDO_Init_SpeedMode (RAW based) ===");
 80009e0:	4850      	ldr	r0, [pc, #320]	@ (8000b24 <CO_SDO_Init_SpeedMode+0x150>)
 80009e2:	f7ff fbbb 	bl	800015c <LogMessage>
    HAL_StatusTypeDef res = HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	77fb      	strb	r3, [r7, #31]

    // Устанавливаем режим скорости
    res |= CO_SDO_Write(hcan, node_id, 0x6060, 0x00, 0x03, 1); // Speed mode
 80009ea:	78f9      	ldrb	r1, [r7, #3]
 80009ec:	2301      	movs	r3, #1
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	2303      	movs	r3, #3
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2300      	movs	r3, #0
 80009f6:	f246 0260 	movw	r2, #24672	@ 0x6060
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff7e 	bl	80008fc <CO_SDO_Write>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	7ffb      	ldrb	r3, [r7, #31]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	77fb      	strb	r3, [r7, #31]
    HAL_Delay(50);
 8000a0a:	2032      	movs	r0, #50	@ 0x32
 8000a0c:	f000 fe1c 	bl	8001648 <HAL_Delay>

    // Поэтапная активация двигателя через Controlword
    uint16_t control_words[] = {0x0080, 0x0006, 0x0007, 0x000F};
 8000a10:	4a45      	ldr	r2, [pc, #276]	@ (8000b28 <CO_SDO_Init_SpeedMode+0x154>)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = 0; i < 4; i++) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	e01b      	b.n	8000a5c <CO_SDO_Init_SpeedMode+0x88>
        res |= CO_SDO_Write(hcan, node_id, 0x6040, 0x00, control_words[i], 2);
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	3320      	adds	r3, #32
 8000a2a:	443b      	add	r3, r7
 8000a2c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000a30:	461a      	mov	r2, r3
 8000a32:	78f9      	ldrb	r1, [r7, #3]
 8000a34:	2302      	movs	r3, #2
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	9200      	str	r2, [sp, #0]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f246 0240 	movw	r2, #24640	@ 0x6040
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff5b 	bl	80008fc <CO_SDO_Write>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	7ffb      	ldrb	r3, [r7, #31]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	77fb      	strb	r3, [r7, #31]
        HAL_Delay(50); // ✅ Тут задержка нужна между этапами включения
 8000a50:	2032      	movs	r0, #50	@ 0x32
 8000a52:	f000 fdf9 	bl	8001648 <HAL_Delay>
    for (int i = 0; i < 4; i++) {
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	dde0      	ble.n	8000a24 <CO_SDO_Init_SpeedMode+0x50>
    }

    // ✅ УСТАНОВКА ВРЕМЕНИ РАЗГОНА/ТОРМОЖЕНИЯ
    res |= CO_SDO_Write(hcan, node_id, 0x201C, 0x00, 400, 4);  // Acceleration time = 1000 мс
 8000a62:	78f9      	ldrb	r1, [r7, #3]
 8000a64:	2304      	movs	r3, #4
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f242 021c 	movw	r2, #8220	@ 0x201c
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff41 	bl	80008fc <CO_SDO_Write>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	7ffb      	ldrb	r3, [r7, #31]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	77fb      	strb	r3, [r7, #31]
    HAL_Delay(20);
 8000a84:	2014      	movs	r0, #20
 8000a86:	f000 fddf 	bl	8001648 <HAL_Delay>
    res |= CO_SDO_Write(hcan, node_id, 0x201D, 0x00, 1000, 4);  // Deceleration time = 1000 мс
 8000a8a:	78f9      	ldrb	r1, [r7, #3]
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	f242 021d 	movw	r2, #8221	@ 0x201d
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff2d 	bl	80008fc <CO_SDO_Write>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	77fb      	strb	r3, [r7, #31]
    HAL_Delay(20);
 8000aac:	2014      	movs	r0, #20
 8000aae:	f000 fdcb 	bl	8001648 <HAL_Delay>

    // ✅ УСТАНОВКА СКОРОСТИ
    int32_t speed = 20000;  // Пониженная скорость
 8000ab2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000ab6:	617b      	str	r3, [r7, #20]
    res |= CO_SDO_Write(hcan, node_id, 0x60FF, 0x00, (uint32_t)speed, 4);
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	78f9      	ldrb	r1, [r7, #3]
 8000abc:	2204      	movs	r2, #4
 8000abe:	9201      	str	r2, [sp, #4]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f246 02ff 	movw	r2, #24831	@ 0x60ff
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff17 	bl	80008fc <CO_SDO_Write>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	77fb      	strb	r3, [r7, #31]
    HAL_Delay(5000);  // Примерная задержка (время вращения)
 8000ad8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000adc:	f000 fdb4 	bl	8001648 <HAL_Delay>

    // ✅ ОСТАНОВКА
    res |= CO_SDO_Write(hcan, node_id, 0x60FF, 0x00, 0x00000000, 4);
 8000ae0:	78f9      	ldrb	r1, [r7, #3]
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	f246 02ff 	movw	r2, #24831	@ 0x60ff
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff03 	bl	80008fc <CO_SDO_Write>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	7ffb      	ldrb	r3, [r7, #31]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	77fb      	strb	r3, [r7, #31]
    HAL_Delay(100);
 8000b00:	2064      	movs	r0, #100	@ 0x64
 8000b02:	f000 fda1 	bl	8001648 <HAL_Delay>

    LogMessage(res == HAL_OK ? "✅ SpeedMode RAW success" : "❌ SpeedMode RAW failed");
 8000b06:	7ffb      	ldrb	r3, [r7, #31]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <CO_SDO_Init_SpeedMode+0x13c>
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <CO_SDO_Init_SpeedMode+0x158>)
 8000b0e:	e000      	b.n	8000b12 <CO_SDO_Init_SpeedMode+0x13e>
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <CO_SDO_Init_SpeedMode+0x15c>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb22 	bl	800015c <LogMessage>
    return res;
 8000b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	08004b00 	.word	0x08004b00
 8000b28:	08004b64 	.word	0x08004b64
 8000b2c:	08004b2c 	.word	0x08004b2c
 8000b30:	08004b48 	.word	0x08004b48

08000b34 <CO_SYNC_ResetStep>:
static uint32_t last_rpdo_log = 0;
uint8_t sync_enabled = 0;
  // Счётчик шагов таймера

uint16_t sync_step_counter = 0;  // ✅ просто global, без static
void CO_SYNC_ResetStep(void) {
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
    sync_step_counter = 0;
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <CO_SYNC_ResetStep+0x14>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	801a      	strh	r2, [r3, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200009a6 	.word	0x200009a6

08000b4c <CO_SYNC_SetEnabled>:

extern void LogMessage(const char *);
void LogMessage_Once(const char *msg);

void CO_SYNC_SetEnabled(uint8_t enabled) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
    sync_enabled = enabled;
 8000b56:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <CO_SYNC_SetEnabled+0x1c>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	7013      	strb	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200009a4 	.word	0x200009a4

08000b6c <CO_SYNC_IsEnabled>:

uint8_t CO_SYNC_IsEnabled(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
    return sync_enabled;
 8000b70:	4b02      	ldr	r3, [pc, #8]	@ (8000b7c <CO_SYNC_IsEnabled+0x10>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	200009a4 	.word	0x200009a4

08000b80 <CO_SYNC_Send>:

void CO_SYNC_Send(CAN_HandleTypeDef *hcan) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    if (!sync_enabled) return;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <CO_SYNC_Send+0x54>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d01d      	beq.n	8000bcc <CO_SYNC_Send+0x4c>

    CAN_TxHeaderTypeDef header;
    uint8_t data[1] = {0};
 8000b90:	2300      	movs	r3, #0
 8000b92:	733b      	strb	r3, [r7, #12]
    uint32_t mailbox;

    header.StdId = 0x080;
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	613b      	str	r3, [r7, #16]
    header.IDE = CAN_ID_STD;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
    header.RTR = CAN_RTR_DATA;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
    header.DLC = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]

    if (HAL_CAN_AddTxMessage(hcan, &header, data, &mailbox) != HAL_OK) {
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	f107 020c 	add.w	r2, r7, #12
 8000bac:	f107 0110 	add.w	r1, r7, #16
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 ff75 	bl	8001aa0 <HAL_CAN_AddTxMessage>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <CO_SYNC_Send+0x44>
        LogMessage("SYNC send failed");
 8000bbc:	4806      	ldr	r0, [pc, #24]	@ (8000bd8 <CO_SYNC_Send+0x58>)
 8000bbe:	f7ff facd 	bl	800015c <LogMessage>
 8000bc2:	e004      	b.n	8000bce <CO_SYNC_Send+0x4e>
    } else {
        LogMessage("SYNC sent");
 8000bc4:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <CO_SYNC_Send+0x5c>)
 8000bc6:	f7ff fac9 	bl	800015c <LogMessage>
 8000bca:	e000      	b.n	8000bce <CO_SYNC_Send+0x4e>
    if (!sync_enabled) return;
 8000bcc:	bf00      	nop
    }
}
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200009a4 	.word	0x200009a4
 8000bd8:	08004bc8 	.word	0x08004bc8
 8000bdc:	08004bdc 	.word	0x08004bdc

08000be0 <CO_SYNC_SendRPDOAndSYNC>:

void CO_SYNC_SendRPDOAndSYNC(CAN_HandleTypeDef *hcan, uint8_t node_id, uint16_t controlword, int32_t value) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	@ 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	72fb      	strb	r3, [r7, #11]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	813b      	strh	r3, [r7, #8]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]

    // Controlword (0x6040)
    data[0] = controlword & 0xFF;
 8000bfc:	893b      	ldrh	r3, [r7, #8]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	753b      	strb	r3, [r7, #20]
    data[1] = (controlword >> 8) & 0xFF;
 8000c02:	893b      	ldrh	r3, [r7, #8]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	757b      	strb	r3, [r7, #21]

#if USE_SPEED_MODE
    // Target speed (0x60FF)
    data[2] = value & 0xFF;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	75bb      	strb	r3, [r7, #22]
    data[3] = (value >> 8) & 0xFF;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	121b      	asrs	r3, r3, #8
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	75fb      	strb	r3, [r7, #23]
    data[4] = (value >> 16) & 0xFF;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	141b      	asrs	r3, r3, #16
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	763b      	strb	r3, [r7, #24]
    data[5] = (value >> 24) & 0xFF;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	0e1b      	lsrs	r3, r3, #24
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	767b      	strb	r3, [r7, #25]
    LogMessage("RPDO (6040 + 60FF) sent");
 8000c2a:	4817      	ldr	r0, [pc, #92]	@ (8000c88 <CO_SYNC_SendRPDOAndSYNC+0xa8>)
 8000c2c:	f7ff fa96 	bl	800015c <LogMessage>
    data[4] = (value >> 16) & 0xFF;
    data[5] = (value >> 24) & 0xFF;
    LogMessage("RPDO (6040 + 607A) sent");
#endif

    data[6] = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	76bb      	strb	r3, [r7, #26]
    data[7] = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	76fb      	strb	r3, [r7, #27]

    txHeader.StdId = 0x200 + node_id;  // RPDO1
 8000c38:	7afb      	ldrb	r3, [r7, #11]
 8000c3a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c3e:	623b      	str	r3, [r7, #32]
    txHeader.DLC = 8;
 8000c40:	2308      	movs	r3, #8
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
    txHeader.IDE = CAN_ID_STD;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.RTR = CAN_RTR_DATA;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_CAN_AddTxMessage(hcan, &txHeader, data, &txMailbox) != HAL_OK) {
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	f107 0214 	add.w	r2, r7, #20
 8000c54:	f107 0120 	add.w	r1, r7, #32
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 ff21 	bl	8001aa0 <HAL_CAN_AddTxMessage>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <CO_SYNC_SendRPDOAndSYNC+0x8c>
        LogMessage("RPDO send failed");
 8000c64:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <CO_SYNC_SendRPDOAndSYNC+0xac>)
 8000c66:	f7ff fa79 	bl	800015c <LogMessage>
 8000c6a:	e00a      	b.n	8000c82 <CO_SYNC_SendRPDOAndSYNC+0xa2>
        return;
    }

    if (sync_enabled) {
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <CO_SYNC_SendRPDOAndSYNC+0xb0>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <CO_SYNC_SendRPDOAndSYNC+0x9c>
        CO_SYNC_Send(hcan);
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f7ff ff83 	bl	8000b80 <CO_SYNC_Send>
 8000c7a:	e002      	b.n	8000c82 <CO_SYNC_SendRPDOAndSYNC+0xa2>
    } else {
        LogMessage("SYNC skipped (disabled)");
 8000c7c:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <CO_SYNC_SendRPDOAndSYNC+0xb4>)
 8000c7e:	f7ff fa6d 	bl	800015c <LogMessage>
    }
}
 8000c82:	3738      	adds	r7, #56	@ 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	08004be8 	.word	0x08004be8
 8000c8c:	08004c00 	.word	0x08004c00
 8000c90:	200009a4 	.word	0x200009a4
 8000c94:	08004c14 	.word	0x08004c14

08000c98 <CAN_Init>:
// --- Прототипы ---
static void CAN_ConfigFilter(void);
extern void LogMessage(const char *message);

// --- Основная инициализация CAN ---
void CAN_Init(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    LogMessage("CAN_Init: Starting CAN_ConfigFilter");
 8000c9c:	4814      	ldr	r0, [pc, #80]	@ (8000cf0 <CAN_Init+0x58>)
 8000c9e:	f7ff fa5d 	bl	800015c <LogMessage>
    CAN_ConfigFilter();
 8000ca2:	f000 f859 	bl	8000d58 <CAN_ConfigFilter>
    LogMessage("CAN_Init: CAN_ConfigFilter Done");
 8000ca6:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <CAN_Init+0x5c>)
 8000ca8:	f7ff fa58 	bl	800015c <LogMessage>

    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000cac:	4812      	ldr	r0, [pc, #72]	@ (8000cf8 <CAN_Init+0x60>)
 8000cae:	f000 feb3 	bl	8001a18 <HAL_CAN_Start>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <CAN_Init+0x2c>
        LogMessage("CAN_Init: HAL_CAN_Start Error");
 8000cb8:	4810      	ldr	r0, [pc, #64]	@ (8000cfc <CAN_Init+0x64>)
 8000cba:	f7ff fa4f 	bl	800015c <LogMessage>
        Error_Handler();
 8000cbe:	f000 faa1 	bl	8001204 <Error_Handler>
 8000cc2:	e002      	b.n	8000cca <CAN_Init+0x32>
    } else {
        LogMessage("CAN_Init: HAL_CAN_Start OK");
 8000cc4:	480e      	ldr	r0, [pc, #56]	@ (8000d00 <CAN_Init+0x68>)
 8000cc6:	f7ff fa49 	bl	800015c <LogMessage>
    }

    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000cca:	2102      	movs	r1, #2
 8000ccc:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <CAN_Init+0x60>)
 8000cce:	f001 f8d7 	bl	8001e80 <HAL_CAN_ActivateNotification>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <CAN_Init+0x4c>
        LogMessage("CAN_Init: HAL_CAN_ActivateNotification Error");
 8000cd8:	480a      	ldr	r0, [pc, #40]	@ (8000d04 <CAN_Init+0x6c>)
 8000cda:	f7ff fa3f 	bl	800015c <LogMessage>
        Error_Handler();
 8000cde:	f000 fa91 	bl	8001204 <Error_Handler>
    } else {
        LogMessage("CAN_Init: HAL_CAN_ActivateNotification OK");
    }
}
 8000ce2:	e002      	b.n	8000cea <CAN_Init+0x52>
        LogMessage("CAN_Init: HAL_CAN_ActivateNotification OK");
 8000ce4:	4808      	ldr	r0, [pc, #32]	@ (8000d08 <CAN_Init+0x70>)
 8000ce6:	f7ff fa39 	bl	800015c <LogMessage>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	08004c2c 	.word	0x08004c2c
 8000cf4:	08004c50 	.word	0x08004c50
 8000cf8:	200009a8 	.word	0x200009a8
 8000cfc:	08004c70 	.word	0x08004c70
 8000d00:	08004c90 	.word	0x08004c90
 8000d04:	08004cac 	.word	0x08004cac
 8000d08:	08004cdc 	.word	0x08004cdc

08000d0c <HAL_CAN_RxFifo0MsgPendingCallback>:

// --- Прерывание при приёме сообщения ---
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09c      	sub	sp, #112	@ 0x70
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000d14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d18:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 ff8d 	bl	8001c3e <HAL_CAN_GetRxMessage>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10d      	bne.n	8000d46 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
        char msg[64];
        //sprintf(msg, "CAN IRQ: StdID=0x%03lX, Len=%lu", RxHeader.StdId, RxHeader.DLC);
        LogMessage(msg);
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fa14 	bl	800015c <LogMessage>

        COB_Dispatch(&RxHeader, RxData);
 8000d34:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000d38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa6a 	bl	8000218 <COB_Dispatch>
    } else {
        LogMessage("CAN IRQ: Failed to get message");
    }
}
 8000d44:	e002      	b.n	8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
        LogMessage("CAN IRQ: Failed to get message");
 8000d46:	4803      	ldr	r0, [pc, #12]	@ (8000d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000d48:	f7ff fa08 	bl	800015c <LogMessage>
}
 8000d4c:	bf00      	nop
 8000d4e:	3770      	adds	r7, #112	@ 0x70
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08004d08 	.word	0x08004d08

08000d58 <CAN_ConfigFilter>:
        LogMessage("ERROR: GetRxMessage failed, although FIFO is non-empty");
    }
}

// --- Конфигурация фильтра ---
static void CAN_ConfigFilter(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef FilterConfig = {0};
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2228      	movs	r2, #40	@ 0x28
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 f807 	bl	8003d78 <memset>

    FilterConfig.FilterBank = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterIdHigh = 0x0000;
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
    FilterConfig.FilterIdLow = 0x0000;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
    FilterConfig.FilterMaskIdHigh = 0x0000;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
    FilterConfig.FilterMaskIdLow = 0x0000;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
    FilterConfig.FilterActivation = ENABLE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	623b      	str	r3, [r7, #32]
    FilterConfig.SlaveStartFilterBank = 14;
 8000d8e:	230e      	movs	r3, #14
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &FilterConfig) != HAL_OK) {
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <CAN_ConfigFilter+0x64>)
 8000d98:	f000 fd75 	bl	8001886 <HAL_CAN_ConfigFilter>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <CAN_ConfigFilter+0x56>
        LogMessage("CAN_ConfigFilter: Filter configuration failed");
 8000da2:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <CAN_ConfigFilter+0x68>)
 8000da4:	f7ff f9da 	bl	800015c <LogMessage>
        Error_Handler();
 8000da8:	f000 fa2c 	bl	8001204 <Error_Handler>
    } else {
        LogMessage("CAN_ConfigFilter: Filter configured successfully");
    }
}
 8000dac:	e002      	b.n	8000db4 <CAN_ConfigFilter+0x5c>
        LogMessage("CAN_ConfigFilter: Filter configured successfully");
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <CAN_ConfigFilter+0x6c>)
 8000db0:	f7ff f9d4 	bl	800015c <LogMessage>
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200009a8 	.word	0x200009a8
 8000dc0:	08004d60 	.word	0x08004d60
 8000dc4:	08004d90 	.word	0x08004d90

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 fbda 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f8a4 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 f996 	bl	8001104 <MX_GPIO_Init>
  MX_CAN_Init();
 8000dd8:	f000 f8e6 	bl	8000fa8 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000ddc:	f000 f968 	bl	80010b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000de0:	f000 f918 	bl	8001014 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  LogMessage("=== System Init ===");
 8000de4:	484a      	ldr	r0, [pc, #296]	@ (8000f10 <main+0x148>)
 8000de6:	f7ff f9b9 	bl	800015c <LogMessage>

  // 1. Инициализация CAN
  CAN_Init();
 8000dea:	f7ff ff55 	bl	8000c98 <CAN_Init>
  HAL_Delay(500);
 8000dee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000df2:	f000 fc29 	bl	8001648 <HAL_Delay>

  // Сброс
  CO_NMT_Send(&hcan, NMT_RESET_NODE, WHEEL_NODE_1);
 8000df6:	2203      	movs	r2, #3
 8000df8:	2181      	movs	r1, #129	@ 0x81
 8000dfa:	4846      	ldr	r0, [pc, #280]	@ (8000f14 <main+0x14c>)
 8000dfc:	f7ff fafe 	bl	80003fc <CO_NMT_Send>
  CO_NMT_Send(&hcan, NMT_RESET_NODE, WHEEL_NODE_2);
 8000e00:	2202      	movs	r2, #2
 8000e02:	2181      	movs	r1, #129	@ 0x81
 8000e04:	4843      	ldr	r0, [pc, #268]	@ (8000f14 <main+0x14c>)
 8000e06:	f7ff faf9 	bl	80003fc <CO_NMT_Send>
  HAL_Delay(300);
 8000e0a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e0e:	f000 fc1b 	bl	8001648 <HAL_Delay>

  // Старт
  CO_NMT_Send(&hcan, NMT_START, WHEEL_NODE_1);
 8000e12:	2203      	movs	r2, #3
 8000e14:	2101      	movs	r1, #1
 8000e16:	483f      	ldr	r0, [pc, #252]	@ (8000f14 <main+0x14c>)
 8000e18:	f7ff faf0 	bl	80003fc <CO_NMT_Send>
  CO_NMT_Send(&hcan, NMT_START, WHEEL_NODE_2);
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	2101      	movs	r1, #1
 8000e20:	483c      	ldr	r0, [pc, #240]	@ (8000f14 <main+0x14c>)
 8000e22:	f7ff faeb 	bl	80003fc <CO_NMT_Send>
  HAL_Delay(300);
 8000e26:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e2a:	f000 fc0d 	bl	8001648 <HAL_Delay>

  // Активация
  CAN_SendActivationCommand(&hcan, WHEEL_NODE_1);
 8000e2e:	2103      	movs	r1, #3
 8000e30:	4838      	ldr	r0, [pc, #224]	@ (8000f14 <main+0x14c>)
 8000e32:	f7ff fa8d 	bl	8000350 <CAN_SendActivationCommand>
  CAN_SendActivationCommand(&hcan, WHEEL_NODE_2);
 8000e36:	2102      	movs	r1, #2
 8000e38:	4836      	ldr	r0, [pc, #216]	@ (8000f14 <main+0x14c>)
 8000e3a:	f7ff fa89 	bl	8000350 <CAN_SendActivationCommand>
  HAL_Delay(100);
 8000e3e:	2064      	movs	r0, #100	@ 0x64
 8000e40:	f000 fc02 	bl	8001648 <HAL_Delay>

  // Снятие с тормоза
  CO_NMT_ReleaseBrake(&hcan, WHEEL_NODE_1);
 8000e44:	2103      	movs	r1, #3
 8000e46:	4833      	ldr	r0, [pc, #204]	@ (8000f14 <main+0x14c>)
 8000e48:	f7ff fb7c 	bl	8000544 <CO_NMT_ReleaseBrake>
  CO_NMT_ReleaseBrake(&hcan, WHEEL_NODE_2);
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4831      	ldr	r0, [pc, #196]	@ (8000f14 <main+0x14c>)
 8000e50:	f7ff fb78 	bl	8000544 <CO_NMT_ReleaseBrake>
  HAL_Delay(100);
 8000e54:	2064      	movs	r0, #100	@ 0x64
 8000e56:	f000 fbf7 	bl	8001648 <HAL_Delay>


  // Инициализация режима скорости через SDO
  CO_SDO_Init_SpeedMode(&hcan, WHEEL_NODE_1);
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	482d      	ldr	r0, [pc, #180]	@ (8000f14 <main+0x14c>)
 8000e5e:	f7ff fdb9 	bl	80009d4 <CO_SDO_Init_SpeedMode>
  CO_SDO_Init_SpeedMode(&hcan, WHEEL_NODE_2);
 8000e62:	2102      	movs	r1, #2
 8000e64:	482b      	ldr	r0, [pc, #172]	@ (8000f14 <main+0x14c>)
 8000e66:	f7ff fdb5 	bl	80009d4 <CO_SDO_Init_SpeedMode>
  HAL_Delay(100);
 8000e6a:	2064      	movs	r0, #100	@ 0x64
 8000e6c:	f000 fbec 	bl	8001648 <HAL_Delay>

  // ⚠️ ПЕРЕХОД в Operational только теперь
  CO_NMT_Send(&hcan, NMT_START, WHEEL_NODE_1);
 8000e70:	2203      	movs	r2, #3
 8000e72:	2101      	movs	r1, #1
 8000e74:	4827      	ldr	r0, [pc, #156]	@ (8000f14 <main+0x14c>)
 8000e76:	f7ff fac1 	bl	80003fc <CO_NMT_Send>
  CO_NMT_Send(&hcan, NMT_START, WHEEL_NODE_2);
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4825      	ldr	r0, [pc, #148]	@ (8000f14 <main+0x14c>)
 8000e80:	f7ff fabc 	bl	80003fc <CO_NMT_Send>
  HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	@ 0x64
 8000e86:	f000 fbdf 	bl	8001648 <HAL_Delay>

  // Настройка RPDO
  CO_PDO_ConfigForSpeedMode(&hcan, WHEEL_NODE_1);
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	4821      	ldr	r0, [pc, #132]	@ (8000f14 <main+0x14c>)
 8000e8e:	f7ff fbf1 	bl	8000674 <CO_PDO_ConfigForSpeedMode>
  CO_PDO_ConfigForSpeedMode(&hcan, WHEEL_NODE_2);
 8000e92:	2102      	movs	r1, #2
 8000e94:	481f      	ldr	r0, [pc, #124]	@ (8000f14 <main+0x14c>)
 8000e96:	f7ff fbed 	bl	8000674 <CO_PDO_ConfigForSpeedMode>

  CO_PDO_StartupSequence_SpeedMode(&hcan, WHEEL_NODE_1, 2000);
 8000e9a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	481c      	ldr	r0, [pc, #112]	@ (8000f14 <main+0x14c>)
 8000ea2:	f7ff fc91 	bl	80007c8 <CO_PDO_StartupSequence_SpeedMode>
  CO_PDO_StartupSequence_SpeedMode(&hcan, WHEEL_NODE_2, 2000);
 8000ea6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4819      	ldr	r0, [pc, #100]	@ (8000f14 <main+0x14c>)
 8000eae:	f7ff fc8b 	bl	80007c8 <CO_PDO_StartupSequence_SpeedMode>




  // Первый запуск
  CO_SYNC_ResetStep();
 8000eb2:	f7ff fe3f 	bl	8000b34 <CO_SYNC_ResetStep>
  CO_SYNC_SetEnabled(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff fe48 	bl	8000b4c <CO_SYNC_SetEnabled>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ebc:	4816      	ldr	r0, [pc, #88]	@ (8000f18 <main+0x150>)
 8000ebe:	f002 f931 	bl	8003124 <HAL_TIM_Base_Start_IT>
  HAL_Delay(8000); // подождать пока мотор закончит ( это 30 сек = 3000 шагов, можно подкорректировать)
 8000ec2:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8000ec6:	f000 fbbf 	bl	8001648 <HAL_Delay>
  HAL_TIM_Base_Stop_IT(&htim2);
 8000eca:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <main+0x150>)
 8000ecc:	f002 f97c 	bl	80031c8 <HAL_TIM_Base_Stop_IT>
  CO_SYNC_SetEnabled(0);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fe3b 	bl	8000b4c <CO_SYNC_SetEnabled>

  HAL_Delay(3000);
 8000ed6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000eda:	f000 fbb5 	bl	8001648 <HAL_Delay>

  // Второй запуск
  CO_SYNC_ResetStep();
 8000ede:	f7ff fe29 	bl	8000b34 <CO_SYNC_ResetStep>
  CO_SYNC_SetEnabled(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fe32 	bl	8000b4c <CO_SYNC_SetEnabled>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ee8:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <main+0x150>)
 8000eea:	f002 f91b 	bl	8003124 <HAL_TIM_Base_Start_IT>
  HAL_Delay(5000);
 8000eee:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ef2:	f000 fba9 	bl	8001648 <HAL_Delay>
  HAL_TIM_Base_Stop_IT(&htim2);
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <main+0x150>)
 8000ef8:	f002 f966 	bl	80031c8 <HAL_TIM_Base_Stop_IT>
  CO_SYNC_SetEnabled(0);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fe25 	bl	8000b4c <CO_SYNC_SetEnabled>
  while (1)
  {



	  COB_ProcessStateMachine();  // Всё управление через FSM
 8000f02:	f7ff f94d 	bl	80001a0 <COB_ProcessStateMachine>
	  HAL_Delay(10);
 8000f06:	200a      	movs	r0, #10
 8000f08:	f000 fb9e 	bl	8001648 <HAL_Delay>
	  COB_ProcessStateMachine();  // Всё управление через FSM
 8000f0c:	bf00      	nop
 8000f0e:	e7f8      	b.n	8000f02 <main+0x13a>
 8000f10:	08004dc4 	.word	0x08004dc4
 8000f14:	200009a8 	.word	0x200009a8
 8000f18:	200009d0 	.word	0x200009d0

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b090      	sub	sp, #64	@ 0x40
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	2228      	movs	r2, #40	@ 0x28
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 ff24 	bl	8003d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f5a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 fc7d 	bl	8002864 <HAL_RCC_OscConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f70:	f000 f948 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f74:	230f      	movs	r3, #15
 8000f76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 feea 	bl	8002d68 <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f9a:	f000 f933 	bl	8001204 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3740      	adds	r7, #64	@ 0x40
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_CAN_Init+0x64>)
 8000fae:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <MX_CAN_Init+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <MX_CAN_Init+0x64>)
 8000fb4:	2212      	movs	r2, #18
 8000fb6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_CAN_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_CAN_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_CAN_Init+0x64>)
 8000fc6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fca:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_CAN_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_CAN_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_CAN_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <MX_CAN_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_CAN_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <MX_CAN_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_CAN_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_CAN_Init+0x64>)
 8000ff8:	f000 fb4a 	bl	8001690 <HAL_CAN_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001002:	f000 f8ff 	bl	8001204 <Error_Handler>



  /* USER CODE END CAN_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200009a8 	.word	0x200009a8
 8001010:	40006400 	.word	0x40006400

08001014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	463b      	mov	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001030:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_TIM2_Init+0x98>)
 8001032:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_TIM2_Init+0x98>)
 800103a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800103e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_TIM2_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_TIM2_Init+0x98>)
 8001048:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800104c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_TIM2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_TIM2_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105a:	4814      	ldr	r0, [pc, #80]	@ (80010ac <MX_TIM2_Init+0x98>)
 800105c:	f002 f812 	bl	8003084 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001066:	f000 f8cd 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_TIM2_Init+0x98>)
 8001078:	f002 f9c4 	bl	8003404 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001082:	f000 f8bf 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <MX_TIM2_Init+0x98>)
 8001094:	f002 fba6 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800109e:	f000 f8b1 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200009d0 	.word	0x200009d0

080010b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <MX_USART2_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e8:	f002 fbec 	bl	80038c4 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f887 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000a18 	.word	0x20000a18
 8001100:	40004400 	.word	0x40004400

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_GPIO_Init+0x78>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a17      	ldr	r2, [pc, #92]	@ (800117c <MX_GPIO_Init+0x78>)
 800111e:	f043 0320 	orr.w	r3, r3, #32
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <MX_GPIO_Init+0x78>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0320 	and.w	r3, r3, #32
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_GPIO_Init+0x78>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a11      	ldr	r2, [pc, #68]	@ (800117c <MX_GPIO_Init+0x78>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_GPIO_Init+0x78>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <MX_GPIO_Init+0x7c>)
 8001150:	f001 fb70 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_GPIO_Init+0x7c>)
 800116e:	f001 f9dd 	bl	800252c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800

08001184 <HAL_TIM_PeriodElapsedCallback>:

 // скорость в ticks/sec


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && CO_SYNC_IsEnabled()) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001194:	d12c      	bne.n	80011f0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001196:	f7ff fce9 	bl	8000b6c <CO_SYNC_IsEnabled>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d027      	beq.n	80011f0 <HAL_TIM_PeriodElapsedCallback+0x6c>
        int32_t target_speed = (sync_step_counter < 80) ? 9000 : 0;
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	2b4f      	cmp	r3, #79	@ 0x4f
 80011a6:	d802      	bhi.n	80011ae <HAL_TIM_PeriodElapsedCallback+0x2a>
 80011a8:	f242 3328 	movw	r3, #9000	@ 0x2328
 80011ac:	e000      	b.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]

        CO_SYNC_SendRPDOAndSYNC(&hcan, WHEEL_NODE_1, 0x000F, target_speed);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	220f      	movs	r2, #15
 80011b6:	2103      	movs	r1, #3
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011ba:	f7ff fd11 	bl	8000be0 <CO_SYNC_SendRPDOAndSYNC>
        CO_SYNC_SendRPDOAndSYNC(&hcan, WHEEL_NODE_2, 0x000F, target_speed);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	220f      	movs	r2, #15
 80011c2:	2102      	movs	r1, #2
 80011c4:	480d      	ldr	r0, [pc, #52]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011c6:	f7ff fd0b 	bl	8000be0 <CO_SYNC_SendRPDOAndSYNC>

        if (sync_step_counter == 80) {
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	2b50      	cmp	r3, #80	@ 0x50
 80011d0:	d108      	bne.n	80011e4 <HAL_TIM_PeriodElapsedCallback+0x60>
            CO_SYNC_SetEnabled(0);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fcba 	bl	8000b4c <CO_SYNC_SetEnabled>
            HAL_TIM_Base_Stop_IT(htim);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 fff5 	bl	80031c8 <HAL_TIM_Base_Stop_IT>
            LogMessage("STEP: Stop motion");
 80011de:	4808      	ldr	r0, [pc, #32]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011e0:	f7fe ffbc 	bl	800015c <LogMessage>
        }

        sync_step_counter++;
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b02      	ldr	r3, [pc, #8]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011ee:	801a      	strh	r2, [r3, #0]
    }
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200009a6 	.word	0x200009a6
 80011fc:	200009a8 	.word	0x200009a8
 8001200:	08004dd8 	.word	0x08004dd8

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <Error_Handler+0x8>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a14      	ldr	r2, [pc, #80]	@ (800126c <HAL_MspInit+0x5c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0e      	ldr	r2, [pc, #56]	@ (800126c <HAL_MspInit+0x5c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_MspInit+0x60>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_MspInit+0x60>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000

08001274 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a28      	ldr	r2, [pc, #160]	@ (8001330 <HAL_CAN_MspInit+0xbc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d149      	bne.n	8001328 <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <HAL_CAN_MspInit+0xc0>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <HAL_CAN_MspInit+0xc0>)
 800129a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800129e:	61d3      	str	r3, [r2, #28]
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_CAN_MspInit+0xc0>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_CAN_MspInit+0xc0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <HAL_CAN_MspInit+0xc0>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <HAL_CAN_MspInit+0xc0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	4817      	ldr	r0, [pc, #92]	@ (8001338 <HAL_CAN_MspInit+0xc4>)
 80012da:	f001 f927 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4811      	ldr	r0, [pc, #68]	@ (8001338 <HAL_CAN_MspInit+0xc4>)
 80012f4:	f001 f91a 	bl	800252c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2013      	movs	r0, #19
 80012fe:	f001 f8de 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001302:	2013      	movs	r0, #19
 8001304:	f001 f8f7 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2014      	movs	r0, #20
 800130e:	f001 f8d6 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001312:	2014      	movs	r0, #20
 8001314:	f001 f8ef 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2015      	movs	r0, #21
 800131e:	f001 f8ce 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001322:	2015      	movs	r0, #21
 8001324:	f001 f8e7 	bl	80024f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40006400 	.word	0x40006400
 8001334:	40021000 	.word	0x40021000
 8001338:	40010800 	.word	0x40010800

0800133c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800134c:	d113      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_TIM_Base_MspInit+0x44>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <HAL_TIM_Base_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_TIM_Base_MspInit+0x44>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	201c      	movs	r0, #28
 800136c:	f001 f8a7 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001370:	201c      	movs	r0, #28
 8001372:	f001 f8c0 	bl	80024f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1b      	ldr	r2, [pc, #108]	@ (800140c <HAL_UART_MspInit+0x88>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d12f      	bne.n	8001404 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <HAL_UART_MspInit+0x8c>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_UART_MspInit+0x8c>)
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ae:	61d3      	str	r3, [r2, #28]
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <HAL_UART_MspInit+0x8c>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_UART_MspInit+0x8c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a13      	ldr	r2, [pc, #76]	@ (8001410 <HAL_UART_MspInit+0x8c>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_UART_MspInit+0x8c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d4:	2304      	movs	r3, #4
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	480b      	ldr	r0, [pc, #44]	@ (8001414 <HAL_UART_MspInit+0x90>)
 80013e8:	f001 f8a0 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ec:	2308      	movs	r3, #8
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_UART_MspInit+0x90>)
 8001400:	f001 f894 	bl	800252c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40004400 	.word	0x40004400
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <UsageFault_Handler+0x4>

08001440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f8d2 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001476:	f000 fd28 	bl	8001eca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200009a8 	.word	0x200009a8

08001484 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800148a:	f000 fd1e 	bl	8001eca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200009a8 	.word	0x200009a8

08001498 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <CAN1_RX1_IRQHandler+0x10>)
 800149e:	f000 fd14 	bl	8001eca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200009a8 	.word	0x200009a8

080014ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <TIM2_IRQHandler+0x10>)
 80014b2:	f001 feb7 	bl	8003224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200009d0 	.word	0x200009d0

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	@ (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f002 fc4a 	bl	8003d88 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20005000 	.word	0x20005000
 8001520:	00000400 	.word	0x00000400
 8001524:	20000a60 	.word	0x20000a60
 8001528:	20000bb0 	.word	0x20000bb0

0800152c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001538:	f7ff fff8 	bl	800152c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800153c:	480b      	ldr	r0, [pc, #44]	@ (800156c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153e:	490c      	ldr	r1, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001540:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001554:	4c09      	ldr	r4, [pc, #36]	@ (800157c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001562:	f002 fc17 	bl	8003d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001566:	f7ff fc2f 	bl	8000dc8 <main>
  bx lr
 800156a:	4770      	bx	lr
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001574:	08004e5c 	.word	0x08004e5c
  ldr r2, =_sbss
 8001578:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800157c:	20000bb0 	.word	0x20000bb0

08001580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC1_2_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_Init+0x28>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_Init+0x28>)
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 ff87 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	200f      	movs	r0, #15
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fe36 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40022000 	.word	0x40022000

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 ff9f 	bl	8002512 <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 ff67 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000000 	.word	0x20000000
 8001608:	20000008 	.word	0x20000008
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_IncTick+0x1c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_IncTick+0x20>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a03      	ldr	r2, [pc, #12]	@ (8001630 <HAL_IncTick+0x20>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000008 	.word	0x20000008
 8001630:	20000a64 	.word	0x20000a64

08001634 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b02      	ldr	r3, [pc, #8]	@ (8001644 <HAL_GetTick+0x10>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000a64 	.word	0x20000a64

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff fff0 	bl	8001634 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffe0 	bl	8001634 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008

08001690 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0ed      	b.n	800187e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fde0 	bl	8001274 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c4:	f7ff ffb6 	bl	8001634 <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ca:	e012      	b.n	80016f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016cc:	f7ff ffb2 	bl	8001634 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	d90b      	bls.n	80016f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2205      	movs	r2, #5
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0c5      	b.n	800187e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0e5      	beq.n	80016cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0202 	bic.w	r2, r2, #2
 800170e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001710:	f7ff ff90 	bl	8001634 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001716:	e012      	b.n	800173e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001718:	f7ff ff8c 	bl	8001634 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d90b      	bls.n	800173e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2205      	movs	r2, #5
 8001736:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e09f      	b.n	800187e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e5      	bne.n	8001718 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7e1b      	ldrb	r3, [r3, #24]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7e5b      	ldrb	r3, [r3, #25]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7e9b      	ldrb	r3, [r3, #26]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0220 	orr.w	r2, r2, #32
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e007      	b.n	80017ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0220 	bic.w	r2, r2, #32
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7edb      	ldrb	r3, [r3, #27]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0210 	bic.w	r2, r2, #16
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e007      	b.n	80017f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0210 	orr.w	r2, r2, #16
 80017f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7f1b      	ldrb	r3, [r3, #28]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d108      	bne.n	800180e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0208 	orr.w	r2, r2, #8
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e007      	b.n	800181e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0208 	bic.w	r2, r2, #8
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7f5b      	ldrb	r3, [r3, #29]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d108      	bne.n	8001838 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0204 	orr.w	r2, r2, #4
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e007      	b.n	8001848 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	ea42 0103 	orr.w	r1, r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	1e5a      	subs	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001886:	b480      	push	{r7}
 8001888:	b087      	sub	sp, #28
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800189e:	7cfb      	ldrb	r3, [r7, #19]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d003      	beq.n	80018ac <HAL_CAN_ConfigFilter+0x26>
 80018a4:	7cfb      	ldrb	r3, [r7, #19]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	f040 80aa 	bne.w	8001a00 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	2201      	movs	r2, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d123      	bne.n	800192e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	401a      	ands	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001908:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3248      	adds	r2, #72	@ 0x48
 800190e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001922:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001924:	6979      	ldr	r1, [r7, #20]
 8001926:	3348      	adds	r3, #72	@ 0x48
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d122      	bne.n	800197c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	431a      	orrs	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001956:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3248      	adds	r2, #72	@ 0x48
 800195c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001970:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001972:	6979      	ldr	r1, [r7, #20]
 8001974:	3348      	adds	r3, #72	@ 0x48
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001996:	e007      	b.n	80019a8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019c2:	e007      	b.n	80019d4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019f2:	f023 0201 	bic.w	r2, r3, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e006      	b.n	8001a0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
  }
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d12e      	bne.n	8001a8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff fdf6 	bl	8001634 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a4a:	e012      	b.n	8001a72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a4c:	f7ff fdf2 	bl	8001634 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b0a      	cmp	r3, #10
 8001a58:	d90b      	bls.n	8001a72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2205      	movs	r2, #5
 8001a6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e012      	b.n	8001a98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e5      	bne.n	8001a4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e006      	b.n	8001a98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
  }
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d003      	beq.n	8001acc <HAL_CAN_AddTxMessage+0x2c>
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	f040 80ad 	bne.w	8001c26 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10a      	bne.n	8001aec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8095 	beq.w	8001c16 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	0e1b      	lsrs	r3, r3, #24
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001af6:	2201      	movs	r2, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	6809      	ldr	r1, [r1, #0]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3318      	adds	r3, #24
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	440b      	add	r3, r1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e00f      	b.n	8001b44 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b2e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b38:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3318      	adds	r3, #24
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	440b      	add	r3, r1
 8001b42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3318      	adds	r3, #24
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	440b      	add	r3, r1
 8001b54:	3304      	adds	r3, #4
 8001b56:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	7d1b      	ldrb	r3, [r3, #20]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d111      	bne.n	8001b84 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3318      	adds	r3, #24
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	6811      	ldr	r1, [r2, #0]
 8001b74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	440b      	add	r3, r1
 8001b80:	3304      	adds	r3, #4
 8001b82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3307      	adds	r3, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	061a      	lsls	r2, r3, #24
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3306      	adds	r3, #6
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3305      	adds	r3, #5
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	3204      	adds	r2, #4
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	6811      	ldr	r1, [r2, #0]
 8001bac:	ea43 0200 	orr.w	r2, r3, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001bba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3303      	adds	r3, #3
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	061a      	lsls	r2, r3, #24
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	4610      	mov	r0, r2
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	6811      	ldr	r1, [r2, #0]
 8001be2:	ea43 0200 	orr.w	r2, r3, r0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	440b      	add	r3, r1
 8001bec:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001bf0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6811      	ldr	r1, [r2, #0]
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	440b      	add	r3, r1
 8001c10:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e00e      	b.n	8001c34 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e006      	b.n	8001c34 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3724      	adds	r7, #36	@ 0x24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b087      	sub	sp, #28
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c52:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d003      	beq.n	8001c62 <HAL_CAN_GetRxMessage+0x24>
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	f040 8103 	bne.w	8001e68 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10e      	bne.n	8001c86 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0f7      	b.n	8001e76 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c98:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0e8      	b.n	8001e76 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	331b      	adds	r3, #27
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0204 	and.w	r2, r3, #4
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	331b      	adds	r3, #27
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	331b      	adds	r3, #27
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	08db      	lsrs	r3, r3, #3
 8001cec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	331b      	adds	r3, #27
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0202 	and.w	r2, r3, #2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	331b      	adds	r3, #27
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	3304      	adds	r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2208      	movs	r2, #8
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	e00b      	b.n	8001d42 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	331b      	adds	r3, #27
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	331b      	adds	r3, #27
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	331b      	adds	r3, #27
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4413      	add	r3, r2
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0c1b      	lsrs	r3, r3, #16
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0a1a      	lsrs	r2, r3, #8
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0c1a      	lsrs	r2, r3, #16
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3302      	adds	r3, #2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0e1a      	lsrs	r2, r3, #24
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3304      	adds	r3, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0a1a      	lsrs	r2, r3, #8
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	3305      	adds	r3, #5
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0c1a      	lsrs	r2, r3, #16
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0e1a      	lsrs	r2, r3, #24
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3307      	adds	r3, #7
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	e007      	b.n	8001e64 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e006      	b.n	8001e76 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e90:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d002      	beq.n	8001e9e <HAL_CAN_ActivateNotification+0x1e>
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d109      	bne.n	8001eb2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6959      	ldr	r1, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e006      	b.n	8001ec0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
  }
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b08a      	sub	sp, #40	@ 0x28
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d07c      	beq.n	800200a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d023      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f983 	bl	8002238 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f32:	e016      	b.n	8001f62 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f46:	e00c      	b.n	8001f62 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f5a:	e002      	b.n	8001f62 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f986 	bl	800226e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d024      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f962 	bl	800224a <HAL_CAN_TxMailbox1CompleteCallback>
 8001f86:	e016      	b.n	8001fb6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9a:	e00c      	b.n	8001fb6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fae:	e002      	b.n	8001fb6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f965 	bl	8002280 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d024      	beq.n	800200a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f941 	bl	800225c <HAL_CAN_TxMailbox2CompleteCallback>
 8001fda:	e016      	b.n	800200a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fee:	e00c      	b.n	800200a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
 8002002:	e002      	b.n	800200a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f944 	bl	8002292 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00c      	beq.n	800202e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2210      	movs	r2, #16
 800202c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2208      	movs	r2, #8
 8002048:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f92a 	bl	80022a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7fe fe4f 	bl	8000d0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00c      	beq.n	8002092 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2210      	movs	r2, #16
 8002090:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f90a 	bl	80022c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f8f2 	bl	80022b6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2210      	movs	r2, #16
 80020ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8f3 	bl	80022da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2208      	movs	r2, #8
 800210e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f8eb 	bl	80022ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d07b      	beq.n	8002218 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d072      	beq.n	8002210 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002184:	2b00      	cmp	r3, #0
 8002186:	d043      	beq.n	8002210 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03e      	beq.n	8002210 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002198:	2b60      	cmp	r3, #96	@ 0x60
 800219a:	d02b      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x32a>
 800219c:	2b60      	cmp	r3, #96	@ 0x60
 800219e:	d82e      	bhi.n	80021fe <HAL_CAN_IRQHandler+0x334>
 80021a0:	2b50      	cmp	r3, #80	@ 0x50
 80021a2:	d022      	beq.n	80021ea <HAL_CAN_IRQHandler+0x320>
 80021a4:	2b50      	cmp	r3, #80	@ 0x50
 80021a6:	d82a      	bhi.n	80021fe <HAL_CAN_IRQHandler+0x334>
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d019      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x316>
 80021ac:	2b40      	cmp	r3, #64	@ 0x40
 80021ae:	d826      	bhi.n	80021fe <HAL_CAN_IRQHandler+0x334>
 80021b0:	2b30      	cmp	r3, #48	@ 0x30
 80021b2:	d010      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x30c>
 80021b4:	2b30      	cmp	r3, #48	@ 0x30
 80021b6:	d822      	bhi.n	80021fe <HAL_CAN_IRQHandler+0x334>
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d002      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x2f8>
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d005      	beq.n	80021cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021c0:	e01d      	b.n	80021fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ca:	e019      	b.n	8002200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021d4:	e014      	b.n	8002200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	f043 0320 	orr.w	r3, r3, #32
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021de:	e00f      	b.n	8002200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e8:	e00a      	b.n	8002200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021f2:	e005      	b.n	8002200 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021fc:	e000      	b.n	8002200 <HAL_CAN_IRQHandler+0x336>
            break;
 80021fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800220e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2204      	movs	r2, #4
 8002216:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f867 	bl	80022fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002230:	bf00      	nop
 8002232:	3728      	adds	r7, #40	@ 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4906      	ldr	r1, [pc, #24]	@ (80023a8 <__NVIC_EnableIRQ+0x34>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	@ (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	@ (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	@ 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff90 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff2d 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff42 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff90 	bl	8002400 <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5f 	bl	80023ac <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff35 	bl	8002374 <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b08b      	sub	sp, #44	@ 0x2c
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	e169      	b.n	8002814 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002540:	2201      	movs	r2, #1
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 8158 	bne.w	800280e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a9a      	ldr	r2, [pc, #616]	@ (80027cc <HAL_GPIO_Init+0x2a0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d05e      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002568:	4a98      	ldr	r2, [pc, #608]	@ (80027cc <HAL_GPIO_Init+0x2a0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d875      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800256e:	4a98      	ldr	r2, [pc, #608]	@ (80027d0 <HAL_GPIO_Init+0x2a4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d058      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002574:	4a96      	ldr	r2, [pc, #600]	@ (80027d0 <HAL_GPIO_Init+0x2a4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d86f      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800257a:	4a96      	ldr	r2, [pc, #600]	@ (80027d4 <HAL_GPIO_Init+0x2a8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d052      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002580:	4a94      	ldr	r2, [pc, #592]	@ (80027d4 <HAL_GPIO_Init+0x2a8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d869      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002586:	4a94      	ldr	r2, [pc, #592]	@ (80027d8 <HAL_GPIO_Init+0x2ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04c      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 800258c:	4a92      	ldr	r2, [pc, #584]	@ (80027d8 <HAL_GPIO_Init+0x2ac>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d863      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002592:	4a92      	ldr	r2, [pc, #584]	@ (80027dc <HAL_GPIO_Init+0x2b0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d046      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002598:	4a90      	ldr	r2, [pc, #576]	@ (80027dc <HAL_GPIO_Init+0x2b0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d85d      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800259e:	2b12      	cmp	r3, #18
 80025a0:	d82a      	bhi.n	80025f8 <HAL_GPIO_Init+0xcc>
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d859      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 80025a6:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <HAL_GPIO_Init+0x80>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002601 	.word	0x08002601
 80025b4:	08002613 	.word	0x08002613
 80025b8:	08002655 	.word	0x08002655
 80025bc:	0800265b 	.word	0x0800265b
 80025c0:	0800265b 	.word	0x0800265b
 80025c4:	0800265b 	.word	0x0800265b
 80025c8:	0800265b 	.word	0x0800265b
 80025cc:	0800265b 	.word	0x0800265b
 80025d0:	0800265b 	.word	0x0800265b
 80025d4:	0800265b 	.word	0x0800265b
 80025d8:	0800265b 	.word	0x0800265b
 80025dc:	0800265b 	.word	0x0800265b
 80025e0:	0800265b 	.word	0x0800265b
 80025e4:	0800265b 	.word	0x0800265b
 80025e8:	0800265b 	.word	0x0800265b
 80025ec:	0800265b 	.word	0x0800265b
 80025f0:	08002609 	.word	0x08002609
 80025f4:	0800261d 	.word	0x0800261d
 80025f8:	4a79      	ldr	r2, [pc, #484]	@ (80027e0 <HAL_GPIO_Init+0x2b4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025fe:	e02c      	b.n	800265a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	623b      	str	r3, [r7, #32]
          break;
 8002606:	e029      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	3304      	adds	r3, #4
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e024      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	3308      	adds	r3, #8
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e01f      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	330c      	adds	r3, #12
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e01a      	b.n	800265c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800262e:	2304      	movs	r3, #4
 8002630:	623b      	str	r3, [r7, #32]
          break;
 8002632:	e013      	b.n	800265c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800263c:	2308      	movs	r3, #8
 800263e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	611a      	str	r2, [r3, #16]
          break;
 8002646:	e009      	b.n	800265c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002648:	2308      	movs	r3, #8
 800264a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	615a      	str	r2, [r3, #20]
          break;
 8002652:	e003      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
          break;
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x130>
          break;
 800265a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2bff      	cmp	r3, #255	@ 0xff
 8002660:	d801      	bhi.n	8002666 <HAL_GPIO_Init+0x13a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e001      	b.n	800266a <HAL_GPIO_Init+0x13e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2bff      	cmp	r3, #255	@ 0xff
 8002670:	d802      	bhi.n	8002678 <HAL_GPIO_Init+0x14c>
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	e002      	b.n	800267e <HAL_GPIO_Init+0x152>
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	3b08      	subs	r3, #8
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	210f      	movs	r1, #15
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	6a39      	ldr	r1, [r7, #32]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80b1 	beq.w	800280e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026ac:	4b4d      	ldr	r3, [pc, #308]	@ (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	@ (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b4a      	ldr	r3, [pc, #296]	@ (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026c4:	4a48      	ldr	r2, [pc, #288]	@ (80027e8 <HAL_GPIO_Init+0x2bc>)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a40      	ldr	r2, [pc, #256]	@ (80027ec <HAL_GPIO_Init+0x2c0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_GPIO_Init+0x1ec>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3f      	ldr	r2, [pc, #252]	@ (80027f0 <HAL_GPIO_Init+0x2c4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00d      	beq.n	8002714 <HAL_GPIO_Init+0x1e8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3e      	ldr	r2, [pc, #248]	@ (80027f4 <HAL_GPIO_Init+0x2c8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_Init+0x1e4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3d      	ldr	r2, [pc, #244]	@ (80027f8 <HAL_GPIO_Init+0x2cc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_GPIO_Init+0x1e0>
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 800270c:	2304      	movs	r3, #4
 800270e:	e004      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002710:	2302      	movs	r3, #2
 8002712:	e002      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002718:	2300      	movs	r3, #0
 800271a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271c:	f002 0203 	and.w	r2, r2, #3
 8002720:	0092      	lsls	r2, r2, #2
 8002722:	4093      	lsls	r3, r2
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800272a:	492f      	ldr	r1, [pc, #188]	@ (80027e8 <HAL_GPIO_Init+0x2bc>)
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002744:	4b2d      	ldr	r3, [pc, #180]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	492c      	ldr	r1, [pc, #176]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002752:	4b2a      	ldr	r3, [pc, #168]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	43db      	mvns	r3, r3
 800275a:	4928      	ldr	r1, [pc, #160]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 800275c:	4013      	ands	r3, r2
 800275e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800276c:	4b23      	ldr	r3, [pc, #140]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	4922      	ldr	r1, [pc, #136]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800277a:	4b20      	ldr	r3, [pc, #128]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	43db      	mvns	r3, r3
 8002782:	491e      	ldr	r1, [pc, #120]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 8002784:	4013      	ands	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4918      	ldr	r1, [pc, #96]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027a2:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4914      	ldr	r1, [pc, #80]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d021      	beq.n	8002800 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027bc:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	490e      	ldr	r1, [pc, #56]	@ (80027fc <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e021      	b.n	800280e <HAL_GPIO_Init+0x2e2>
 80027ca:	bf00      	nop
 80027cc:	10320000 	.word	0x10320000
 80027d0:	10310000 	.word	0x10310000
 80027d4:	10220000 	.word	0x10220000
 80027d8:	10210000 	.word	0x10210000
 80027dc:	10120000 	.word	0x10120000
 80027e0:	10110000 	.word	0x10110000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40010800 	.word	0x40010800
 80027f0:	40010c00 	.word	0x40010c00
 80027f4:	40011000 	.word	0x40011000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_GPIO_Init+0x304>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	43db      	mvns	r3, r3
 8002808:	4909      	ldr	r1, [pc, #36]	@ (8002830 <HAL_GPIO_Init+0x304>)
 800280a:	4013      	ands	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	3301      	adds	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f ae8e 	bne.w	8002540 <HAL_GPIO_Init+0x14>
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	372c      	adds	r7, #44	@ 0x2c
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e272      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8087 	beq.w	8002992 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002884:	4b92      	ldr	r3, [pc, #584]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b04      	cmp	r3, #4
 800288e:	d00c      	beq.n	80028aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002890:	4b8f      	ldr	r3, [pc, #572]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d112      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5e>
 800289c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a8:	d10b      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028aa:	4b89      	ldr	r3, [pc, #548]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d06c      	beq.n	8002990 <HAL_RCC_OscConfig+0x12c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d168      	bne.n	8002990 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e24c      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x76>
 80028cc:	4b80      	ldr	r3, [pc, #512]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e02e      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x98>
 80028e2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b78      	ldr	r3, [pc, #480]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a77      	ldr	r2, [pc, #476]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e01d      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0xbc>
 8002906:	4b72      	ldr	r3, [pc, #456]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a71      	ldr	r2, [pc, #452]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 8002920:	4b6b      	ldr	r3, [pc, #428]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b68      	ldr	r3, [pc, #416]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a67      	ldr	r2, [pc, #412]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002936:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe fe78 	bl	8001634 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe fe74 	bl	8001634 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e200      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0xe4>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe fe64 	bl	8001634 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe fe60 	bl	8001634 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	@ 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1ec      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	4b53      	ldr	r3, [pc, #332]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x10c>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d063      	beq.n	8002a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800299e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029aa:	4b49      	ldr	r3, [pc, #292]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d11c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x18c>
 80029b6:	4b46      	ldr	r3, [pc, #280]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	4b43      	ldr	r3, [pc, #268]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_RCC_OscConfig+0x176>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e1c0      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4939      	ldr	r1, [pc, #228]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	e03a      	b.n	8002a66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f8:	4b36      	ldr	r3, [pc, #216]	@ (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe fe19 	bl	8001634 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a06:	f7fe fe15 	bl	8001634 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1a1      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4927      	ldr	r1, [pc, #156]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3a:	4b26      	ldr	r3, [pc, #152]	@ (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fdf8 	bl	8001634 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a48:	f7fe fdf4 	bl	8001634 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e180      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03a      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d019      	beq.n	8002aae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fdd8 	bl	8001634 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe fdd4 	bl	8001634 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e160      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f000 face 	bl	8003048 <RCC_Delay>
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fdbe 	bl	8001634 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aba:	e00f      	b.n	8002adc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fdba 	bl	8001634 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d908      	bls.n	8002adc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e146      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	42420000 	.word	0x42420000
 8002ad8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b92      	ldr	r3, [pc, #584]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e9      	bne.n	8002abc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a6 	beq.w	8002c42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b8b      	ldr	r3, [pc, #556]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b88      	ldr	r3, [pc, #544]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a87      	ldr	r2, [pc, #540]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	61d3      	str	r3, [r2, #28]
 8002b12:	4b85      	ldr	r3, [pc, #532]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b82      	ldr	r3, [pc, #520]	@ (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7e      	ldr	r2, [pc, #504]	@ (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fd7b 	bl	8001634 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7fe fd77 	bl	8001634 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	@ 0x64
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e103      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b75      	ldr	r3, [pc, #468]	@ (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x312>
 8002b68:	4b6f      	ldr	r3, [pc, #444]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	e02d      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x334>
 8002b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a69      	ldr	r2, [pc, #420]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	4b67      	ldr	r3, [pc, #412]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a66      	ldr	r2, [pc, #408]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	e01c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCC_OscConfig+0x356>
 8002ba0:	4b61      	ldr	r3, [pc, #388]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a60      	ldr	r2, [pc, #384]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	4b5e      	ldr	r3, [pc, #376]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002bba:	4b5b      	ldr	r3, [pc, #364]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a5a      	ldr	r2, [pc, #360]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b58      	ldr	r3, [pc, #352]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a57      	ldr	r2, [pc, #348]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe fd2b 	bl	8001634 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe fd27 	bl	8001634 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0b1      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ee      	beq.n	8002be2 <HAL_RCC_OscConfig+0x37e>
 8002c04:	e014      	b.n	8002c30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fe fd15 	bl	8001634 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fd11 	bl	8001634 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e09b      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c24:	4b40      	ldr	r3, [pc, #256]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4b3c      	ldr	r3, [pc, #240]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8087 	beq.w	8002d5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4c:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d061      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d146      	bne.n	8002cee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c60:	4b33      	ldr	r3, [pc, #204]	@ (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fe fce5 	bl	8001634 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fe fce1 	bl	8001634 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e06d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c80:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c94:	d108      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c96:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4921      	ldr	r1, [pc, #132]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a19      	ldr	r1, [r3, #32]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	491b      	ldr	r1, [pc, #108]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fcb5 	bl	8001634 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe fcb1 	bl	8001634 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e03d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce0:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x46a>
 8002cec:	e035      	b.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fc9e 	bl	8001634 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe fc9a 	bl	8001634 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e026      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x498>
 8002d1a:	e01e      	b.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e019      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_OscConfig+0x500>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000

08002d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0d0      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d910      	bls.n	8002dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b67      	ldr	r3, [pc, #412]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 0207 	bic.w	r2, r3, #7
 8002d92:	4965      	ldr	r1, [pc, #404]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b63      	ldr	r3, [pc, #396]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0b8      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc4:	4b59      	ldr	r3, [pc, #356]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ddc:	4b53      	ldr	r3, [pc, #332]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002de6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b50      	ldr	r3, [pc, #320]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	494d      	ldr	r1, [pc, #308]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d040      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b47      	ldr	r3, [pc, #284]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d115      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e07f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b41      	ldr	r3, [pc, #260]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e073      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3d      	ldr	r3, [pc, #244]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06b      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4936      	ldr	r1, [pc, #216]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fbec 	bl	8001634 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe fbe8 	bl	8001634 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e053      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2d      	ldr	r3, [pc, #180]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b27      	ldr	r3, [pc, #156]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d210      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	4922      	ldr	r1, [pc, #136]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e032      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4916      	ldr	r1, [pc, #88]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	490e      	ldr	r1, [pc, #56]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ef6:	f000 f821 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	490a      	ldr	r1, [pc, #40]	@ (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	5ccb      	ldrb	r3, [r1, r3]
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x1cc>)
 8002f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f12:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HAL_RCC_ClockConfig+0x1d0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fb4a 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40022000 	.word	0x40022000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08004dec 	.word	0x08004dec
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000004 	.word	0x20000004

08002f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f56:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x30>
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x36>
 8002f6a:	e027      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f6e:	613b      	str	r3, [r7, #16]
      break;
 8002f70:	e027      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	0c9b      	lsrs	r3, r3, #18
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	4a17      	ldr	r2, [pc, #92]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d010      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f8a:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0c5b      	lsrs	r3, r3, #17
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	4a11      	ldr	r2, [pc, #68]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	fb03 f202 	mul.w	r2, r3, r2
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e004      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	613b      	str	r3, [r7, #16]
      break;
 8002fba:	e002      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fbe:	613b      	str	r3, [r7, #16]
      break;
 8002fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc2:	693b      	ldr	r3, [r7, #16]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	007a1200 	.word	0x007a1200
 8002fd8:	08004e04 	.word	0x08004e04
 8002fdc:	08004e14 	.word	0x08004e14
 8002fe0:	003d0900 	.word	0x003d0900

08002fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe8:	4b02      	ldr	r3, [pc, #8]	@ (8002ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	20000000 	.word	0x20000000

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ffc:	f7ff fff2 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4903      	ldr	r1, [pc, #12]	@ (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	08004dfc 	.word	0x08004dfc

08003020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003024:	f7ff ffde 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0adb      	lsrs	r3, r3, #11
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	@ (8003044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	08004dfc 	.word	0x08004dfc

08003048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003050:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <RCC_Delay+0x34>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <RCC_Delay+0x38>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0a5b      	lsrs	r3, r3, #9
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003064:	bf00      	nop
  }
  while (Delay --);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1e5a      	subs	r2, r3, #1
 800306a:	60fa      	str	r2, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f9      	bne.n	8003064 <RCC_Delay+0x1c>
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	20000000 	.word	0x20000000
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e041      	b.n	800311a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe f946 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f000 fa8a 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d001      	beq.n	800313c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e03a      	b.n	80031b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a18      	ldr	r2, [pc, #96]	@ (80031bc <HAL_TIM_Base_Start_IT+0x98>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00e      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x58>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003166:	d009      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x58>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a14      	ldr	r2, [pc, #80]	@ (80031c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x58>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d111      	bne.n	80031a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b06      	cmp	r3, #6
 800318c:	d010      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319e:	e007      	b.n	80031b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40000800 	.word	0x40000800

080031c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a1a      	ldr	r2, [r3, #32]
 80031e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10f      	bne.n	8003210 <HAL_TIM_Base_Stop_IT+0x48>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_Base_Stop_IT+0x48>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d020      	beq.n	8003288 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01b      	beq.n	8003288 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0202 	mvn.w	r2, #2
 8003258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f998 	bl	80035a4 <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f98b 	bl	8003592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f99a 	bl	80035b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d020      	beq.n	80032d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01b      	beq.n	80032d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0204 	mvn.w	r2, #4
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f972 	bl	80035a4 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f965 	bl	8003592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f974 	bl	80035b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d020      	beq.n	8003320 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0208 	mvn.w	r2, #8
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2204      	movs	r2, #4
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f94c 	bl	80035a4 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f93f 	bl	8003592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f94e 	bl	80035b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d020      	beq.n	800336c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0210 	mvn.w	r2, #16
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2208      	movs	r2, #8
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f926 	bl	80035a4 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f919 	bl	8003592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f928 	bl	80035b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0201 	mvn.w	r2, #1
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fefa 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa7f 	bl	80038b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8f8 	bl	80035c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0220 	mvn.w	r2, #32
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa52 	bl	80038a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIM_ConfigClockSource+0x1c>
 800341c:	2302      	movs	r3, #2
 800341e:	e0b4      	b.n	800358a <HAL_TIM_ConfigClockSource+0x186>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800343e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003458:	d03e      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0xd4>
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800345e:	f200 8087 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003466:	f000 8086 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x172>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800346e:	d87f      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b70      	cmp	r3, #112	@ 0x70
 8003472:	d01a      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0xa6>
 8003474:	2b70      	cmp	r3, #112	@ 0x70
 8003476:	d87b      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b60      	cmp	r3, #96	@ 0x60
 800347a:	d050      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x11a>
 800347c:	2b60      	cmp	r3, #96	@ 0x60
 800347e:	d877      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b50      	cmp	r3, #80	@ 0x50
 8003482:	d03c      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0xfa>
 8003484:	2b50      	cmp	r3, #80	@ 0x50
 8003486:	d873      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b40      	cmp	r3, #64	@ 0x40
 800348a:	d058      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x13a>
 800348c:	2b40      	cmp	r3, #64	@ 0x40
 800348e:	d86f      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b30      	cmp	r3, #48	@ 0x30
 8003492:	d064      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	2b30      	cmp	r3, #48	@ 0x30
 8003496:	d86b      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b20      	cmp	r3, #32
 800349a:	d060      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15a>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d867      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05c      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15a>
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d05a      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	e062      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ba:	f000 f974 	bl	80037a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	609a      	str	r2, [r3, #8]
      break;
 80034d6:	e04f      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034e8:	f000 f95d 	bl	80037a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034fa:	609a      	str	r2, [r3, #8]
      break;
 80034fc:	e03c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	461a      	mov	r2, r3
 800350c:	f000 f8d4 	bl	80036b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2150      	movs	r1, #80	@ 0x50
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f92b 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 800351c:	e02c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	461a      	mov	r2, r3
 800352c:	f000 f8f2 	bl	8003714 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2160      	movs	r1, #96	@ 0x60
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f91b 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 800353c:	e01c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	461a      	mov	r2, r3
 800354c:	f000 f8b4 	bl	80036b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2140      	movs	r1, #64	@ 0x40
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f90b 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 800355c:	e00c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 f902 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 800356e:	e003      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e000      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
	...

080035dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a2f      	ldr	r2, [pc, #188]	@ (80036ac <TIM_Base_SetConfig+0xd0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0x30>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x30>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2c      	ldr	r2, [pc, #176]	@ (80036b0 <TIM_Base_SetConfig+0xd4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x30>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a2b      	ldr	r2, [pc, #172]	@ (80036b4 <TIM_Base_SetConfig+0xd8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a22      	ldr	r2, [pc, #136]	@ (80036ac <TIM_Base_SetConfig+0xd0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0x62>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0x62>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a1f      	ldr	r2, [pc, #124]	@ (80036b0 <TIM_Base_SetConfig+0xd4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0x62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1e      	ldr	r2, [pc, #120]	@ (80036b4 <TIM_Base_SetConfig+0xd8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0d      	ldr	r2, [pc, #52]	@ (80036ac <TIM_Base_SetConfig+0xd0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d103      	bne.n	8003684 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]
  }
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800

080036b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f023 0201 	bic.w	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 030a 	bic.w	r3, r3, #10
 80036f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0210 	bic.w	r2, r3, #16
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800373e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	031b      	lsls	r3, r3, #12
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003750:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	621a      	str	r2, [r3, #32]
}
 8003768:	bf00      	nop
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	f043 0307 	orr.w	r3, r3, #7
 8003794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b087      	sub	sp, #28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	021a      	lsls	r2, r3, #8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	609a      	str	r2, [r3, #8]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e046      	b.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a16      	ldr	r2, [pc, #88]	@ (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003848:	d009      	beq.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a12      	ldr	r2, [pc, #72]	@ (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a10      	ldr	r2, [pc, #64]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d10c      	bne.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	4313      	orrs	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800

080038a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e042      	b.n	800395c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fd4a 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	@ 0x24
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f971 	bl	8003bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800391c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800392c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800393c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	@ 0x28
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	d175      	bne.n	8003a70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_UART_Transmit+0x2c>
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e06e      	b.n	8003a72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2221      	movs	r2, #33	@ 0x21
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a2:	f7fd fe47 	bl	8001634 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039bc:	d108      	bne.n	80039d0 <HAL_UART_Transmit+0x6c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e003      	b.n	80039d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d8:	e02e      	b.n	8003a38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2180      	movs	r1, #128	@ 0x80
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f848 	bl	8003a7a <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e03a      	b.n	8003a72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	3302      	adds	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e007      	b.n	8003a2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1cb      	bne.n	80039da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2140      	movs	r1, #64	@ 0x40
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f814 	bl	8003a7a <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e006      	b.n	8003a72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8a:	e03b      	b.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d037      	beq.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a94:	f7fd fdce 	bl	8001634 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	6a3a      	ldr	r2, [r7, #32]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e03a      	b.n	8003b24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d023      	beq.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b80      	cmp	r3, #128	@ 0x80
 8003ac0:	d020      	beq.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b40      	cmp	r3, #64	@ 0x40
 8003ac6:	d01d      	beq.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d116      	bne.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f81d 	bl	8003b2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2208      	movs	r2, #8
 8003af6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e00f      	b.n	8003b24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d0b4      	beq.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b095      	sub	sp, #84	@ 0x54
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b54:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e5      	bne.n	8003b34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3314      	adds	r3, #20
 8003b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3314      	adds	r3, #20
 8003b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d119      	bne.n	8003bd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f023 0310 	bic.w	r3, r3, #16
 8003bba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc4:	61ba      	str	r2, [r7, #24]
 8003bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6979      	ldr	r1, [r7, #20]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e5      	bne.n	8003ba4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003be6:	bf00      	nop
 8003be8:	3754      	adds	r7, #84	@ 0x54
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c2a:	f023 030c 	bic.w	r3, r3, #12
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <UART_SetConfig+0x114>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d103      	bne.n	8003c60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7ff f9e2 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	e002      	b.n	8003c66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7ff f9ca 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8003c64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	4a22      	ldr	r2, [pc, #136]	@ (8003d08 <UART_SetConfig+0x118>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	0119      	lsls	r1, r3, #4
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009a      	lsls	r2, r3, #2
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <UART_SetConfig+0x118>)
 8003c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2064      	movs	r0, #100	@ 0x64
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	3332      	adds	r3, #50	@ 0x32
 8003cb0:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <UART_SetConfig+0x118>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cbc:	4419      	add	r1, r3
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <UART_SetConfig+0x118>)
 8003cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2064      	movs	r0, #100	@ 0x64
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	@ 0x32
 8003ce8:	4a07      	ldr	r2, [pc, #28]	@ (8003d08 <UART_SetConfig+0x118>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013800 	.word	0x40013800
 8003d08:	51eb851f 	.word	0x51eb851f

08003d0c <sniprintf>:
 8003d0c:	b40c      	push	{r2, r3}
 8003d0e:	b530      	push	{r4, r5, lr}
 8003d10:	4b18      	ldr	r3, [pc, #96]	@ (8003d74 <sniprintf+0x68>)
 8003d12:	1e0c      	subs	r4, r1, #0
 8003d14:	681d      	ldr	r5, [r3, #0]
 8003d16:	b09d      	sub	sp, #116	@ 0x74
 8003d18:	da08      	bge.n	8003d2c <sniprintf+0x20>
 8003d1a:	238b      	movs	r3, #139	@ 0x8b
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	602b      	str	r3, [r5, #0]
 8003d22:	b01d      	add	sp, #116	@ 0x74
 8003d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d28:	b002      	add	sp, #8
 8003d2a:	4770      	bx	lr
 8003d2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003d30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003d3a:	bf0c      	ite	eq
 8003d3c:	4623      	moveq	r3, r4
 8003d3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d42:	9304      	str	r3, [sp, #16]
 8003d44:	9307      	str	r3, [sp, #28]
 8003d46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d4a:	9002      	str	r0, [sp, #8]
 8003d4c:	9006      	str	r0, [sp, #24]
 8003d4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d52:	4628      	mov	r0, r5
 8003d54:	ab21      	add	r3, sp, #132	@ 0x84
 8003d56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003d58:	a902      	add	r1, sp, #8
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	f000 f9a0 	bl	80040a0 <_svfiprintf_r>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	bfbc      	itt	lt
 8003d64:	238b      	movlt	r3, #139	@ 0x8b
 8003d66:	602b      	strlt	r3, [r5, #0]
 8003d68:	2c00      	cmp	r4, #0
 8003d6a:	d0da      	beq.n	8003d22 <sniprintf+0x16>
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e7d6      	b.n	8003d22 <sniprintf+0x16>
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <memset>:
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4402      	add	r2, r0
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d100      	bne.n	8003d82 <memset+0xa>
 8003d80:	4770      	bx	lr
 8003d82:	f803 1b01 	strb.w	r1, [r3], #1
 8003d86:	e7f9      	b.n	8003d7c <memset+0x4>

08003d88 <__errno>:
 8003d88:	4b01      	ldr	r3, [pc, #4]	@ (8003d90 <__errno+0x8>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	2000000c 	.word	0x2000000c

08003d94 <__libc_init_array>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	2600      	movs	r6, #0
 8003d98:	4d0c      	ldr	r5, [pc, #48]	@ (8003dcc <__libc_init_array+0x38>)
 8003d9a:	4c0d      	ldr	r4, [pc, #52]	@ (8003dd0 <__libc_init_array+0x3c>)
 8003d9c:	1b64      	subs	r4, r4, r5
 8003d9e:	10a4      	asrs	r4, r4, #2
 8003da0:	42a6      	cmp	r6, r4
 8003da2:	d109      	bne.n	8003db8 <__libc_init_array+0x24>
 8003da4:	f000 fc76 	bl	8004694 <_init>
 8003da8:	2600      	movs	r6, #0
 8003daa:	4d0a      	ldr	r5, [pc, #40]	@ (8003dd4 <__libc_init_array+0x40>)
 8003dac:	4c0a      	ldr	r4, [pc, #40]	@ (8003dd8 <__libc_init_array+0x44>)
 8003dae:	1b64      	subs	r4, r4, r5
 8003db0:	10a4      	asrs	r4, r4, #2
 8003db2:	42a6      	cmp	r6, r4
 8003db4:	d105      	bne.n	8003dc2 <__libc_init_array+0x2e>
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dbc:	4798      	blx	r3
 8003dbe:	3601      	adds	r6, #1
 8003dc0:	e7ee      	b.n	8003da0 <__libc_init_array+0xc>
 8003dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc6:	4798      	blx	r3
 8003dc8:	3601      	adds	r6, #1
 8003dca:	e7f2      	b.n	8003db2 <__libc_init_array+0x1e>
 8003dcc:	08004e54 	.word	0x08004e54
 8003dd0:	08004e54 	.word	0x08004e54
 8003dd4:	08004e54 	.word	0x08004e54
 8003dd8:	08004e58 	.word	0x08004e58

08003ddc <__retarget_lock_acquire_recursive>:
 8003ddc:	4770      	bx	lr

08003dde <__retarget_lock_release_recursive>:
 8003dde:	4770      	bx	lr

08003de0 <memcpy>:
 8003de0:	440a      	add	r2, r1
 8003de2:	4291      	cmp	r1, r2
 8003de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003de8:	d100      	bne.n	8003dec <memcpy+0xc>
 8003dea:	4770      	bx	lr
 8003dec:	b510      	push	{r4, lr}
 8003dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003df2:	4291      	cmp	r1, r2
 8003df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003df8:	d1f9      	bne.n	8003dee <memcpy+0xe>
 8003dfa:	bd10      	pop	{r4, pc}

08003dfc <_free_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4605      	mov	r5, r0
 8003e00:	2900      	cmp	r1, #0
 8003e02:	d040      	beq.n	8003e86 <_free_r+0x8a>
 8003e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e08:	1f0c      	subs	r4, r1, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bfb8      	it	lt
 8003e0e:	18e4      	addlt	r4, r4, r3
 8003e10:	f000 f8de 	bl	8003fd0 <__malloc_lock>
 8003e14:	4a1c      	ldr	r2, [pc, #112]	@ (8003e88 <_free_r+0x8c>)
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	b933      	cbnz	r3, 8003e28 <_free_r+0x2c>
 8003e1a:	6063      	str	r3, [r4, #4]
 8003e1c:	6014      	str	r4, [r2, #0]
 8003e1e:	4628      	mov	r0, r5
 8003e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e24:	f000 b8da 	b.w	8003fdc <__malloc_unlock>
 8003e28:	42a3      	cmp	r3, r4
 8003e2a:	d908      	bls.n	8003e3e <_free_r+0x42>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	1821      	adds	r1, r4, r0
 8003e30:	428b      	cmp	r3, r1
 8003e32:	bf01      	itttt	eq
 8003e34:	6819      	ldreq	r1, [r3, #0]
 8003e36:	685b      	ldreq	r3, [r3, #4]
 8003e38:	1809      	addeq	r1, r1, r0
 8003e3a:	6021      	streq	r1, [r4, #0]
 8003e3c:	e7ed      	b.n	8003e1a <_free_r+0x1e>
 8003e3e:	461a      	mov	r2, r3
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	b10b      	cbz	r3, 8003e48 <_free_r+0x4c>
 8003e44:	42a3      	cmp	r3, r4
 8003e46:	d9fa      	bls.n	8003e3e <_free_r+0x42>
 8003e48:	6811      	ldr	r1, [r2, #0]
 8003e4a:	1850      	adds	r0, r2, r1
 8003e4c:	42a0      	cmp	r0, r4
 8003e4e:	d10b      	bne.n	8003e68 <_free_r+0x6c>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	4401      	add	r1, r0
 8003e54:	1850      	adds	r0, r2, r1
 8003e56:	4283      	cmp	r3, r0
 8003e58:	6011      	str	r1, [r2, #0]
 8003e5a:	d1e0      	bne.n	8003e1e <_free_r+0x22>
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4408      	add	r0, r1
 8003e62:	6010      	str	r0, [r2, #0]
 8003e64:	6053      	str	r3, [r2, #4]
 8003e66:	e7da      	b.n	8003e1e <_free_r+0x22>
 8003e68:	d902      	bls.n	8003e70 <_free_r+0x74>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	e7d6      	b.n	8003e1e <_free_r+0x22>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	1821      	adds	r1, r4, r0
 8003e74:	428b      	cmp	r3, r1
 8003e76:	bf01      	itttt	eq
 8003e78:	6819      	ldreq	r1, [r3, #0]
 8003e7a:	685b      	ldreq	r3, [r3, #4]
 8003e7c:	1809      	addeq	r1, r1, r0
 8003e7e:	6021      	streq	r1, [r4, #0]
 8003e80:	6063      	str	r3, [r4, #4]
 8003e82:	6054      	str	r4, [r2, #4]
 8003e84:	e7cb      	b.n	8003e1e <_free_r+0x22>
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	20000bac 	.word	0x20000bac

08003e8c <sbrk_aligned>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8003ecc <sbrk_aligned+0x40>)
 8003e90:	460c      	mov	r4, r1
 8003e92:	6831      	ldr	r1, [r6, #0]
 8003e94:	4605      	mov	r5, r0
 8003e96:	b911      	cbnz	r1, 8003e9e <sbrk_aligned+0x12>
 8003e98:	f000 fba8 	bl	80045ec <_sbrk_r>
 8003e9c:	6030      	str	r0, [r6, #0]
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f000 fba3 	bl	80045ec <_sbrk_r>
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	d103      	bne.n	8003eb2 <sbrk_aligned+0x26>
 8003eaa:	f04f 34ff 	mov.w	r4, #4294967295
 8003eae:	4620      	mov	r0, r4
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}
 8003eb2:	1cc4      	adds	r4, r0, #3
 8003eb4:	f024 0403 	bic.w	r4, r4, #3
 8003eb8:	42a0      	cmp	r0, r4
 8003eba:	d0f8      	beq.n	8003eae <sbrk_aligned+0x22>
 8003ebc:	1a21      	subs	r1, r4, r0
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 fb94 	bl	80045ec <_sbrk_r>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d1f2      	bne.n	8003eae <sbrk_aligned+0x22>
 8003ec8:	e7ef      	b.n	8003eaa <sbrk_aligned+0x1e>
 8003eca:	bf00      	nop
 8003ecc:	20000ba8 	.word	0x20000ba8

08003ed0 <_malloc_r>:
 8003ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed4:	1ccd      	adds	r5, r1, #3
 8003ed6:	f025 0503 	bic.w	r5, r5, #3
 8003eda:	3508      	adds	r5, #8
 8003edc:	2d0c      	cmp	r5, #12
 8003ede:	bf38      	it	cc
 8003ee0:	250c      	movcc	r5, #12
 8003ee2:	2d00      	cmp	r5, #0
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	db01      	blt.n	8003eec <_malloc_r+0x1c>
 8003ee8:	42a9      	cmp	r1, r5
 8003eea:	d904      	bls.n	8003ef6 <_malloc_r+0x26>
 8003eec:	230c      	movs	r3, #12
 8003eee:	6033      	str	r3, [r6, #0]
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fcc <_malloc_r+0xfc>
 8003efa:	f000 f869 	bl	8003fd0 <__malloc_lock>
 8003efe:	f8d8 3000 	ldr.w	r3, [r8]
 8003f02:	461c      	mov	r4, r3
 8003f04:	bb44      	cbnz	r4, 8003f58 <_malloc_r+0x88>
 8003f06:	4629      	mov	r1, r5
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f7ff ffbf 	bl	8003e8c <sbrk_aligned>
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	4604      	mov	r4, r0
 8003f12:	d158      	bne.n	8003fc6 <_malloc_r+0xf6>
 8003f14:	f8d8 4000 	ldr.w	r4, [r8]
 8003f18:	4627      	mov	r7, r4
 8003f1a:	2f00      	cmp	r7, #0
 8003f1c:	d143      	bne.n	8003fa6 <_malloc_r+0xd6>
 8003f1e:	2c00      	cmp	r4, #0
 8003f20:	d04b      	beq.n	8003fba <_malloc_r+0xea>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	4639      	mov	r1, r7
 8003f26:	4630      	mov	r0, r6
 8003f28:	eb04 0903 	add.w	r9, r4, r3
 8003f2c:	f000 fb5e 	bl	80045ec <_sbrk_r>
 8003f30:	4581      	cmp	r9, r0
 8003f32:	d142      	bne.n	8003fba <_malloc_r+0xea>
 8003f34:	6821      	ldr	r1, [r4, #0]
 8003f36:	4630      	mov	r0, r6
 8003f38:	1a6d      	subs	r5, r5, r1
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7ff ffa6 	bl	8003e8c <sbrk_aligned>
 8003f40:	3001      	adds	r0, #1
 8003f42:	d03a      	beq.n	8003fba <_malloc_r+0xea>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	442b      	add	r3, r5
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	bb62      	cbnz	r2, 8003fac <_malloc_r+0xdc>
 8003f52:	f8c8 7000 	str.w	r7, [r8]
 8003f56:	e00f      	b.n	8003f78 <_malloc_r+0xa8>
 8003f58:	6822      	ldr	r2, [r4, #0]
 8003f5a:	1b52      	subs	r2, r2, r5
 8003f5c:	d420      	bmi.n	8003fa0 <_malloc_r+0xd0>
 8003f5e:	2a0b      	cmp	r2, #11
 8003f60:	d917      	bls.n	8003f92 <_malloc_r+0xc2>
 8003f62:	1961      	adds	r1, r4, r5
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	6025      	str	r5, [r4, #0]
 8003f68:	bf18      	it	ne
 8003f6a:	6059      	strne	r1, [r3, #4]
 8003f6c:	6863      	ldr	r3, [r4, #4]
 8003f6e:	bf08      	it	eq
 8003f70:	f8c8 1000 	streq.w	r1, [r8]
 8003f74:	5162      	str	r2, [r4, r5]
 8003f76:	604b      	str	r3, [r1, #4]
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f000 f82f 	bl	8003fdc <__malloc_unlock>
 8003f7e:	f104 000b 	add.w	r0, r4, #11
 8003f82:	1d23      	adds	r3, r4, #4
 8003f84:	f020 0007 	bic.w	r0, r0, #7
 8003f88:	1ac2      	subs	r2, r0, r3
 8003f8a:	bf1c      	itt	ne
 8003f8c:	1a1b      	subne	r3, r3, r0
 8003f8e:	50a3      	strne	r3, [r4, r2]
 8003f90:	e7af      	b.n	8003ef2 <_malloc_r+0x22>
 8003f92:	6862      	ldr	r2, [r4, #4]
 8003f94:	42a3      	cmp	r3, r4
 8003f96:	bf0c      	ite	eq
 8003f98:	f8c8 2000 	streq.w	r2, [r8]
 8003f9c:	605a      	strne	r2, [r3, #4]
 8003f9e:	e7eb      	b.n	8003f78 <_malloc_r+0xa8>
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	6864      	ldr	r4, [r4, #4]
 8003fa4:	e7ae      	b.n	8003f04 <_malloc_r+0x34>
 8003fa6:	463c      	mov	r4, r7
 8003fa8:	687f      	ldr	r7, [r7, #4]
 8003faa:	e7b6      	b.n	8003f1a <_malloc_r+0x4a>
 8003fac:	461a      	mov	r2, r3
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	42a3      	cmp	r3, r4
 8003fb2:	d1fb      	bne.n	8003fac <_malloc_r+0xdc>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	6053      	str	r3, [r2, #4]
 8003fb8:	e7de      	b.n	8003f78 <_malloc_r+0xa8>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	6033      	str	r3, [r6, #0]
 8003fc0:	f000 f80c 	bl	8003fdc <__malloc_unlock>
 8003fc4:	e794      	b.n	8003ef0 <_malloc_r+0x20>
 8003fc6:	6005      	str	r5, [r0, #0]
 8003fc8:	e7d6      	b.n	8003f78 <_malloc_r+0xa8>
 8003fca:	bf00      	nop
 8003fcc:	20000bac 	.word	0x20000bac

08003fd0 <__malloc_lock>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	@ (8003fd8 <__malloc_lock+0x8>)
 8003fd2:	f7ff bf03 	b.w	8003ddc <__retarget_lock_acquire_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	20000ba4 	.word	0x20000ba4

08003fdc <__malloc_unlock>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	@ (8003fe4 <__malloc_unlock+0x8>)
 8003fde:	f7ff befe 	b.w	8003dde <__retarget_lock_release_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20000ba4 	.word	0x20000ba4

08003fe8 <__ssputs_r>:
 8003fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	461f      	mov	r7, r3
 8003fee:	688e      	ldr	r6, [r1, #8]
 8003ff0:	4682      	mov	sl, r0
 8003ff2:	42be      	cmp	r6, r7
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	680b      	ldr	r3, [r1, #0]
 8003ffa:	d82d      	bhi.n	8004058 <__ssputs_r+0x70>
 8003ffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004000:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004004:	d026      	beq.n	8004054 <__ssputs_r+0x6c>
 8004006:	6965      	ldr	r5, [r4, #20]
 8004008:	6909      	ldr	r1, [r1, #16]
 800400a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800400e:	eba3 0901 	sub.w	r9, r3, r1
 8004012:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004016:	1c7b      	adds	r3, r7, #1
 8004018:	444b      	add	r3, r9
 800401a:	106d      	asrs	r5, r5, #1
 800401c:	429d      	cmp	r5, r3
 800401e:	bf38      	it	cc
 8004020:	461d      	movcc	r5, r3
 8004022:	0553      	lsls	r3, r2, #21
 8004024:	d527      	bpl.n	8004076 <__ssputs_r+0x8e>
 8004026:	4629      	mov	r1, r5
 8004028:	f7ff ff52 	bl	8003ed0 <_malloc_r>
 800402c:	4606      	mov	r6, r0
 800402e:	b360      	cbz	r0, 800408a <__ssputs_r+0xa2>
 8004030:	464a      	mov	r2, r9
 8004032:	6921      	ldr	r1, [r4, #16]
 8004034:	f7ff fed4 	bl	8003de0 <memcpy>
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800403e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	6126      	str	r6, [r4, #16]
 8004046:	444e      	add	r6, r9
 8004048:	6026      	str	r6, [r4, #0]
 800404a:	463e      	mov	r6, r7
 800404c:	6165      	str	r5, [r4, #20]
 800404e:	eba5 0509 	sub.w	r5, r5, r9
 8004052:	60a5      	str	r5, [r4, #8]
 8004054:	42be      	cmp	r6, r7
 8004056:	d900      	bls.n	800405a <__ssputs_r+0x72>
 8004058:	463e      	mov	r6, r7
 800405a:	4632      	mov	r2, r6
 800405c:	4641      	mov	r1, r8
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	f000 faaa 	bl	80045b8 <memmove>
 8004064:	2000      	movs	r0, #0
 8004066:	68a3      	ldr	r3, [r4, #8]
 8004068:	1b9b      	subs	r3, r3, r6
 800406a:	60a3      	str	r3, [r4, #8]
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	4433      	add	r3, r6
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004076:	462a      	mov	r2, r5
 8004078:	f000 fad6 	bl	8004628 <_realloc_r>
 800407c:	4606      	mov	r6, r0
 800407e:	2800      	cmp	r0, #0
 8004080:	d1e0      	bne.n	8004044 <__ssputs_r+0x5c>
 8004082:	4650      	mov	r0, sl
 8004084:	6921      	ldr	r1, [r4, #16]
 8004086:	f7ff feb9 	bl	8003dfc <_free_r>
 800408a:	230c      	movs	r3, #12
 800408c:	f8ca 3000 	str.w	r3, [sl]
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f04f 30ff 	mov.w	r0, #4294967295
 8004096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	e7e9      	b.n	8004072 <__ssputs_r+0x8a>
	...

080040a0 <_svfiprintf_r>:
 80040a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a4:	4698      	mov	r8, r3
 80040a6:	898b      	ldrh	r3, [r1, #12]
 80040a8:	4607      	mov	r7, r0
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	460d      	mov	r5, r1
 80040ae:	4614      	mov	r4, r2
 80040b0:	b09d      	sub	sp, #116	@ 0x74
 80040b2:	d510      	bpl.n	80040d6 <_svfiprintf_r+0x36>
 80040b4:	690b      	ldr	r3, [r1, #16]
 80040b6:	b973      	cbnz	r3, 80040d6 <_svfiprintf_r+0x36>
 80040b8:	2140      	movs	r1, #64	@ 0x40
 80040ba:	f7ff ff09 	bl	8003ed0 <_malloc_r>
 80040be:	6028      	str	r0, [r5, #0]
 80040c0:	6128      	str	r0, [r5, #16]
 80040c2:	b930      	cbnz	r0, 80040d2 <_svfiprintf_r+0x32>
 80040c4:	230c      	movs	r3, #12
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	b01d      	add	sp, #116	@ 0x74
 80040ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d2:	2340      	movs	r3, #64	@ 0x40
 80040d4:	616b      	str	r3, [r5, #20]
 80040d6:	2300      	movs	r3, #0
 80040d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040da:	2320      	movs	r3, #32
 80040dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040e0:	2330      	movs	r3, #48	@ 0x30
 80040e2:	f04f 0901 	mov.w	r9, #1
 80040e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004284 <_svfiprintf_r+0x1e4>
 80040ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040f2:	4623      	mov	r3, r4
 80040f4:	469a      	mov	sl, r3
 80040f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040fa:	b10a      	cbz	r2, 8004100 <_svfiprintf_r+0x60>
 80040fc:	2a25      	cmp	r2, #37	@ 0x25
 80040fe:	d1f9      	bne.n	80040f4 <_svfiprintf_r+0x54>
 8004100:	ebba 0b04 	subs.w	fp, sl, r4
 8004104:	d00b      	beq.n	800411e <_svfiprintf_r+0x7e>
 8004106:	465b      	mov	r3, fp
 8004108:	4622      	mov	r2, r4
 800410a:	4629      	mov	r1, r5
 800410c:	4638      	mov	r0, r7
 800410e:	f7ff ff6b 	bl	8003fe8 <__ssputs_r>
 8004112:	3001      	adds	r0, #1
 8004114:	f000 80a7 	beq.w	8004266 <_svfiprintf_r+0x1c6>
 8004118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800411a:	445a      	add	r2, fp
 800411c:	9209      	str	r2, [sp, #36]	@ 0x24
 800411e:	f89a 3000 	ldrb.w	r3, [sl]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 809f 	beq.w	8004266 <_svfiprintf_r+0x1c6>
 8004128:	2300      	movs	r3, #0
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004132:	f10a 0a01 	add.w	sl, sl, #1
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	9307      	str	r3, [sp, #28]
 800413a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800413e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004140:	4654      	mov	r4, sl
 8004142:	2205      	movs	r2, #5
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	484e      	ldr	r0, [pc, #312]	@ (8004284 <_svfiprintf_r+0x1e4>)
 800414a:	f000 fa5f 	bl	800460c <memchr>
 800414e:	9a04      	ldr	r2, [sp, #16]
 8004150:	b9d8      	cbnz	r0, 800418a <_svfiprintf_r+0xea>
 8004152:	06d0      	lsls	r0, r2, #27
 8004154:	bf44      	itt	mi
 8004156:	2320      	movmi	r3, #32
 8004158:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800415c:	0711      	lsls	r1, r2, #28
 800415e:	bf44      	itt	mi
 8004160:	232b      	movmi	r3, #43	@ 0x2b
 8004162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004166:	f89a 3000 	ldrb.w	r3, [sl]
 800416a:	2b2a      	cmp	r3, #42	@ 0x2a
 800416c:	d015      	beq.n	800419a <_svfiprintf_r+0xfa>
 800416e:	4654      	mov	r4, sl
 8004170:	2000      	movs	r0, #0
 8004172:	f04f 0c0a 	mov.w	ip, #10
 8004176:	9a07      	ldr	r2, [sp, #28]
 8004178:	4621      	mov	r1, r4
 800417a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800417e:	3b30      	subs	r3, #48	@ 0x30
 8004180:	2b09      	cmp	r3, #9
 8004182:	d94b      	bls.n	800421c <_svfiprintf_r+0x17c>
 8004184:	b1b0      	cbz	r0, 80041b4 <_svfiprintf_r+0x114>
 8004186:	9207      	str	r2, [sp, #28]
 8004188:	e014      	b.n	80041b4 <_svfiprintf_r+0x114>
 800418a:	eba0 0308 	sub.w	r3, r0, r8
 800418e:	fa09 f303 	lsl.w	r3, r9, r3
 8004192:	4313      	orrs	r3, r2
 8004194:	46a2      	mov	sl, r4
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	e7d2      	b.n	8004140 <_svfiprintf_r+0xa0>
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	1d19      	adds	r1, r3, #4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	9103      	str	r1, [sp, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bfbb      	ittet	lt
 80041a6:	425b      	neglt	r3, r3
 80041a8:	f042 0202 	orrlt.w	r2, r2, #2
 80041ac:	9307      	strge	r3, [sp, #28]
 80041ae:	9307      	strlt	r3, [sp, #28]
 80041b0:	bfb8      	it	lt
 80041b2:	9204      	strlt	r2, [sp, #16]
 80041b4:	7823      	ldrb	r3, [r4, #0]
 80041b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80041b8:	d10a      	bne.n	80041d0 <_svfiprintf_r+0x130>
 80041ba:	7863      	ldrb	r3, [r4, #1]
 80041bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80041be:	d132      	bne.n	8004226 <_svfiprintf_r+0x186>
 80041c0:	9b03      	ldr	r3, [sp, #12]
 80041c2:	3402      	adds	r4, #2
 80041c4:	1d1a      	adds	r2, r3, #4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	9203      	str	r2, [sp, #12]
 80041ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041ce:	9305      	str	r3, [sp, #20]
 80041d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004288 <_svfiprintf_r+0x1e8>
 80041d4:	2203      	movs	r2, #3
 80041d6:	4650      	mov	r0, sl
 80041d8:	7821      	ldrb	r1, [r4, #0]
 80041da:	f000 fa17 	bl	800460c <memchr>
 80041de:	b138      	cbz	r0, 80041f0 <_svfiprintf_r+0x150>
 80041e0:	2240      	movs	r2, #64	@ 0x40
 80041e2:	9b04      	ldr	r3, [sp, #16]
 80041e4:	eba0 000a 	sub.w	r0, r0, sl
 80041e8:	4082      	lsls	r2, r0
 80041ea:	4313      	orrs	r3, r2
 80041ec:	3401      	adds	r4, #1
 80041ee:	9304      	str	r3, [sp, #16]
 80041f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f4:	2206      	movs	r2, #6
 80041f6:	4825      	ldr	r0, [pc, #148]	@ (800428c <_svfiprintf_r+0x1ec>)
 80041f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041fc:	f000 fa06 	bl	800460c <memchr>
 8004200:	2800      	cmp	r0, #0
 8004202:	d036      	beq.n	8004272 <_svfiprintf_r+0x1d2>
 8004204:	4b22      	ldr	r3, [pc, #136]	@ (8004290 <_svfiprintf_r+0x1f0>)
 8004206:	bb1b      	cbnz	r3, 8004250 <_svfiprintf_r+0x1b0>
 8004208:	9b03      	ldr	r3, [sp, #12]
 800420a:	3307      	adds	r3, #7
 800420c:	f023 0307 	bic.w	r3, r3, #7
 8004210:	3308      	adds	r3, #8
 8004212:	9303      	str	r3, [sp, #12]
 8004214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004216:	4433      	add	r3, r6
 8004218:	9309      	str	r3, [sp, #36]	@ 0x24
 800421a:	e76a      	b.n	80040f2 <_svfiprintf_r+0x52>
 800421c:	460c      	mov	r4, r1
 800421e:	2001      	movs	r0, #1
 8004220:	fb0c 3202 	mla	r2, ip, r2, r3
 8004224:	e7a8      	b.n	8004178 <_svfiprintf_r+0xd8>
 8004226:	2300      	movs	r3, #0
 8004228:	f04f 0c0a 	mov.w	ip, #10
 800422c:	4619      	mov	r1, r3
 800422e:	3401      	adds	r4, #1
 8004230:	9305      	str	r3, [sp, #20]
 8004232:	4620      	mov	r0, r4
 8004234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004238:	3a30      	subs	r2, #48	@ 0x30
 800423a:	2a09      	cmp	r2, #9
 800423c:	d903      	bls.n	8004246 <_svfiprintf_r+0x1a6>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0c6      	beq.n	80041d0 <_svfiprintf_r+0x130>
 8004242:	9105      	str	r1, [sp, #20]
 8004244:	e7c4      	b.n	80041d0 <_svfiprintf_r+0x130>
 8004246:	4604      	mov	r4, r0
 8004248:	2301      	movs	r3, #1
 800424a:	fb0c 2101 	mla	r1, ip, r1, r2
 800424e:	e7f0      	b.n	8004232 <_svfiprintf_r+0x192>
 8004250:	ab03      	add	r3, sp, #12
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	462a      	mov	r2, r5
 8004256:	4638      	mov	r0, r7
 8004258:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <_svfiprintf_r+0x1f4>)
 800425a:	a904      	add	r1, sp, #16
 800425c:	f3af 8000 	nop.w
 8004260:	1c42      	adds	r2, r0, #1
 8004262:	4606      	mov	r6, r0
 8004264:	d1d6      	bne.n	8004214 <_svfiprintf_r+0x174>
 8004266:	89ab      	ldrh	r3, [r5, #12]
 8004268:	065b      	lsls	r3, r3, #25
 800426a:	f53f af2d 	bmi.w	80040c8 <_svfiprintf_r+0x28>
 800426e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004270:	e72c      	b.n	80040cc <_svfiprintf_r+0x2c>
 8004272:	ab03      	add	r3, sp, #12
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	462a      	mov	r2, r5
 8004278:	4638      	mov	r0, r7
 800427a:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <_svfiprintf_r+0x1f4>)
 800427c:	a904      	add	r1, sp, #16
 800427e:	f000 f87d 	bl	800437c <_printf_i>
 8004282:	e7ed      	b.n	8004260 <_svfiprintf_r+0x1c0>
 8004284:	08004e16 	.word	0x08004e16
 8004288:	08004e1c 	.word	0x08004e1c
 800428c:	08004e20 	.word	0x08004e20
 8004290:	00000000 	.word	0x00000000
 8004294:	08003fe9 	.word	0x08003fe9

08004298 <_printf_common>:
 8004298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	4616      	mov	r6, r2
 800429e:	4698      	mov	r8, r3
 80042a0:	688a      	ldr	r2, [r1, #8]
 80042a2:	690b      	ldr	r3, [r1, #16]
 80042a4:	4607      	mov	r7, r0
 80042a6:	4293      	cmp	r3, r2
 80042a8:	bfb8      	it	lt
 80042aa:	4613      	movlt	r3, r2
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042b2:	460c      	mov	r4, r1
 80042b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042b8:	b10a      	cbz	r2, 80042be <_printf_common+0x26>
 80042ba:	3301      	adds	r3, #1
 80042bc:	6033      	str	r3, [r6, #0]
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	0699      	lsls	r1, r3, #26
 80042c2:	bf42      	ittt	mi
 80042c4:	6833      	ldrmi	r3, [r6, #0]
 80042c6:	3302      	addmi	r3, #2
 80042c8:	6033      	strmi	r3, [r6, #0]
 80042ca:	6825      	ldr	r5, [r4, #0]
 80042cc:	f015 0506 	ands.w	r5, r5, #6
 80042d0:	d106      	bne.n	80042e0 <_printf_common+0x48>
 80042d2:	f104 0a19 	add.w	sl, r4, #25
 80042d6:	68e3      	ldr	r3, [r4, #12]
 80042d8:	6832      	ldr	r2, [r6, #0]
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	42ab      	cmp	r3, r5
 80042de:	dc2b      	bgt.n	8004338 <_printf_common+0xa0>
 80042e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	3b00      	subs	r3, #0
 80042e8:	bf18      	it	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	0692      	lsls	r2, r2, #26
 80042ee:	d430      	bmi.n	8004352 <_printf_common+0xba>
 80042f0:	4641      	mov	r1, r8
 80042f2:	4638      	mov	r0, r7
 80042f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042f8:	47c8      	blx	r9
 80042fa:	3001      	adds	r0, #1
 80042fc:	d023      	beq.n	8004346 <_printf_common+0xae>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	6922      	ldr	r2, [r4, #16]
 8004302:	f003 0306 	and.w	r3, r3, #6
 8004306:	2b04      	cmp	r3, #4
 8004308:	bf14      	ite	ne
 800430a:	2500      	movne	r5, #0
 800430c:	6833      	ldreq	r3, [r6, #0]
 800430e:	f04f 0600 	mov.w	r6, #0
 8004312:	bf08      	it	eq
 8004314:	68e5      	ldreq	r5, [r4, #12]
 8004316:	f104 041a 	add.w	r4, r4, #26
 800431a:	bf08      	it	eq
 800431c:	1aed      	subeq	r5, r5, r3
 800431e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004322:	bf08      	it	eq
 8004324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004328:	4293      	cmp	r3, r2
 800432a:	bfc4      	itt	gt
 800432c:	1a9b      	subgt	r3, r3, r2
 800432e:	18ed      	addgt	r5, r5, r3
 8004330:	42b5      	cmp	r5, r6
 8004332:	d11a      	bne.n	800436a <_printf_common+0xd2>
 8004334:	2000      	movs	r0, #0
 8004336:	e008      	b.n	800434a <_printf_common+0xb2>
 8004338:	2301      	movs	r3, #1
 800433a:	4652      	mov	r2, sl
 800433c:	4641      	mov	r1, r8
 800433e:	4638      	mov	r0, r7
 8004340:	47c8      	blx	r9
 8004342:	3001      	adds	r0, #1
 8004344:	d103      	bne.n	800434e <_printf_common+0xb6>
 8004346:	f04f 30ff 	mov.w	r0, #4294967295
 800434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434e:	3501      	adds	r5, #1
 8004350:	e7c1      	b.n	80042d6 <_printf_common+0x3e>
 8004352:	2030      	movs	r0, #48	@ 0x30
 8004354:	18e1      	adds	r1, r4, r3
 8004356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004360:	4422      	add	r2, r4
 8004362:	3302      	adds	r3, #2
 8004364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004368:	e7c2      	b.n	80042f0 <_printf_common+0x58>
 800436a:	2301      	movs	r3, #1
 800436c:	4622      	mov	r2, r4
 800436e:	4641      	mov	r1, r8
 8004370:	4638      	mov	r0, r7
 8004372:	47c8      	blx	r9
 8004374:	3001      	adds	r0, #1
 8004376:	d0e6      	beq.n	8004346 <_printf_common+0xae>
 8004378:	3601      	adds	r6, #1
 800437a:	e7d9      	b.n	8004330 <_printf_common+0x98>

0800437c <_printf_i>:
 800437c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004380:	7e0f      	ldrb	r7, [r1, #24]
 8004382:	4691      	mov	r9, r2
 8004384:	2f78      	cmp	r7, #120	@ 0x78
 8004386:	4680      	mov	r8, r0
 8004388:	460c      	mov	r4, r1
 800438a:	469a      	mov	sl, r3
 800438c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800438e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004392:	d807      	bhi.n	80043a4 <_printf_i+0x28>
 8004394:	2f62      	cmp	r7, #98	@ 0x62
 8004396:	d80a      	bhi.n	80043ae <_printf_i+0x32>
 8004398:	2f00      	cmp	r7, #0
 800439a:	f000 80d1 	beq.w	8004540 <_printf_i+0x1c4>
 800439e:	2f58      	cmp	r7, #88	@ 0x58
 80043a0:	f000 80b8 	beq.w	8004514 <_printf_i+0x198>
 80043a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043ac:	e03a      	b.n	8004424 <_printf_i+0xa8>
 80043ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043b2:	2b15      	cmp	r3, #21
 80043b4:	d8f6      	bhi.n	80043a4 <_printf_i+0x28>
 80043b6:	a101      	add	r1, pc, #4	@ (adr r1, 80043bc <_printf_i+0x40>)
 80043b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043bc:	08004415 	.word	0x08004415
 80043c0:	08004429 	.word	0x08004429
 80043c4:	080043a5 	.word	0x080043a5
 80043c8:	080043a5 	.word	0x080043a5
 80043cc:	080043a5 	.word	0x080043a5
 80043d0:	080043a5 	.word	0x080043a5
 80043d4:	08004429 	.word	0x08004429
 80043d8:	080043a5 	.word	0x080043a5
 80043dc:	080043a5 	.word	0x080043a5
 80043e0:	080043a5 	.word	0x080043a5
 80043e4:	080043a5 	.word	0x080043a5
 80043e8:	08004527 	.word	0x08004527
 80043ec:	08004453 	.word	0x08004453
 80043f0:	080044e1 	.word	0x080044e1
 80043f4:	080043a5 	.word	0x080043a5
 80043f8:	080043a5 	.word	0x080043a5
 80043fc:	08004549 	.word	0x08004549
 8004400:	080043a5 	.word	0x080043a5
 8004404:	08004453 	.word	0x08004453
 8004408:	080043a5 	.word	0x080043a5
 800440c:	080043a5 	.word	0x080043a5
 8004410:	080044e9 	.word	0x080044e9
 8004414:	6833      	ldr	r3, [r6, #0]
 8004416:	1d1a      	adds	r2, r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6032      	str	r2, [r6, #0]
 800441c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004424:	2301      	movs	r3, #1
 8004426:	e09c      	b.n	8004562 <_printf_i+0x1e6>
 8004428:	6833      	ldr	r3, [r6, #0]
 800442a:	6820      	ldr	r0, [r4, #0]
 800442c:	1d19      	adds	r1, r3, #4
 800442e:	6031      	str	r1, [r6, #0]
 8004430:	0606      	lsls	r6, r0, #24
 8004432:	d501      	bpl.n	8004438 <_printf_i+0xbc>
 8004434:	681d      	ldr	r5, [r3, #0]
 8004436:	e003      	b.n	8004440 <_printf_i+0xc4>
 8004438:	0645      	lsls	r5, r0, #25
 800443a:	d5fb      	bpl.n	8004434 <_printf_i+0xb8>
 800443c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004440:	2d00      	cmp	r5, #0
 8004442:	da03      	bge.n	800444c <_printf_i+0xd0>
 8004444:	232d      	movs	r3, #45	@ 0x2d
 8004446:	426d      	negs	r5, r5
 8004448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800444c:	230a      	movs	r3, #10
 800444e:	4858      	ldr	r0, [pc, #352]	@ (80045b0 <_printf_i+0x234>)
 8004450:	e011      	b.n	8004476 <_printf_i+0xfa>
 8004452:	6821      	ldr	r1, [r4, #0]
 8004454:	6833      	ldr	r3, [r6, #0]
 8004456:	0608      	lsls	r0, r1, #24
 8004458:	f853 5b04 	ldr.w	r5, [r3], #4
 800445c:	d402      	bmi.n	8004464 <_printf_i+0xe8>
 800445e:	0649      	lsls	r1, r1, #25
 8004460:	bf48      	it	mi
 8004462:	b2ad      	uxthmi	r5, r5
 8004464:	2f6f      	cmp	r7, #111	@ 0x6f
 8004466:	6033      	str	r3, [r6, #0]
 8004468:	bf14      	ite	ne
 800446a:	230a      	movne	r3, #10
 800446c:	2308      	moveq	r3, #8
 800446e:	4850      	ldr	r0, [pc, #320]	@ (80045b0 <_printf_i+0x234>)
 8004470:	2100      	movs	r1, #0
 8004472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004476:	6866      	ldr	r6, [r4, #4]
 8004478:	2e00      	cmp	r6, #0
 800447a:	60a6      	str	r6, [r4, #8]
 800447c:	db05      	blt.n	800448a <_printf_i+0x10e>
 800447e:	6821      	ldr	r1, [r4, #0]
 8004480:	432e      	orrs	r6, r5
 8004482:	f021 0104 	bic.w	r1, r1, #4
 8004486:	6021      	str	r1, [r4, #0]
 8004488:	d04b      	beq.n	8004522 <_printf_i+0x1a6>
 800448a:	4616      	mov	r6, r2
 800448c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004490:	fb03 5711 	mls	r7, r3, r1, r5
 8004494:	5dc7      	ldrb	r7, [r0, r7]
 8004496:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800449a:	462f      	mov	r7, r5
 800449c:	42bb      	cmp	r3, r7
 800449e:	460d      	mov	r5, r1
 80044a0:	d9f4      	bls.n	800448c <_printf_i+0x110>
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d10b      	bne.n	80044be <_printf_i+0x142>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	07df      	lsls	r7, r3, #31
 80044aa:	d508      	bpl.n	80044be <_printf_i+0x142>
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	6861      	ldr	r1, [r4, #4]
 80044b0:	4299      	cmp	r1, r3
 80044b2:	bfde      	ittt	le
 80044b4:	2330      	movle	r3, #48	@ 0x30
 80044b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044be:	1b92      	subs	r2, r2, r6
 80044c0:	6122      	str	r2, [r4, #16]
 80044c2:	464b      	mov	r3, r9
 80044c4:	4621      	mov	r1, r4
 80044c6:	4640      	mov	r0, r8
 80044c8:	f8cd a000 	str.w	sl, [sp]
 80044cc:	aa03      	add	r2, sp, #12
 80044ce:	f7ff fee3 	bl	8004298 <_printf_common>
 80044d2:	3001      	adds	r0, #1
 80044d4:	d14a      	bne.n	800456c <_printf_i+0x1f0>
 80044d6:	f04f 30ff 	mov.w	r0, #4294967295
 80044da:	b004      	add	sp, #16
 80044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	f043 0320 	orr.w	r3, r3, #32
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	2778      	movs	r7, #120	@ 0x78
 80044ea:	4832      	ldr	r0, [pc, #200]	@ (80045b4 <_printf_i+0x238>)
 80044ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	6831      	ldr	r1, [r6, #0]
 80044f4:	061f      	lsls	r7, r3, #24
 80044f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80044fa:	d402      	bmi.n	8004502 <_printf_i+0x186>
 80044fc:	065f      	lsls	r7, r3, #25
 80044fe:	bf48      	it	mi
 8004500:	b2ad      	uxthmi	r5, r5
 8004502:	6031      	str	r1, [r6, #0]
 8004504:	07d9      	lsls	r1, r3, #31
 8004506:	bf44      	itt	mi
 8004508:	f043 0320 	orrmi.w	r3, r3, #32
 800450c:	6023      	strmi	r3, [r4, #0]
 800450e:	b11d      	cbz	r5, 8004518 <_printf_i+0x19c>
 8004510:	2310      	movs	r3, #16
 8004512:	e7ad      	b.n	8004470 <_printf_i+0xf4>
 8004514:	4826      	ldr	r0, [pc, #152]	@ (80045b0 <_printf_i+0x234>)
 8004516:	e7e9      	b.n	80044ec <_printf_i+0x170>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	f023 0320 	bic.w	r3, r3, #32
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	e7f6      	b.n	8004510 <_printf_i+0x194>
 8004522:	4616      	mov	r6, r2
 8004524:	e7bd      	b.n	80044a2 <_printf_i+0x126>
 8004526:	6833      	ldr	r3, [r6, #0]
 8004528:	6825      	ldr	r5, [r4, #0]
 800452a:	1d18      	adds	r0, r3, #4
 800452c:	6961      	ldr	r1, [r4, #20]
 800452e:	6030      	str	r0, [r6, #0]
 8004530:	062e      	lsls	r6, r5, #24
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	d501      	bpl.n	800453a <_printf_i+0x1be>
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	e002      	b.n	8004540 <_printf_i+0x1c4>
 800453a:	0668      	lsls	r0, r5, #25
 800453c:	d5fb      	bpl.n	8004536 <_printf_i+0x1ba>
 800453e:	8019      	strh	r1, [r3, #0]
 8004540:	2300      	movs	r3, #0
 8004542:	4616      	mov	r6, r2
 8004544:	6123      	str	r3, [r4, #16]
 8004546:	e7bc      	b.n	80044c2 <_printf_i+0x146>
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	2100      	movs	r1, #0
 800454c:	1d1a      	adds	r2, r3, #4
 800454e:	6032      	str	r2, [r6, #0]
 8004550:	681e      	ldr	r6, [r3, #0]
 8004552:	6862      	ldr	r2, [r4, #4]
 8004554:	4630      	mov	r0, r6
 8004556:	f000 f859 	bl	800460c <memchr>
 800455a:	b108      	cbz	r0, 8004560 <_printf_i+0x1e4>
 800455c:	1b80      	subs	r0, r0, r6
 800455e:	6060      	str	r0, [r4, #4]
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	2300      	movs	r3, #0
 8004566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800456a:	e7aa      	b.n	80044c2 <_printf_i+0x146>
 800456c:	4632      	mov	r2, r6
 800456e:	4649      	mov	r1, r9
 8004570:	4640      	mov	r0, r8
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	47d0      	blx	sl
 8004576:	3001      	adds	r0, #1
 8004578:	d0ad      	beq.n	80044d6 <_printf_i+0x15a>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	079b      	lsls	r3, r3, #30
 800457e:	d413      	bmi.n	80045a8 <_printf_i+0x22c>
 8004580:	68e0      	ldr	r0, [r4, #12]
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	4298      	cmp	r0, r3
 8004586:	bfb8      	it	lt
 8004588:	4618      	movlt	r0, r3
 800458a:	e7a6      	b.n	80044da <_printf_i+0x15e>
 800458c:	2301      	movs	r3, #1
 800458e:	4632      	mov	r2, r6
 8004590:	4649      	mov	r1, r9
 8004592:	4640      	mov	r0, r8
 8004594:	47d0      	blx	sl
 8004596:	3001      	adds	r0, #1
 8004598:	d09d      	beq.n	80044d6 <_printf_i+0x15a>
 800459a:	3501      	adds	r5, #1
 800459c:	68e3      	ldr	r3, [r4, #12]
 800459e:	9903      	ldr	r1, [sp, #12]
 80045a0:	1a5b      	subs	r3, r3, r1
 80045a2:	42ab      	cmp	r3, r5
 80045a4:	dcf2      	bgt.n	800458c <_printf_i+0x210>
 80045a6:	e7eb      	b.n	8004580 <_printf_i+0x204>
 80045a8:	2500      	movs	r5, #0
 80045aa:	f104 0619 	add.w	r6, r4, #25
 80045ae:	e7f5      	b.n	800459c <_printf_i+0x220>
 80045b0:	08004e27 	.word	0x08004e27
 80045b4:	08004e38 	.word	0x08004e38

080045b8 <memmove>:
 80045b8:	4288      	cmp	r0, r1
 80045ba:	b510      	push	{r4, lr}
 80045bc:	eb01 0402 	add.w	r4, r1, r2
 80045c0:	d902      	bls.n	80045c8 <memmove+0x10>
 80045c2:	4284      	cmp	r4, r0
 80045c4:	4623      	mov	r3, r4
 80045c6:	d807      	bhi.n	80045d8 <memmove+0x20>
 80045c8:	1e43      	subs	r3, r0, #1
 80045ca:	42a1      	cmp	r1, r4
 80045cc:	d008      	beq.n	80045e0 <memmove+0x28>
 80045ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045d6:	e7f8      	b.n	80045ca <memmove+0x12>
 80045d8:	4601      	mov	r1, r0
 80045da:	4402      	add	r2, r0
 80045dc:	428a      	cmp	r2, r1
 80045de:	d100      	bne.n	80045e2 <memmove+0x2a>
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ea:	e7f7      	b.n	80045dc <memmove+0x24>

080045ec <_sbrk_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	2300      	movs	r3, #0
 80045f0:	4d05      	ldr	r5, [pc, #20]	@ (8004608 <_sbrk_r+0x1c>)
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	f7fc ff62 	bl	80014c0 <_sbrk>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_sbrk_r+0x1a>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_sbrk_r+0x1a>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	20000ba0 	.word	0x20000ba0

0800460c <memchr>:
 800460c:	4603      	mov	r3, r0
 800460e:	b510      	push	{r4, lr}
 8004610:	b2c9      	uxtb	r1, r1
 8004612:	4402      	add	r2, r0
 8004614:	4293      	cmp	r3, r2
 8004616:	4618      	mov	r0, r3
 8004618:	d101      	bne.n	800461e <memchr+0x12>
 800461a:	2000      	movs	r0, #0
 800461c:	e003      	b.n	8004626 <memchr+0x1a>
 800461e:	7804      	ldrb	r4, [r0, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	428c      	cmp	r4, r1
 8004624:	d1f6      	bne.n	8004614 <memchr+0x8>
 8004626:	bd10      	pop	{r4, pc}

08004628 <_realloc_r>:
 8004628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462c:	4607      	mov	r7, r0
 800462e:	4614      	mov	r4, r2
 8004630:	460d      	mov	r5, r1
 8004632:	b921      	cbnz	r1, 800463e <_realloc_r+0x16>
 8004634:	4611      	mov	r1, r2
 8004636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800463a:	f7ff bc49 	b.w	8003ed0 <_malloc_r>
 800463e:	b92a      	cbnz	r2, 800464c <_realloc_r+0x24>
 8004640:	f7ff fbdc 	bl	8003dfc <_free_r>
 8004644:	4625      	mov	r5, r4
 8004646:	4628      	mov	r0, r5
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800464c:	f000 f81a 	bl	8004684 <_malloc_usable_size_r>
 8004650:	4284      	cmp	r4, r0
 8004652:	4606      	mov	r6, r0
 8004654:	d802      	bhi.n	800465c <_realloc_r+0x34>
 8004656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800465a:	d8f4      	bhi.n	8004646 <_realloc_r+0x1e>
 800465c:	4621      	mov	r1, r4
 800465e:	4638      	mov	r0, r7
 8004660:	f7ff fc36 	bl	8003ed0 <_malloc_r>
 8004664:	4680      	mov	r8, r0
 8004666:	b908      	cbnz	r0, 800466c <_realloc_r+0x44>
 8004668:	4645      	mov	r5, r8
 800466a:	e7ec      	b.n	8004646 <_realloc_r+0x1e>
 800466c:	42b4      	cmp	r4, r6
 800466e:	4622      	mov	r2, r4
 8004670:	4629      	mov	r1, r5
 8004672:	bf28      	it	cs
 8004674:	4632      	movcs	r2, r6
 8004676:	f7ff fbb3 	bl	8003de0 <memcpy>
 800467a:	4629      	mov	r1, r5
 800467c:	4638      	mov	r0, r7
 800467e:	f7ff fbbd 	bl	8003dfc <_free_r>
 8004682:	e7f1      	b.n	8004668 <_realloc_r+0x40>

08004684 <_malloc_usable_size_r>:
 8004684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004688:	1f18      	subs	r0, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfbc      	itt	lt
 800468e:	580b      	ldrlt	r3, [r1, r0]
 8004690:	18c0      	addlt	r0, r0, r3
 8004692:	4770      	bx	lr

08004694 <_init>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	bf00      	nop
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr

080046a0 <_fini>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	bf00      	nop
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr
