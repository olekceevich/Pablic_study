# -*- coding: utf-8 -*-
import base64
import datetime
import hashlib
import hmac
import json
from urllib.parse import urlparse
import requests

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ApiAppKey = 'APIDxoVSCWkGetrlcQRTnh3cVD0NouLJuxW6hY4Ty'
ApiAppSecret = 'DjkTR3BMpCziGizXNJMre9VjbvZysSBNX7CKL'
robot_sn = '8170G5426060002'

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
HTTPMethod = "GET"
Accept = "application/json"
ContentType = "application/json"
url = f"https://csg-open-platform.pudutech.com/pudu-entry/map-service/v1/open/current?sn={robot_sn}&need_element=true"

# === –†–∞—Å—á—ë—Ç Content-MD5 (–ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ –¥–ª—è GET ‚Üí –ø—É—Å—Ç–æ–π md5)
body_json = ""
body_md5 = hashlib.md5(body_json.encode()).hexdigest()
ContentMD5 = base64.b64encode(body_md5.encode()).decode()

# === –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
GMT_FORMAT = "%a, %d %b %Y %H:%M:%S GMT"
xDate = datetime.datetime.utcnow().strftime(GMT_FORMAT)

# === –ü–∞—Ä—Å–∏–Ω–≥ –ø—É—Ç–∏
urlInfo = urlparse(url)
Host = urlInfo.hostname
Path = urlInfo.path

# === –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
signing_str = "x-date: %s\n%s\n%s\n%s\n%s\n%s" % (
    xDate,
    HTTPMethod,
    Accept,
    ContentType,
    ContentMD5,
    Path,
)

# === –ü–æ–¥–ø–∏—Å—å HMAC
sign = hmac.new(ApiAppSecret.encode(), msg=signing_str.encode(), digestmod=hashlib.sha1).digest()
sign = base64.b64encode(sign).decode()
auth = f'hmac id="{ApiAppKey}", algorithm="hmac-sha1", headers="x-date", signature="{sign}"'

# === –ó–∞–≥–æ–ª–æ–≤–∫–∏
headers = {
    "Host": Host,
    "Accept": Accept,
    "Content-Type": ContentType,
    "x-date": xDate,
    "Authorization": auth,
    "Content-MD5": ContentMD5
}

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
response = requests.get(url, headers=headers)

print("–°—Ç–∞—Ç—É—Å:", response.status_code)
print("–û—Ç–≤–µ—Ç:")

try:
    data = response.json()
    if "data" in data:
        print("üó∫ –ö–∞—Ä—Ç–∞:", data["data"].get("name", ""))
        for elem in data["data"].get("elements", []):
            print(f"[{elem.get('mode')}] {elem.get('name')} ‚Üí id: {elem.get('id')} ‚Üí vector: {elem.get('vector')}")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è 'data'. –û—Ç–≤–µ—Ç:", data)
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", e)
    print(response.text)
